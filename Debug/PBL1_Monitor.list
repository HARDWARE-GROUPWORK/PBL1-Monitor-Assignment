
PBL1_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b608  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800b808  0800b808  0001b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed4  0800bed4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bedc  0800bedc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200001f0  0800c0d4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800c0d4  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d60b  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f89  00000000  00000000  0003d829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000417b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00042ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2cb  00000000  00000000  00044400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d616  00000000  00000000  000706cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106e14  00000000  00000000  0008dce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec8  00000000  00000000  00194b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b7f0 	.word	0x0800b7f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800b7f0 	.word	0x0800b7f0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dc01      	bgt.n	8000606 <bytestowrite+0x1e>
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	e003      	b.n	800060e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af04      	add	r7, sp, #16
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	460b      	mov	r3, r1
 800062c:	81bb      	strh	r3, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000632:	2306      	movs	r3, #6
 8000634:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <EEPROM_Write+0x2a>
 8000644:	333f      	adds	r3, #63	; 0x3f
 8000646:	119b      	asrs	r3, r3, #6
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4413      	add	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000650:	8b7a      	ldrh	r2, [r7, #26]
 8000652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065c:	2300      	movs	r3, #0
 800065e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	e034      	b.n	80006d0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b21a      	sxth	r2, r3
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	b21b      	sxth	r3, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800067a:	89ba      	ldrh	r2, [r7, #12]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <bytestowrite>
 8000686:	4603      	mov	r3, r0
 8000688:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	8af9      	ldrh	r1, [r7, #22]
 8000692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	8aba      	ldrh	r2, [r7, #20]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	460a      	mov	r2, r1
 80006a2:	21a0      	movs	r1, #160	; 0xa0
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <EEPROM_Write+0xc8>)
 80006a6:	f004 f9d9 	bl	8004a5c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	3301      	adds	r3, #1
 80006ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006b0:	2300      	movs	r3, #0
 80006b2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006c4:	2005      	movs	r0, #5
 80006c6:	f003 f84d 	bl	8003764 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	8b3b      	ldrh	r3, [r7, #24]
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbc6      	blt.n	8000666 <EEPROM_Write+0x4a>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003a8 	.word	0x200003a8

080006e8 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e00c      	b.n	8000718 <float2Bytes+0x30>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	440b      	add	r3, r1
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	440a      	add	r2, r1
 800070c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9ef      	bls.n	80006fe <float2Bytes+0x16>
    }

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e00c      	b.n	8000754 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	441a      	add	r2, r3
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	f107 0118 	add.w	r1, r7, #24
 8000748:	440b      	add	r3, r1
 800074a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	3301      	adds	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ef      	bls.n	800073a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	ed87 0a00 	vstr	s0, [r7]
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000788:	ed97 0a00 	vldr	s0, [r7]
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800078e:	f7ff ffab 	bl	80006e8 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	2304      	movs	r3, #4
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <EEPROM_Write_NUM+0x34>)
 800079a:	f7ff ff3f 	bl	800061c <EEPROM_Write>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000035c 	.word	0x2000035c

080007ac <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	88f8      	ldrh	r0, [r7, #6]
 80007c4:	2304      	movs	r3, #4
 80007c6:	f000 f80d 	bl	80007e4 <EEPROM_Read>

	return (Bytes2float(buffer));
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffac 	bl	800072c <Bytes2float>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	460b      	mov	r3, r1
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007fa:	2306      	movs	r3, #6
 80007fc:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	da00      	bge.n	800080e <EEPROM_Read+0x2a>
 800080c:	333f      	adds	r3, #63	; 0x3f
 800080e:	119b      	asrs	r3, r3, #6
 8000810:	b29a      	uxth	r2, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000818:	8b7a      	ldrh	r2, [r7, #26]
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000824:	2300      	movs	r3, #0
 8000826:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e031      	b.n	8000892 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800082e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	b21b      	sxth	r3, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fecd 	bl	80005e8 <bytestowrite>
 800084e:	4603      	mov	r3, r0
 8000850:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	8af9      	ldrh	r1, [r7, #22]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	9202      	str	r2, [sp, #8]
 8000860:	8aba      	ldrh	r2, [r7, #20]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	460a      	mov	r2, r1
 800086a:	21a0      	movs	r1, #160	; 0xa0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <EEPROM_Read+0xc0>)
 800086e:	f004 fa09 	bl	8004c84 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	3301      	adds	r3, #1
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000878:	2300      	movs	r3, #0
 800087a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	8abb      	ldrh	r3, [r7, #20]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	3301      	adds	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	8b3b      	ldrh	r3, [r7, #24]
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbc9      	blt.n	800082e <EEPROM_Read+0x4a>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003a8 	.word	0x200003a8

080008a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80008b2:	2306      	movs	r3, #6
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	21ff      	movs	r1, #255	; 0xff
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 f984 	bl	8008bd8 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80008d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <EEPROM_PageErase+0x54>)
 80008ea:	f004 f8b7 	bl	8004a5c <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80008ee:	2005      	movs	r0, #5
 80008f0:	f002 ff38 	bl	8003764 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003a8 	.word	0x200003a8

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f002 ff23 	bl	80037ac <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f001 fc70 	bl	8002250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000970:	230a      	movs	r3, #10
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f003 f8bd 	bl	8003b00 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f001 fc60 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000360 	.word	0x20000360
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f003 fbcf 	bl	80041ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b9b      	ldr	r3, [pc, #620]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b98      	ldr	r3, [pc, #608]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b95      	ldr	r3, [pc, #596]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a94      	ldr	r2, [pc, #592]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b92      	ldr	r3, [pc, #584]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b8f      	ldr	r3, [pc, #572]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8e      	ldr	r2, [pc, #568]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b8c      	ldr	r3, [pc, #560]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b89      	ldr	r3, [pc, #548]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a88      	ldr	r2, [pc, #544]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b86      	ldr	r3, [pc, #536]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b83      	ldr	r3, [pc, #524]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a82      	ldr	r2, [pc, #520]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b80      	ldr	r3, [pc, #512]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b7d      	ldr	r3, [pc, #500]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a7c      	ldr	r2, [pc, #496]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b7a      	ldr	r3, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b77      	ldr	r3, [pc, #476]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a76      	ldr	r2, [pc, #472]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a70      	ldr	r2, [pc, #448]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <MX_GPIO_Init+0x284>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2168      	movs	r1, #104	; 0x68
 8000afe:	486b      	ldr	r0, [pc, #428]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b00:	f003 fd00 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b0a:	4869      	ldr	r0, [pc, #420]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000b0c:	f003 fcfa 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4867      	ldr	r0, [pc, #412]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000b16:	f003 fcf5 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b20:	4865      	ldr	r0, [pc, #404]	; (8000cb8 <MX_GPIO_Init+0x294>)
 8000b22:	f003 fcef 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b26:	2314      	movs	r3, #20
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	485c      	ldr	r0, [pc, #368]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b3a:	f003 fb37 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b3e:	2368      	movs	r3, #104	; 0x68
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4855      	ldr	r0, [pc, #340]	; (8000cac <MX_GPIO_Init+0x288>)
 8000b56:	f003 fb29 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <MX_GPIO_Init+0x298>)
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4852      	ldr	r0, [pc, #328]	; (8000cb8 <MX_GPIO_Init+0x294>)
 8000b70:	f003 fb1c 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	; 0x32
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	484a      	ldr	r0, [pc, #296]	; (8000cb8 <MX_GPIO_Init+0x294>)
 8000b90:	f003 fb0c 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b94:	2386      	movs	r3, #134	; 0x86
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <MX_GPIO_Init+0x29c>)
 8000bb0:	f003 fafc 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4837      	ldr	r0, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bd2:	f003 faeb 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4830      	ldr	r0, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0x28c>)
 8000bf0:	f003 fadc 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c0c:	f003 face 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4824      	ldr	r0, [pc, #144]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c24:	f003 fac2 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000c28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <MX_GPIO_Init+0x294>)
 8000c42:	f003 fab3 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_GPIO_Init+0x298>)
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <MX_GPIO_Init+0x2a0>)
 8000c5a:	f003 faa7 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_GPIO_Init+0x290>)
 8000c7c:	f003 fa96 	bl	80041ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	2017      	movs	r0, #23
 8000c86:	f003 fa5a 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c8a:	2017      	movs	r0, #23
 8000c8c:	f003 fa73 	bl	8004176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2104      	movs	r1, #4
 8000c94:	2028      	movs	r0, #40	; 0x28
 8000c96:	f003 fa52 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9a:	2028      	movs	r0, #40	; 0x28
 8000c9c:	f003 fa6b 	bl	8004176 <HAL_NVIC_EnableIRQ>

}
 8000ca0:	bf00      	nop
 8000ca2:	3738      	adds	r7, #56	; 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	10210000 	.word	0x10210000
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020c00 	.word	0x40020c00

08000cc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <MX_I2C1_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <MX_I2C1_Init+0x7c>)
 8000cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d02:	480e      	ldr	r0, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d04:	f003 fc30 	bl	8004568 <HAL_I2C_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0e:	f001 fa9f 	bl	8002250 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d16:	f004 fb57 	bl	80053c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f001 fa96 	bl	8002250 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_I2C1_Init+0x74>)
 8000d28:	f004 fb99 	bl	800545e <HAL_I2CEx_ConfigDigitalFilter>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f001 fa8d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200003a8 	.word	0x200003a8
 8000d40:	40005400 	.word	0x40005400
 8000d44:	00c0eaff 	.word	0x00c0eaff

08000d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_I2C_MspInit+0x7c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d128      	bne.n	8000dbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000da0:	f003 fa04 	bl	80041ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd4:	f3bf 8f4f 	dsb	sy
}
 8000dd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dda:	f3bf 8f6f 	isb	sy
}
 8000dde:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <SCB_EnableICache+0x48>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <SCB_EnableICache+0x48>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <SCB_EnableICache+0x48>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e00:	f3bf 8f4f 	dsb	sy
}
 8000e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e06:	f3bf 8f6f 	isb	sy
}
 8000e0a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <SCB_EnableDCache+0x84>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2a:	f3bf 8f4f 	dsb	sy
}
 8000e2e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <SCB_EnableDCache+0x84>)
 8000e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e36:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0b5b      	lsrs	r3, r3, #13
 8000e3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e40:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e4a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e54:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e5a:	4911      	ldr	r1, [pc, #68]	; (8000ea0 <SCB_EnableDCache+0x84>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	60ba      	str	r2, [r7, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1ef      	bne.n	8000e4c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	60fa      	str	r2, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1e5      	bne.n	8000e42 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e76:	f3bf 8f4f 	dsb	sy
}
 8000e7a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <SCB_EnableDCache+0x84>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <SCB_EnableDCache+0x84>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e88:	f3bf 8f4f 	dsb	sy
}
 8000e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e8e:	f3bf 8f6f 	isb	sy
}
 8000e92:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <eraseAllData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// EEPROM Delete
void eraseAllData(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	for (int i=0; i<512; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e007      	b.n	8000ec0 <eraseAllData+0x1c>
	{
	  EEPROM_PageErase(i);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fcf7 	bl	80008a8 <EEPROM_PageErase>
	for (int i=0; i<512; i++)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec6:	dbf3      	blt.n	8000eb0 <eraseAllData+0xc>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <saveAllData>:

void saveAllData(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0a2      	sub	sp, #136	; 0x88
 8000ed8:	af00      	add	r7, sp, #0
//	sprintf(str, "*******************\n\r");
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);


	// Record 32 bit, #PAGE 1, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000ee0:	e01a      	b.n	8000f18 <saveAllData+0x44>
		uint32_t value = numberOfRecordBuffer[i];
 8000ee2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ee6:	4a65      	ldr	r2, [pc, #404]	; (800107c <saveAllData+0x1a8>)
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	66bb      	str	r3, [r7, #104]	; 0x68
		EEPROM_Write_NUM(1, i*4, value);
 8000eee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000efa:	ee07 2a90 	vmov	s15, r2
 8000efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	4619      	mov	r1, r3
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc33 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 8000f0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f12:	3301      	adds	r3, #1
 8000f14:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d9e0      	bls.n	8000ee2 <saveAllData+0xe>

//		sprintf(str, "%d WRITE1\n\r", value);
//		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
	}
	// Record 32 bit, #PAGE 2, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000f26:	e01b      	b.n	8000f60 <saveAllData+0x8c>
		uint32_t value = numberOfRecordBuffer[i+10];
 8000f28:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f2c:	330a      	adds	r3, #10
 8000f2e:	4a53      	ldr	r2, [pc, #332]	; (800107c <saveAllData+0x1a8>)
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	66fb      	str	r3, [r7, #108]	; 0x6c
		EEPROM_Write_NUM(2, i*4, value);
 8000f36:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f42:	ee07 2a90 	vmov	s15, r2
 8000f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff fc0f 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 8000f56:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000f60:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f64:	2b09      	cmp	r3, #9
 8000f66:	d9df      	bls.n	8000f28 <saveAllData+0x54>
	}



	// Light is Ok
	EEPROM_Write(3, 0, lightPercentBuffer, 20);
 8000f68:	2314      	movs	r3, #20
 8000f6a:	4a45      	ldr	r2, [pc, #276]	; (8001080 <saveAllData+0x1ac>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f7ff fb54 	bl	800061c <EEPROM_Write>

	// Temp 32 bit, #PAGE 4, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000f7a:	e016      	b.n	8000faa <saveAllData+0xd6>
		float value = tempBuffer[i];
 8000f7c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f80:	4a40      	ldr	r2, [pc, #256]	; (8001084 <saveAllData+0x1b0>)
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	673b      	str	r3, [r7, #112]	; 0x70
		EEPROM_Write_NUM(4, i*4, value);
 8000f8a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f7ff fbea 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 8000fa0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000faa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	d9e4      	bls.n	8000f7c <saveAllData+0xa8>
	}
	// Temp 32 bit, #PAGE 5, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000fb8:	e017      	b.n	8000fea <saveAllData+0x116>
		float value = tempBuffer[i+10];
 8000fba:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000fbe:	330a      	adds	r3, #10
 8000fc0:	4a30      	ldr	r2, [pc, #192]	; (8001084 <saveAllData+0x1b0>)
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	677b      	str	r3, [r7, #116]	; 0x74
		EEPROM_Write_NUM(5, i*4, value);
 8000fca:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f7ff fbca 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 8000fe0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000fea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	d9e3      	bls.n	8000fba <saveAllData+0xe6>
	}

	// Humid 32 bit, #PAGE 6, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000ff8:	e016      	b.n	8001028 <saveAllData+0x154>
		float value = humidBuffer[i];
 8000ffa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <saveAllData+0x1b4>)
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	67bb      	str	r3, [r7, #120]	; 0x78
		EEPROM_Write_NUM(6, i*4, value);
 8001008:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800100c:	b29b      	uxth	r3, r3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	b29b      	uxth	r3, r3
 8001012:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001016:	4619      	mov	r1, r3
 8001018:	2006      	movs	r0, #6
 800101a:	f7ff fbab 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 800101e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001022:	3301      	adds	r3, #1
 8001024:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001028:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800102c:	2b09      	cmp	r3, #9
 800102e:	d9e4      	bls.n	8000ffa <saveAllData+0x126>
	}
	// Humid 32 bit, #PAGE 7, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001036:	e017      	b.n	8001068 <saveAllData+0x194>
		float value = humidBuffer[i+10];
 8001038:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800103c:	330a      	adds	r3, #10
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <saveAllData+0x1b4>)
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	67fb      	str	r3, [r7, #124]	; 0x7c
		EEPROM_Write_NUM(7, i*4, value);
 8001048:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800104c:	b29b      	uxth	r3, r3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	b29b      	uxth	r3, r3
 8001052:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8001056:	4619      	mov	r1, r3
 8001058:	2007      	movs	r0, #7
 800105a:	f7ff fb8b 	bl	8000774 <EEPROM_Write_NUM>
	for(uint8_t i = 0; i < 10; i++){
 800105e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001062:	3301      	adds	r3, #1
 8001064:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001068:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800106c:	2b09      	cmp	r3, #9
 800106e:	d9e3      	bls.n	8001038 <saveAllData+0x164>
	}

}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3788      	adds	r7, #136	; 0x88
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000224 	.word	0x20000224
 8001080:	20000274 	.word	0x20000274
 8001084:	20000288 	.word	0x20000288
 8001088:	200002d8 	.word	0x200002d8

0800108c <readAllData>:

void readAllData(){
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	; 0x70
 8001090:	af00      	add	r7, sp, #0

	uint32_t numberOfRecordMax = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	66fb      	str	r3, [r7, #108]	; 0x6c
//	sprintf(str, "---------------------\n\r");
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);


	// Record 32 bit, #PAGE 1, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 8001096:	2300      	movs	r3, #0
 8001098:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800109c:	e026      	b.n	80010ec <readAllData+0x60>
		numberOfRecordBuffer[i] = (uint32_t)EEPROM_Read_NUM(1, i*4);
 800109e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fb7e 	bl	80007ac <EEPROM_Read_NUM>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010bc:	ee17 1a90 	vmov	r1, s15
 80010c0:	4a73      	ldr	r2, [pc, #460]	; (8001290 <readAllData+0x204>)
 80010c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(numberOfRecordBuffer[i] > numberOfRecordMax){
 80010c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010ca:	4a71      	ldr	r2, [pc, #452]	; (8001290 <readAllData+0x204>)
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d205      	bcs.n	80010e2 <readAllData+0x56>
			numberOfRecordMax = numberOfRecordBuffer[i];
 80010d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010da:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <readAllData+0x204>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(uint8_t i = 0; i < 10; i++){
 80010e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010e6:	3301      	adds	r3, #1
 80010e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80010ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d9d4      	bls.n	800109e <readAllData+0x12>

//		sprintf(str, "%d READ1\n\r",numberOfRecordBuffer[i]);
//		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
	}
	// Record 32 bit, #PAGE 2, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 80010fa:	e029      	b.n	8001150 <readAllData+0xc4>
		numberOfRecordBuffer[i+10] = (uint32_t)EEPROM_Read_NUM(2, i*4);
 80010fc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001100:	b29b      	uxth	r3, r3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	b29b      	uxth	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff fb4f 	bl	80007ac <EEPROM_Read_NUM>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001116:	330a      	adds	r3, #10
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 1a90 	vmov	r1, s15
 8001120:	4a5b      	ldr	r2, [pc, #364]	; (8001290 <readAllData+0x204>)
 8001122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(numberOfRecordBuffer[i+10] > numberOfRecordMax){
 8001126:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800112a:	330a      	adds	r3, #10
 800112c:	4a58      	ldr	r2, [pc, #352]	; (8001290 <readAllData+0x204>)
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001134:	429a      	cmp	r2, r3
 8001136:	d206      	bcs.n	8001146 <readAllData+0xba>
			numberOfRecordMax = numberOfRecordBuffer[i+10];
 8001138:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800113c:	330a      	adds	r3, #10
 800113e:	4a54      	ldr	r2, [pc, #336]	; (8001290 <readAllData+0x204>)
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(uint8_t i = 0; i < 10; i++){
 8001146:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800114a:	3301      	adds	r3, #1
 800114c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001150:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001154:	2b09      	cmp	r3, #9
 8001156:	d9d1      	bls.n	80010fc <readAllData+0x70>
//		sprintf(str, "%d READ2\n\r",numberOfRecordBuffer[i+10]);
//		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
	}

	// Update the Lastest
	numberOfRecord = numberOfRecordMax;
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <readAllData+0x208>)
 800115a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800115c:	6013      	str	r3, [r2, #0]

	// Light is Ok
	EEPROM_Read(3, 0, lightPercentBuffer, 20);
 800115e:	2314      	movs	r3, #20
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <readAllData+0x20c>)
 8001162:	2100      	movs	r1, #0
 8001164:	2003      	movs	r0, #3
 8001166:	f7ff fb3d 	bl	80007e4 <EEPROM_Read>

	// Temp 32 bit, #PAGE 4, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001170:	e01a      	b.n	80011a8 <readAllData+0x11c>
		tempBuffer[i] = (uint32_t)EEPROM_Read_NUM(4, i*4);
 8001172:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001176:	b29b      	uxth	r3, r3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	b29b      	uxth	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	2004      	movs	r0, #4
 8001180:	f7ff fb14 	bl	80007ac <EEPROM_Read_NUM>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001194:	4a41      	ldr	r2, [pc, #260]	; (800129c <readAllData+0x210>)
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 10; i++){
 800119e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80011a2:	3301      	adds	r3, #1
 80011a4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80011a8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d9e0      	bls.n	8001172 <readAllData+0xe6>
	}
	// Temp 32 bit, #PAGE 5, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80011b6:	e01b      	b.n	80011f0 <readAllData+0x164>
		tempBuffer[i+10] = (uint32_t)EEPROM_Read_NUM(5, i*4);
 80011b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011bc:	b29b      	uxth	r3, r3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	2005      	movs	r0, #5
 80011c6:	f7ff faf1 	bl	80007ac <EEPROM_Read_NUM>
 80011ca:	eef0 7a40 	vmov.f32	s15, s0
 80011ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011d6:	330a      	adds	r3, #10
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	4a2f      	ldr	r2, [pc, #188]	; (800129c <readAllData+0x210>)
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 10; i++){
 80011e6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80011f0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d9df      	bls.n	80011b8 <readAllData+0x12c>
	}
	// Humid 32 bit, #PAGE 6, 0-9, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011fe:	e01a      	b.n	8001236 <readAllData+0x1aa>
		humidBuffer[i] = (uint32_t)EEPROM_Read_NUM(6, i*4);
 8001200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001204:	b29b      	uxth	r3, r3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	b29b      	uxth	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	2006      	movs	r0, #6
 800120e:	f7ff facd 	bl	80007ac <EEPROM_Read_NUM>
 8001212:	eef0 7a40 	vmov.f32	s15, s0
 8001216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <readAllData+0x214>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 10; i++){
 800122c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800123a:	2b09      	cmp	r3, #9
 800123c:	d9e0      	bls.n	8001200 <readAllData+0x174>
	}
	// Humid 32 bit, #PAGE 7, 10-19, 10 amounts (40 bytes)
	for(uint8_t i = 0; i < 10; i++){
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001244:	e01b      	b.n	800127e <readAllData+0x1f2>
		humidBuffer[i+10] = (uint32_t)EEPROM_Read_NUM(7, i*4);
 8001246:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800124a:	b29b      	uxth	r3, r3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	b29b      	uxth	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	2007      	movs	r0, #7
 8001254:	f7ff faaa 	bl	80007ac <EEPROM_Read_NUM>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001264:	330a      	adds	r3, #10
 8001266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <readAllData+0x214>)
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 10; i++){
 8001274:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001278:	3301      	adds	r3, #1
 800127a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800127e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001282:	2b09      	cmp	r3, #9
 8001284:	d9df      	bls.n	8001246 <readAllData+0x1ba>
	}

}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3770      	adds	r7, #112	; 0x70
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000224 	.word	0x20000224
 8001294:	20000210 	.word	0x20000210
 8001298:	20000274 	.word	0x20000274
 800129c:	20000288 	.word	0x20000288
 80012a0:	200002d8 	.word	0x200002d8

080012a4 <setHorizontalScreen>:

// Paint screen black
void setHorizontalScreen(uint16_t color){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 f88f 	bl	80033d4 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f001 fe86 	bl	8002fc8 <ILI9341_Set_Rotation>
	ILI9341_Draw_Filled_Rectangle_Coord(15, 15, 305, 225, BLACK);
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	23e1      	movs	r3, #225	; 0xe1
 80012c2:	f240 1231 	movw	r2, #305	; 0x131
 80012c6:	210f      	movs	r1, #15
 80012c8:	200f      	movs	r0, #15
 80012ca:	f001 fc82 	bl	8002bd2 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <printText>:

// Print text white font with black background
void printText(char arr[],float line,int offset,int size, uint32_t color){ // text, line, offset, size
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b088      	sub	sp, #32
 80012da:	af02      	add	r7, sp, #8
 80012dc:	6178      	str	r0, [r7, #20]
 80012de:	ed87 0a04 	vstr	s0, [r7, #16]
 80012e2:	60f9      	str	r1, [r7, #12]
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	607b      	str	r3, [r7, #4]
	line -=1;
 80012e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012f4:	edc7 7a04 	vstr	s15, [r7, #16]
	ILI9341_Draw_Text(arr, 35, 30+(offset*line), color, size, BLACK);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	edd7 7a04 	vldr	s15, [r7, #16]
 8001306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800130e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	edc7 7a00 	vstr	s15, [r7]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	b299      	uxth	r1, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29b      	uxth	r3, r3
 8001326:	2000      	movs	r0, #0
 8001328:	9001      	str	r0, [sp, #4]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	460b      	mov	r3, r1
 800132e:	2123      	movs	r1, #35	; 0x23
 8001330:	6978      	ldr	r0, [r7, #20]
 8001332:	f001 fd49 	bl	8002dc8 <ILI9341_Draw_Text>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <printValue>:

void printValue(char arr[],float line,int offset,int size, uint32_t color){
 800133e:	b580      	push	{r7, lr}
 8001340:	b088      	sub	sp, #32
 8001342:	af02      	add	r7, sp, #8
 8001344:	6178      	str	r0, [r7, #20]
 8001346:	ed87 0a04 	vstr	s0, [r7, #16]
 800134a:	60f9      	str	r1, [r7, #12]
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	607b      	str	r3, [r7, #4]
	line -=1;
 8001350:	edd7 7a04 	vldr	s15, [r7, #16]
 8001354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800135c:	edc7 7a04 	vstr	s15, [r7, #16]
	ILI9341_Draw_Text(arr, 150, 30+(offset*line), color, size, BLACK);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136a:	edd7 7a04 	vldr	s15, [r7, #16]
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800137a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137e:	edc7 7a00 	vstr	s15, [r7]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b299      	uxth	r1, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	b29b      	uxth	r3, r3
 800138e:	2000      	movs	r0, #0
 8001390:	9001      	str	r0, [sp, #4]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	460b      	mov	r3, r1
 8001396:	2196      	movs	r1, #150	; 0x96
 8001398:	6978      	ldr	r0, [r7, #20]
 800139a:	f001 fd15 	bl	8002dc8 <ILI9341_Draw_Text>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <tempMonitor>:
char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];


void tempMonitor(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
	//Temperature
	cmdBuffer[0] = 0x03;
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <tempMonitor+0x108>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <tempMonitor+0x108>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <tempMonitor+0x108>)
 80013bc:	2204      	movs	r2, #4
 80013be:	709a      	strb	r2, [r3, #2]

	//HAL_Delay(5000); //>3000 ms
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 80013c0:	23c8      	movs	r3, #200	; 0xc8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2303      	movs	r3, #3
 80013c6:	4a3a      	ldr	r2, [pc, #232]	; (80014b0 <tempMonitor+0x108>)
 80013c8:	21b8      	movs	r1, #184	; 0xb8
 80013ca:	483a      	ldr	r0, [pc, #232]	; (80014b4 <tempMonitor+0x10c>)
 80013cc:	f003 f95c 	bl	8004688 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2303      	movs	r3, #3
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <tempMonitor+0x108>)
 80013d8:	21b8      	movs	r1, #184	; 0xb8
 80013da:	4836      	ldr	r0, [pc, #216]	; (80014b4 <tempMonitor+0x10c>)
 80013dc:	f003 f954 	bl	8004688 <HAL_I2C_Master_Transmit>

	HAL_Delay(100); // 50 is too low, 100 is okay
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f002 f9bf 	bl	8003764 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 80013e6:	23c8      	movs	r3, #200	; 0xc8
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2308      	movs	r3, #8
 80013ec:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <tempMonitor+0x110>)
 80013ee:	21b8      	movs	r1, #184	; 0xb8
 80013f0:	4830      	ldr	r0, [pc, #192]	; (80014b4 <tempMonitor+0x10c>)
 80013f2:	f003 fa3d 	bl	8004870 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <tempMonitor+0x110>)
 80013f8:	79db      	ldrb	r3, [r3, #7]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <tempMonitor+0x110>)
 8001402:	799b      	ldrb	r3, [r3, #6]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4413      	add	r3, r2
 800140a:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 800140c:	2106      	movs	r1, #6
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <tempMonitor+0x110>)
 8001410:	f000 fee2 	bl	80021d8 <CRC16_2>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4293      	cmp	r3, r2
 800141c:	d143      	bne.n	80014a6 <tempMonitor+0xfe>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <tempMonitor+0x110>)
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b29b      	uxth	r3, r3
 8001426:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <tempMonitor+0x110>)
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	b29b      	uxth	r3, r3
 8001432:	4413      	add	r3, r2
 8001434:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001440:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001444:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001448:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <tempMonitor+0x114>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <tempMonitor+0x110>)
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	09db      	lsrs	r3, r3, #7
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d105      	bne.n	800146a <tempMonitor+0xc2>
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <tempMonitor+0x114>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	eef1 7a67 	vneg.f32	s15, s15
 8001468:	e002      	b.n	8001470 <tempMonitor+0xc8>
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <tempMonitor+0x114>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <tempMonitor+0x114>)
 8001472:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <tempMonitor+0x110>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	b29b      	uxth	r3, r3
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <tempMonitor+0x110>)
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001494:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <tempMonitor+0x118>)
 80014a2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003f4 	.word	0x200003f4
 80014b4:	200003a8 	.word	0x200003a8
 80014b8:	200003f8 	.word	0x200003f8
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000008 	.word	0x20000008

080014c4 <averageScreen>:

void averageScreen(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t size = 3;
 80014ca:	2303      	movs	r3, #3
 80014cc:	70bb      	strb	r3, [r7, #2]
	uint8_t offset = 30;
 80014ce:	231e      	movs	r3, #30
 80014d0:	707b      	strb	r3, [r7, #1]
	uint8_t n = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]

	uint16_t averageLightPercent = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	81bb      	strh	r3, [r7, #12]
	float averageTemp = 0.0;
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
	float averageHumid = 0.0;
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]

	if(numberOfRecord <= 19){
 80014e6:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <averageScreen+0x204>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b13      	cmp	r3, #19
 80014ec:	d803      	bhi.n	80014f6 <averageScreen+0x32>
		n = numberOfRecord;
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <averageScreen+0x204>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e001      	b.n	80014fa <averageScreen+0x36>
	}else{
		n = 20;
 80014f6:	2314      	movs	r3, #20
 80014f8:	73fb      	strb	r3, [r7, #15]
	}

	for(uint8_t i=0; i<n; i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	70fb      	strb	r3, [r7, #3]
 80014fe:	e056      	b.n	80015ae <averageScreen+0xea>
		averageLightPercent += lightPercentBuffer[i];
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4a72      	ldr	r2, [pc, #456]	; (80016cc <averageScreen+0x208>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	b29a      	uxth	r2, r3
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	81bb      	strh	r3, [r7, #12]
		averageTemp += tempBuffer[i];
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <averageScreen+0x20c>)
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ed97 7a02 	vldr	s14, [r7, #8]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	edc7 7a02 	vstr	s15, [r7, #8]
		averageHumid += humidBuffer[i];
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <averageScreen+0x210>)
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a01 	vldr	s14, [r7, #4]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	edc7 7a01 	vstr	s15, [r7, #4]

		sprintf(str, "%d %f %f / %d %f %f\n\r",lightPercentBuffer[i], tempBuffer[i], humidBuffer[i],averageLightPercent ,averageTemp, averageHumid);
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	4a62      	ldr	r2, [pc, #392]	; (80016cc <averageScreen+0x208>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4619      	mov	r1, r3
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <averageScreen+0x20c>)
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <averageScreen+0x210>)
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 6a00 	vldr	s13, [r3]
 8001562:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	edd7 5a02 	vldr	s11, [r7, #8]
 800156c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001570:	edd7 4a01 	vldr	s9, [r7, #4]
 8001574:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001578:	ed8d 4b08 	vstr	d4, [sp, #32]
 800157c:	ed8d 5b06 	vstr	d5, [sp, #24]
 8001580:	9304      	str	r3, [sp, #16]
 8001582:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001586:	ed8d 7b00 	vstr	d7, [sp]
 800158a:	460a      	mov	r2, r1
 800158c:	4952      	ldr	r1, [pc, #328]	; (80016d8 <averageScreen+0x214>)
 800158e:	4853      	ldr	r0, [pc, #332]	; (80016dc <averageScreen+0x218>)
 8001590:	f007 ff6c 	bl	800946c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8001594:	4851      	ldr	r0, [pc, #324]	; (80016dc <averageScreen+0x218>)
 8001596:	f7fe fe53 	bl	8000240 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	23c8      	movs	r3, #200	; 0xc8
 80015a0:	494e      	ldr	r1, [pc, #312]	; (80016dc <averageScreen+0x218>)
 80015a2:	484f      	ldr	r0, [pc, #316]	; (80016e0 <averageScreen+0x21c>)
 80015a4:	f006 fe90 	bl	80082c8 <HAL_UART_Transmit>
	for(uint8_t i=0; i<n; i++){
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	3301      	adds	r3, #1
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3a4      	bcc.n	8001500 <averageScreen+0x3c>
	}

	averageLightPercent /= n;
 80015b6:	89ba      	ldrh	r2, [r7, #12]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80015be:	81bb      	strh	r3, [r7, #12]
	averageTemp /= n;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	edd7 6a02 	vldr	s13, [r7, #8]
 80015ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d2:	edc7 7a02 	vstr	s15, [r7, #8]
	averageHumid /= n;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80015e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e8:	edc7 7a01 	vstr	s15, [r7, #4]

	//Average
	sprintf(Temp_Buffer_text, "Average 10 s");
 80015ec:	493d      	ldr	r1, [pc, #244]	; (80016e4 <averageScreen+0x220>)
 80015ee:	483e      	ldr	r0, [pc, #248]	; (80016e8 <averageScreen+0x224>)
 80015f0:	f007 ff3c 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,1.5,offset,size,GREENYELLOW);
 80015f4:	7879      	ldrb	r1, [r7, #1]
 80015f6:	78ba      	ldrb	r2, [r7, #2]
 80015f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80015fc:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001600:	4839      	ldr	r0, [pc, #228]	; (80016e8 <averageScreen+0x224>)
 8001602:	f7ff fe68 	bl	80012d6 <printText>

	//Light
	sprintf(Temp_Buffer_text, "Light");
 8001606:	4939      	ldr	r1, [pc, #228]	; (80016ec <averageScreen+0x228>)
 8001608:	4837      	ldr	r0, [pc, #220]	; (80016e8 <averageScreen+0x224>)
 800160a:	f007 ff2f 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,3,offset,size,ORANGE);
 800160e:	7879      	ldrb	r1, [r7, #1]
 8001610:	78ba      	ldrb	r2, [r7, #2]
 8001612:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001616:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800161a:	4833      	ldr	r0, [pc, #204]	; (80016e8 <averageScreen+0x224>)
 800161c:	f7ff fe5b 	bl	80012d6 <printText>
	//Temperature
	sprintf(Temp_Buffer_text, "Temp");
 8001620:	4933      	ldr	r1, [pc, #204]	; (80016f0 <averageScreen+0x22c>)
 8001622:	4831      	ldr	r0, [pc, #196]	; (80016e8 <averageScreen+0x224>)
 8001624:	f007 ff22 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,4,offset,size,PINK);
 8001628:	7879      	ldrb	r1, [r7, #1]
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001630:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001634:	482c      	ldr	r0, [pc, #176]	; (80016e8 <averageScreen+0x224>)
 8001636:	f7ff fe4e 	bl	80012d6 <printText>
	//Humidity
	sprintf(Temp_Buffer_text, "Humid");
 800163a:	492e      	ldr	r1, [pc, #184]	; (80016f4 <averageScreen+0x230>)
 800163c:	482a      	ldr	r0, [pc, #168]	; (80016e8 <averageScreen+0x224>)
 800163e:	f007 ff15 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,5,offset,size,MAROON);
 8001642:	7879      	ldrb	r1, [r7, #1]
 8001644:	78ba      	ldrb	r2, [r7, #2]
 8001646:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800164a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <averageScreen+0x224>)
 8001650:	f7ff fe41 	bl	80012d6 <printText>

	//Update Light
	sprintf(Temp_Buffer_text, "%02d %%", averageLightPercent);
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	461a      	mov	r2, r3
 8001658:	4927      	ldr	r1, [pc, #156]	; (80016f8 <averageScreen+0x234>)
 800165a:	4823      	ldr	r0, [pc, #140]	; (80016e8 <averageScreen+0x224>)
 800165c:	f007 ff06 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,3,offset,size,WHITE);
 8001660:	7879      	ldrb	r1, [r7, #1]
 8001662:	78ba      	ldrb	r2, [r7, #2]
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <averageScreen+0x224>)
 800166e:	f7ff fe66 	bl	800133e <printValue>
	//Update Temperature
	sprintf(Temp_Buffer_text, "%0.1f C", averageTemp);
 8001672:	edd7 7a02 	vldr	s15, [r7, #8]
 8001676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167a:	ec53 2b17 	vmov	r2, r3, d7
 800167e:	491f      	ldr	r1, [pc, #124]	; (80016fc <averageScreen+0x238>)
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <averageScreen+0x224>)
 8001682:	f007 fef3 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,4,offset,size,WHITE);
 8001686:	7879      	ldrb	r1, [r7, #1]
 8001688:	78ba      	ldrb	r2, [r7, #2]
 800168a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <averageScreen+0x224>)
 8001694:	f7ff fe53 	bl	800133e <printValue>
	//Update Humidity
	sprintf(Temp_Buffer_text, "%0.1f %%", averageHumid);
 8001698:	edd7 7a01 	vldr	s15, [r7, #4]
 800169c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a0:	ec53 2b17 	vmov	r2, r3, d7
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <averageScreen+0x23c>)
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <averageScreen+0x224>)
 80016a8:	f007 fee0 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,5,offset,size,WHITE);
 80016ac:	7879      	ldrb	r1, [r7, #1]
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <averageScreen+0x224>)
 80016ba:	f7ff fe40 	bl	800133e <printValue>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000210 	.word	0x20000210
 80016cc:	20000274 	.word	0x20000274
 80016d0:	20000288 	.word	0x20000288
 80016d4:	200002d8 	.word	0x200002d8
 80016d8:	0800b808 	.word	0x0800b808
 80016dc:	20000400 	.word	0x20000400
 80016e0:	200005b4 	.word	0x200005b4
 80016e4:	0800b820 	.word	0x0800b820
 80016e8:	20000434 	.word	0x20000434
 80016ec:	0800b830 	.word	0x0800b830
 80016f0:	0800b838 	.word	0x0800b838
 80016f4:	0800b840 	.word	0x0800b840
 80016f8:	0800b848 	.word	0x0800b848
 80016fc:	0800b850 	.word	0x0800b850
 8001700:	0800b858 	.word	0x0800b858

08001704 <updatePreviousValue>:
void updatePreviousValue(){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
	uint8_t size = 3;
 800170a:	2303      	movs	r3, #3
 800170c:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = 30;
 800170e:	231e      	movs	r3, #30
 8001710:	73bb      	strb	r3, [r7, #14]
	uint64_t showNum = numberOfRecord + previousNum;
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <updatePreviousValue+0x11c>)
 8001714:	f993 3000 	ldrsb.w	r3, [r3]
 8001718:	461a      	mov	r2, r3
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <updatePreviousValue+0x120>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9c7 2300 	strd	r2, r3, [r7]
	//Update Record
	sprintf(Temp_Buffer_text, "%05d", numberOfRecordBuffer[showNum % 20]);  // fix here
 800172a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172e:	f04f 0214 	mov.w	r2, #20
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f7fe fddb 	bl	80002f0 <__aeabi_uldivmod>
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <updatePreviousValue+0x124>)
 8001740:	4602      	mov	r2, r0
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	461a      	mov	r2, r3
 8001748:	4938      	ldr	r1, [pc, #224]	; (800182c <updatePreviousValue+0x128>)
 800174a:	4839      	ldr	r0, [pc, #228]	; (8001830 <updatePreviousValue+0x12c>)
 800174c:	f007 fe8e 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,1.5,offset,size,WHITE);
 8001750:	7bb9      	ldrb	r1, [r7, #14]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001758:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800175c:	4834      	ldr	r0, [pc, #208]	; (8001830 <updatePreviousValue+0x12c>)
 800175e:	f7ff fdee 	bl	800133e <printValue>
	//Update Light
	sprintf(Temp_Buffer_text, "%02d %%", lightPercentBuffer[showNum % 20]);
 8001762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001766:	f04f 0214 	mov.w	r2, #20
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f7fe fdbf 	bl	80002f0 <__aeabi_uldivmod>
 8001772:	4930      	ldr	r1, [pc, #192]	; (8001834 <updatePreviousValue+0x130>)
 8001774:	188b      	adds	r3, r1, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	492f      	ldr	r1, [pc, #188]	; (8001838 <updatePreviousValue+0x134>)
 800177c:	482c      	ldr	r0, [pc, #176]	; (8001830 <updatePreviousValue+0x12c>)
 800177e:	f007 fe75 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,3,offset,size,WHITE);
 8001782:	7bb9      	ldrb	r1, [r7, #14]
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <updatePreviousValue+0x12c>)
 8001790:	f7ff fdd5 	bl	800133e <printValue>
	//Update Temperature
	sprintf(Temp_Buffer_text, "%0.1f C", tempBuffer[showNum % 20]);
 8001794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001798:	f04f 0214 	mov.w	r2, #20
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	f7fe fda6 	bl	80002f0 <__aeabi_uldivmod>
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	4a24      	ldr	r2, [pc, #144]	; (800183c <updatePreviousValue+0x138>)
 80017aa:	4603      	mov	r3, r0
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	ec53 2b17 	vmov	r2, r3, d7
 80017bc:	4920      	ldr	r1, [pc, #128]	; (8001840 <updatePreviousValue+0x13c>)
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <updatePreviousValue+0x12c>)
 80017c0:	f007 fe54 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,4,offset,size,WHITE);
 80017c4:	7bb9      	ldrb	r1, [r7, #14]
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017cc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <updatePreviousValue+0x12c>)
 80017d2:	f7ff fdb4 	bl	800133e <printValue>
	//Update Humidity
	sprintf(Temp_Buffer_text, "%0.1f %%", humidBuffer[showNum % 20]);
 80017d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017da:	f04f 0214 	mov.w	r2, #20
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f7fe fd85 	bl	80002f0 <__aeabi_uldivmod>
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <updatePreviousValue+0x140>)
 80017ec:	4603      	mov	r3, r0
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fa:	ec53 2b17 	vmov	r2, r3, d7
 80017fe:	4912      	ldr	r1, [pc, #72]	; (8001848 <updatePreviousValue+0x144>)
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <updatePreviousValue+0x12c>)
 8001802:	f007 fe33 	bl	800946c <siprintf>
	printValue(Temp_Buffer_text,5,offset,size,WHITE);
 8001806:	7bb9      	ldrb	r1, [r7, #14]
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <updatePreviousValue+0x12c>)
 8001814:	f7ff fd93 	bl	800133e <printValue>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000210 	.word	0x20000210
 8001828:	20000224 	.word	0x20000224
 800182c:	0800b864 	.word	0x0800b864
 8001830:	20000434 	.word	0x20000434
 8001834:	20000274 	.word	0x20000274
 8001838:	0800b848 	.word	0x0800b848
 800183c:	20000288 	.word	0x20000288
 8001840:	0800b850 	.word	0x0800b850
 8001844:	200002d8 	.word	0x200002d8
 8001848:	0800b858 	.word	0x0800b858

0800184c <initialValue>:

void initialValue(){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint8_t size = 3;
 8001852:	2303      	movs	r3, #3
 8001854:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 30;
 8001856:	231e      	movs	r3, #30
 8001858:	71bb      	strb	r3, [r7, #6]

	prevNumberOfRecord = 0;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <initialValue+0x9c>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
	prevLightPercent = 0;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <initialValue+0xa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	prevTemp = 0.0;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <initialValue+0xa4>)
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	prevHumid = 0.0;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <initialValue+0xa8>)
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

	//Record
	sprintf(Temp_Buffer_text, "Record");
 8001876:	4920      	ldr	r1, [pc, #128]	; (80018f8 <initialValue+0xac>)
 8001878:	4820      	ldr	r0, [pc, #128]	; (80018fc <initialValue+0xb0>)
 800187a:	f007 fdf7 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,1.5,offset,size,GREENYELLOW);
 800187e:	79b9      	ldrb	r1, [r7, #6]
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001886:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800188a:	481c      	ldr	r0, [pc, #112]	; (80018fc <initialValue+0xb0>)
 800188c:	f7ff fd23 	bl	80012d6 <printText>
	//Light
	sprintf(Temp_Buffer_text, "Light");
 8001890:	491b      	ldr	r1, [pc, #108]	; (8001900 <initialValue+0xb4>)
 8001892:	481a      	ldr	r0, [pc, #104]	; (80018fc <initialValue+0xb0>)
 8001894:	f007 fdea 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,3,offset,size,ORANGE);
 8001898:	79b9      	ldrb	r1, [r7, #6]
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80018a0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <initialValue+0xb0>)
 80018a6:	f7ff fd16 	bl	80012d6 <printText>
	//Temperature
	sprintf(Temp_Buffer_text, "Temp");
 80018aa:	4916      	ldr	r1, [pc, #88]	; (8001904 <initialValue+0xb8>)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <initialValue+0xb0>)
 80018ae:	f007 fddd 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,4,offset,size,PINK);
 80018b2:	79b9      	ldrb	r1, [r7, #6]
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80018ba:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <initialValue+0xb0>)
 80018c0:	f7ff fd09 	bl	80012d6 <printText>
	//Humidity
	sprintf(Temp_Buffer_text, "Humid");
 80018c4:	4910      	ldr	r1, [pc, #64]	; (8001908 <initialValue+0xbc>)
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <initialValue+0xb0>)
 80018c8:	f007 fdd0 	bl	800946c <siprintf>
	printText(Temp_Buffer_text,5,offset,size,MAROON);
 80018cc:	79b9      	ldrb	r1, [r7, #6]
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80018d4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80018d8:	4808      	ldr	r0, [pc, #32]	; (80018fc <initialValue+0xb0>)
 80018da:	f7ff fcfc 	bl	80012d6 <printText>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000214 	.word	0x20000214
 80018ec:	20000218 	.word	0x20000218
 80018f0:	2000021c 	.word	0x2000021c
 80018f4:	20000220 	.word	0x20000220
 80018f8:	0800b86c 	.word	0x0800b86c
 80018fc:	20000434 	.word	0x20000434
 8001900:	0800b830 	.word	0x0800b830
 8001904:	0800b838 	.word	0x0800b838
 8001908:	0800b840 	.word	0x0800b840

0800190c <updateValue>:

void updateValue(){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	uint8_t size = 3;
 8001912:	2303      	movs	r3, #3
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 30;
 8001916:	231e      	movs	r3, #30
 8001918:	71bb      	strb	r3, [r7, #6]

	//Read before Show // fix need to show from buffer or assign buffer to lastest value
	readAllData();
 800191a:	f7ff fbb7 	bl	800108c <readAllData>

	//Update Record
	if(prevNumberOfRecord != numberOfRecord){
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <updateValue+0x198>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <updateValue+0x19c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d014      	beq.n	8001954 <updateValue+0x48>
		sprintf(Temp_Buffer_text, "%05d", numberOfRecord+1);
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <updateValue+0x19c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	461a      	mov	r2, r3
 8001932:	495e      	ldr	r1, [pc, #376]	; (8001aac <updateValue+0x1a0>)
 8001934:	485e      	ldr	r0, [pc, #376]	; (8001ab0 <updateValue+0x1a4>)
 8001936:	f007 fd99 	bl	800946c <siprintf>
		printValue(Temp_Buffer_text,1.5,offset,size,WHITE);
 800193a:	79b9      	ldrb	r1, [r7, #6]
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001942:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001946:	485a      	ldr	r0, [pc, #360]	; (8001ab0 <updateValue+0x1a4>)
 8001948:	f7ff fcf9 	bl	800133e <printValue>
		prevNumberOfRecord = numberOfRecord;
 800194c:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <updateValue+0x19c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <updateValue+0x198>)
 8001952:	6013      	str	r3, [r2, #0]
	}
	//Update Light
	if(prevLightPercent != lightPercent){
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <updateValue+0x1a8>)
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <updateValue+0x1ac>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d013      	beq.n	8001988 <updateValue+0x7c>
		sprintf(Temp_Buffer_text, "%02d %%", lightPercent);
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <updateValue+0x1ac>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4955      	ldr	r1, [pc, #340]	; (8001abc <updateValue+0x1b0>)
 8001968:	4851      	ldr	r0, [pc, #324]	; (8001ab0 <updateValue+0x1a4>)
 800196a:	f007 fd7f 	bl	800946c <siprintf>
		printValue(Temp_Buffer_text,3,offset,size,WHITE);
 800196e:	79b9      	ldrb	r1, [r7, #6]
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001976:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800197a:	484d      	ldr	r0, [pc, #308]	; (8001ab0 <updateValue+0x1a4>)
 800197c:	f7ff fcdf 	bl	800133e <printValue>
		prevLightPercent = lightPercent;
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <updateValue+0x1ac>)
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <updateValue+0x1a8>)
 8001986:	701a      	strb	r2, [r3, #0]
	}
	//Update Temperature
	if(prevTemp != temp){
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <updateValue+0x1b4>)
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <updateValue+0x1b8>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eeb4 7a67 	vcmp.f32	s14, s15
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d017      	beq.n	80019ce <updateValue+0xc2>
		sprintf(Temp_Buffer_text, "%0.1f C", temp);
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <updateValue+0x1b8>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a8:	ec53 2b17 	vmov	r2, r3, d7
 80019ac:	4946      	ldr	r1, [pc, #280]	; (8001ac8 <updateValue+0x1bc>)
 80019ae:	4840      	ldr	r0, [pc, #256]	; (8001ab0 <updateValue+0x1a4>)
 80019b0:	f007 fd5c 	bl	800946c <siprintf>
		printValue(Temp_Buffer_text,4,offset,size,WHITE);
 80019b4:	79b9      	ldrb	r1, [r7, #6]
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019bc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80019c0:	483b      	ldr	r0, [pc, #236]	; (8001ab0 <updateValue+0x1a4>)
 80019c2:	f7ff fcbc 	bl	800133e <printValue>
		prevTemp = temp;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <updateValue+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <updateValue+0x1b4>)
 80019cc:	6013      	str	r3, [r2, #0]
	}
	//Update Humidity
	if(prevHumid != humid){
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <updateValue+0x1c0>)
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <updateValue+0x1c4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eeb4 7a67 	vcmp.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d017      	beq.n	8001a14 <updateValue+0x108>
		sprintf(Temp_Buffer_text, "%0.1f %%", humid);
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <updateValue+0x1c4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ee:	ec53 2b17 	vmov	r2, r3, d7
 80019f2:	4938      	ldr	r1, [pc, #224]	; (8001ad4 <updateValue+0x1c8>)
 80019f4:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <updateValue+0x1a4>)
 80019f6:	f007 fd39 	bl	800946c <siprintf>
		printValue(Temp_Buffer_text,5,offset,size,WHITE);
 80019fa:	79b9      	ldrb	r1, [r7, #6]
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a02:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001a06:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <updateValue+0x1a4>)
 8001a08:	f7ff fc99 	bl	800133e <printValue>
		prevHumid = humid;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <updateValue+0x1c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	; (8001acc <updateValue+0x1c0>)
 8001a12:	6013      	str	r3, [r2, #0]
	}

	//Buffer
	numberOfRecordBuffer[numberOfRecord % 20] = numberOfRecord+1;
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <updateValue+0x19c>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <updateValue+0x19c>)
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <updateValue+0x1cc>)
 8001a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a22:	091a      	lsrs	r2, r3, #4
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	1aca      	subs	r2, r1, r3
 8001a2e:	1c43      	adds	r3, r0, #1
 8001a30:	492a      	ldr	r1, [pc, #168]	; (8001adc <updateValue+0x1d0>)
 8001a32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	lightPercentBuffer[numberOfRecord % 20] = lightPercent;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <updateValue+0x19c>)
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <updateValue+0x1cc>)
 8001a3c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a40:	091a      	lsrs	r2, r3, #4
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	1aca      	subs	r2, r1, r3
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <updateValue+0x1ac>)
 8001a4e:	7819      	ldrb	r1, [r3, #0]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <updateValue+0x1d4>)
 8001a52:	5499      	strb	r1, [r3, r2]
	tempBuffer[numberOfRecord % 20] = temp;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <updateValue+0x19c>)
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <updateValue+0x1cc>)
 8001a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a5e:	091a      	lsrs	r2, r3, #4
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	1aca      	subs	r2, r1, r3
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <updateValue+0x1b8>)
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <updateValue+0x1d8>)
 8001a70:	0093      	lsls	r3, r2, #2
 8001a72:	4403      	add	r3, r0
 8001a74:	6019      	str	r1, [r3, #0]
	humidBuffer[numberOfRecord % 20] = humid;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <updateValue+0x19c>)
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <updateValue+0x1cc>)
 8001a7c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a80:	091a      	lsrs	r2, r3, #4
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	1aca      	subs	r2, r1, r3
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <updateValue+0x1c4>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <updateValue+0x1dc>)
 8001a92:	0093      	lsls	r3, r2, #2
 8001a94:	4403      	add	r3, r0
 8001a96:	6019      	str	r1, [r3, #0]

	//Write After Update
	saveAllData();
 8001a98:	f7ff fa1c 	bl	8000ed4 <saveAllData>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000214 	.word	0x20000214
 8001aa8:	20000210 	.word	0x20000210
 8001aac:	0800b864 	.word	0x0800b864
 8001ab0:	20000434 	.word	0x20000434
 8001ab4:	20000218 	.word	0x20000218
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	0800b848 	.word	0x0800b848
 8001ac0:	2000021c 	.word	0x2000021c
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	0800b850 	.word	0x0800b850
 8001acc:	20000220 	.word	0x20000220
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	0800b858 	.word	0x0800b858
 8001ad8:	cccccccd 	.word	0xcccccccd
 8001adc:	20000224 	.word	0x20000224
 8001ae0:	20000274 	.word	0x20000274
 8001ae4:	20000288 	.word	0x20000288
 8001ae8:	200002d8 	.word	0x200002d8
 8001aec:	00000000 	.word	0x00000000

08001af0 <resisterMonitor>:

void resisterMonitor(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

	  float dutyCycleScreen = 0.0;
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 8001afc:	bf00      	nop
 8001afe:	2164      	movs	r1, #100	; 0x64
 8001b00:	4829      	ldr	r0, [pc, #164]	; (8001ba8 <resisterMonitor+0xb8>)
 8001b02:	f001 ff65 	bl	80039d0 <HAL_ADC_PollForConversion>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f8      	bne.n	8001afe <resisterMonitor+0xe>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8001b0c:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <resisterMonitor+0xb8>)
 8001b0e:	f001 ffea 	bl	8003ae6 <HAL_ADC_GetValue>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a25      	ldr	r2, [pc, #148]	; (8001bac <resisterMonitor+0xbc>)
 8001b16:	6013      	str	r3, [r2, #0]
	  lightPercent = adc_val*100 / 4095;
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <resisterMonitor+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2264      	movs	r2, #100	; 0x64
 8001b1e:	fb02 f203 	mul.w	r2, r2, r3
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <resisterMonitor+0xc0>)
 8001b24:	fba3 1302 	umull	r1, r3, r3, r2
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	0852      	lsrs	r2, r2, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <resisterMonitor+0xc4>)
 8001b34:	701a      	strb	r2, [r3, #0]

	  //Change Screen Light Output
	  //PWM
	  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <resisterMonitor+0xbc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b42:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001b90 <resisterMonitor+0xa0>
 8001b46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b4a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001b98 <resisterMonitor+0xa8>
 8001b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b52:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001ba0 <resisterMonitor+0xb0>
 8001b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b5e:	edc7 7a01 	vstr	s15, [r7, #4]
	  //No. 2
	  htim3.Instance -> CCR1 = (1000-1) * dutyCycleScreen;
 8001b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bb8 <resisterMonitor+0xc8>
 8001b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <resisterMonitor+0xcc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b76:	ee17 2a90 	vmov	r2, s15
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480f      	ldr	r0, [pc, #60]	; (8001bbc <resisterMonitor+0xcc>)
 8001b80:	f005 fac8 	bl	8007114 <HAL_TIM_PWM_Start>


//	  sprintf(str, "%d %d\n\r", lightPercent, adc_val);
//	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	f3af 8000 	nop.w
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40affe00 	.word	0x40affe00
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fe99999 	.word	0x3fe99999
 8001ba0:	9999999a 	.word	0x9999999a
 8001ba4:	3fc99999 	.word	0x3fc99999
 8001ba8:	20000360 	.word	0x20000360
 8001bac:	20000328 	.word	0x20000328
 8001bb0:	00100101 	.word	0x00100101
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	4479c000 	.word	0x4479c000
 8001bbc:	200004d0 	.word	0x200004d0

08001bc0 <readButton>:

void readButton(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	if(pressButton1 == 1){
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <readButton+0xd0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d019      	beq.n	8001c00 <readButton+0x40>

		if(mode == 0){
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <readButton+0xd4>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <readButton+0x1c>
			mode = 1;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <readButton+0xd4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e002      	b.n	8001be2 <readButton+0x22>
		}else{
			mode = 0;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <readButton+0xd4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
		}
		initialState = false;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <readButton+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
		previousNum = 1; //avg page
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <readButton+0xdc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
		prevPreviousNum = 0;
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <readButton+0xe0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200); // Debounce button
 8001bf4:	20c8      	movs	r0, #200	; 0xc8
 8001bf6:	f001 fdb5 	bl	8003764 <HAL_Delay>
		pressButton1 = 0;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <readButton+0xd0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
	}

	if(pressButton2 == 1){
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <readButton+0xe4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01d      	beq.n	8001c44 <readButton+0x84>
		if(previousNum > -19 && numberOfRecord+previousNum > 0){
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <readButton+0xdc>)
 8001c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0e:	f113 0f12 	cmn.w	r3, #18
 8001c12:	db11      	blt.n	8001c38 <readButton+0x78>
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <readButton+0xdc>)
 8001c16:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <readButton+0xe8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <readButton+0x78>
			previousNum--;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <readButton+0xdc>)
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <readButton+0xdc>)
 8001c36:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(200); // Debounce button
 8001c38:	20c8      	movs	r0, #200	; 0xc8
 8001c3a:	f001 fd93 	bl	8003764 <HAL_Delay>
		pressButton2 = 0;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <readButton+0xe4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
	}

	if(pressButton3 == 1){
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <readButton+0xec>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <readButton+0xb4>
		if(previousNum < 0+1){
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <readButton+0xdc>)
 8001c4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	dc08      	bgt.n	8001c68 <readButton+0xa8>
			previousNum++;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <readButton+0xdc>)
 8001c58:	f993 3000 	ldrsb.w	r3, [r3]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	b25a      	sxtb	r2, r3
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <readButton+0xdc>)
 8001c66:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(200); // Debounce button
 8001c68:	20c8      	movs	r0, #200	; 0xc8
 8001c6a:	f001 fd7b 	bl	8003764 <HAL_Delay>
		pressButton3 = 0;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <readButton+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
	}

	if(pressButton4 == 1){
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <readButton+0xf0>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <readButton+0xcc>
		eraseAllData();
 8001c7c:	f7ff f912 	bl	8000ea4 <eraseAllData>
		HAL_Delay(200); // Debounce button
 8001c80:	20c8      	movs	r0, #200	; 0xc8
 8001c82:	f001 fd6f 	bl	8003764 <HAL_Delay>
		pressButton4 = 0;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <readButton+0xf0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
	}

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000032c 	.word	0x2000032c
 8001c94:	20000330 	.word	0x20000330
 8001c98:	2000020c 	.word	0x2000020c
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000331 	.word	0x20000331
 8001ca4:	2000032d 	.word	0x2000032d
 8001ca8:	20000210 	.word	0x20000210
 8001cac:	2000032e 	.word	0x2000032e
 8001cb0:	2000032f 	.word	0x2000032f

08001cb4 <calculationTimer>:

void calculationTimer(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	millisecondHAL = HAL_GetTick();
 8001cb8:	f001 fd48 	bl	800374c <HAL_GetTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	4902      	ldr	r1, [pc, #8]	; (8001cd0 <calculationTimer+0x1c>)
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000338 	.word	0x20000338

08001cd4 <colorCalculation>:

void colorCalculation(){
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
//	float temp = 22;
//	temp += lightPercent*0.1;
	if(temp >= 31.0){
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <colorCalculation+0x114>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	db04      	blt.n	8001cf6 <colorCalculation+0x22>
		colorScreen = ORANGE;
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <colorCalculation+0x118>)
 8001cee:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001cf2:	601a      	str	r2, [r3, #0]
	}else if(temp >= 23.0 && temp < 25.0){
		colorScreen = CYAN;
	}else if(temp < 23.0){
		colorScreen = BLUE;
	}
}
 8001cf4:	e072      	b.n	8001ddc <colorCalculation+0x108>
	}else if(temp >= 29.0 && temp < 31.0){
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <colorCalculation+0x114>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	db0e      	blt.n	8001d28 <colorCalculation+0x54>
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <colorCalculation+0x114>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d504      	bpl.n	8001d28 <colorCalculation+0x54>
		colorScreen = YELLOW;
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <colorCalculation+0x118>)
 8001d20:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e059      	b.n	8001ddc <colorCalculation+0x108>
	}else if(temp >= 27.0 && temp < 29.0){
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <colorCalculation+0x114>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	db0e      	blt.n	8001d5a <colorCalculation+0x86>
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <colorCalculation+0x114>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d504      	bpl.n	8001d5a <colorCalculation+0x86>
		colorScreen = GREENYELLOW;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <colorCalculation+0x118>)
 8001d52:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e040      	b.n	8001ddc <colorCalculation+0x108>
	}else if(temp >= 25.0 && temp < 27.0){
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <colorCalculation+0x114>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	db0e      	blt.n	8001d8c <colorCalculation+0xb8>
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <colorCalculation+0x114>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8001d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d504      	bpl.n	8001d8c <colorCalculation+0xb8>
		colorScreen = GREEN;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <colorCalculation+0x118>)
 8001d84:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e027      	b.n	8001ddc <colorCalculation+0x108>
	}else if(temp >= 23.0 && temp < 25.0){
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <colorCalculation+0x114>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	db0e      	blt.n	8001dbe <colorCalculation+0xea>
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <colorCalculation+0x114>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d504      	bpl.n	8001dbe <colorCalculation+0xea>
		colorScreen = CYAN;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <colorCalculation+0x118>)
 8001db6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e00e      	b.n	8001ddc <colorCalculation+0x108>
	}else if(temp < 23.0){
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <colorCalculation+0x114>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d400      	bmi.n	8001dd4 <colorCalculation+0x100>
}
 8001dd2:	e003      	b.n	8001ddc <colorCalculation+0x108>
		colorScreen = BLUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <colorCalculation+0x118>)
 8001dd6:	221f      	movs	r2, #31
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	e7ff      	b.n	8001ddc <colorCalculation+0x108>
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000348 	.word	0x20000348

08001df0 <assignmentOne>:

void assignmentOne(){
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	af00      	add	r7, sp, #0

	readButton();
 8001df4:	f7ff fee4 	bl	8001bc0 <readButton>
	calculationTimer();
 8001df8:	f7ff ff5c 	bl	8001cb4 <calculationTimer>
	colorCalculation();
 8001dfc:	f7ff ff6a 	bl	8001cd4 <colorCalculation>

	if(mode == 0){ //Normal Mode
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <assignmentOne+0x134>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d149      	bne.n	8001e9c <assignmentOne+0xac>
		if(prevColorScreen != colorScreen){
 8001e08:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <assignmentOne+0x138>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <assignmentOne+0x13c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d006      	beq.n	8001e22 <assignmentOne+0x32>
			initialState = false;
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <assignmentOne+0x140>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
			prevColorScreen = colorScreen;
 8001e1a:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <assignmentOne+0x13c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a42      	ldr	r2, [pc, #264]	; (8001f28 <assignmentOne+0x138>)
 8001e20:	6013      	str	r3, [r2, #0]
		}
		//Print Text Only First time
		if(initialState == false){
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <assignmentOne+0x140>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <assignmentOne+0x56>
			setHorizontalScreen(colorScreen);
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <assignmentOne+0x13c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fa34 	bl	80012a4 <setHorizontalScreen>
			initialValue();
 8001e3c:	f7ff fd06 	bl	800184c <initialValue>
			initialState = true;
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <assignmentOne+0x140>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
		}

		//Read Sensor
		tempMonitor();
 8001e46:	f7ff faaf 	bl	80013a8 <tempMonitor>
		//Read Variable Resister
		resisterMonitor();
 8001e4a:	f7ff fe51 	bl	8001af0 <resisterMonitor>

		if(millisecondHAL - prevMillisecondHAL >= 500){
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <assignmentOne+0x144>)
 8001e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <assignmentOne+0x148>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	1a84      	subs	r4, r0, r2
 8001e5c:	eb61 0503 	sbc.w	r5, r1, r3
 8001e60:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	bf08      	it	eq
 8001e6c:	42a2      	cmpeq	r2, r4
 8001e6e:	d257      	bcs.n	8001f20 <assignmentOne+0x130>

			//Increment
			numberOfRecord++;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <assignmentOne+0x14c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <assignmentOne+0x14c>)
 8001e78:	6013      	str	r3, [r2, #0]

			//Reset
			if(numberOfRecord > 99999){
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <assignmentOne+0x14c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <assignmentOne+0x150>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d902      	bls.n	8001e8a <assignmentOne+0x9a>
				numberOfRecord = 0;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <assignmentOne+0x14c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
			}

			//Print Value of Sensors
			updateValue();
 8001e8a:	f7ff fd3f 	bl	800190c <updateValue>

			prevMillisecondHAL = millisecondHAL;
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <assignmentOne+0x144>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	4928      	ldr	r1, [pc, #160]	; (8001f38 <assignmentOne+0x148>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
			prevPreviousNum = previousNum;
		}

	}

}
 8001e9a:	e041      	b.n	8001f20 <assignmentOne+0x130>
	}else if(mode == 1){ // Show Average
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <assignmentOne+0x134>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d13d      	bne.n	8001f20 <assignmentOne+0x130>
		if(initialState == false){
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <assignmentOne+0x140>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <assignmentOne+0xd4>
			setHorizontalScreen(RED);
 8001eb2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001eb6:	f7ff f9f5 	bl	80012a4 <setHorizontalScreen>
			initialValue();
 8001eba:	f7ff fcc7 	bl	800184c <initialValue>
			initialState = true;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <assignmentOne+0x140>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
		if(prevPreviousNum != previousNum){
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <assignmentOne+0x154>)
 8001ec6:	f993 2000 	ldrsb.w	r2, [r3]
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <assignmentOne+0x158>)
 8001ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d025      	beq.n	8001f20 <assignmentOne+0x130>
			if(previousNum > 0){
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <assignmentOne+0x158>)
 8001ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dd06      	ble.n	8001eec <assignmentOne+0xfc>
				setHorizontalScreen(RED); //set new screen
 8001ede:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ee2:	f7ff f9df 	bl	80012a4 <setHorizontalScreen>
				averageScreen();
 8001ee6:	f7ff faed 	bl	80014c4 <averageScreen>
 8001eea:	e014      	b.n	8001f16 <assignmentOne+0x126>
			}else if(previousNum == 0){
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <assignmentOne+0x158>)
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <assignmentOne+0x118>
				setHorizontalScreen(RED); //set new screen
 8001ef6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001efa:	f7ff f9d3 	bl	80012a4 <setHorizontalScreen>
				initialValue();
 8001efe:	f7ff fca5 	bl	800184c <initialValue>
				updatePreviousValue();
 8001f02:	f7ff fbff 	bl	8001704 <updatePreviousValue>
 8001f06:	e006      	b.n	8001f16 <assignmentOne+0x126>
			}else if(previousNum < 0){
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <assignmentOne+0x158>)
 8001f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da01      	bge.n	8001f16 <assignmentOne+0x126>
				updatePreviousValue();
 8001f12:	f7ff fbf7 	bl	8001704 <updatePreviousValue>
			prevPreviousNum = previousNum;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <assignmentOne+0x158>)
 8001f18:	f993 2000 	ldrsb.w	r2, [r3]
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <assignmentOne+0x154>)
 8001f1e:	701a      	strb	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	bdb0      	pop	{r4, r5, r7, pc}
 8001f24:	20000330 	.word	0x20000330
 8001f28:	2000034c 	.word	0x2000034c
 8001f2c:	20000348 	.word	0x20000348
 8001f30:	2000020c 	.word	0x2000020c
 8001f34:	20000338 	.word	0x20000338
 8001f38:	20000340 	.word	0x20000340
 8001f3c:	20000210 	.word	0x20000210
 8001f40:	0001869f 	.word	0x0001869f
 8001f44:	20000331 	.word	0x20000331
 8001f48:	2000000c 	.word	0x2000000c

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001f50:	f7fe ff3e 	bl	8000dd0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001f54:	f7fe ff62 	bl	8000e1c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f58:	f001 fb98 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5c:	f000 f82e 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f60:	f7fe fd60 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001f64:	f000 fd54 	bl	8002a10 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001f68:	f000 f9aa 	bl	80022c0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001f6c:	f000 fb7a 	bl	8002664 <MX_TIM1_Init>
  MX_RNG_Init();
 8001f70:	f000 f972 	bl	8002258 <MX_RNG_Init>
  MX_I2C1_Init();
 8001f74:	f7fe fea8 	bl	8000cc8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f78:	f000 fbc8 	bl	800270c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f7c:	f000 fc14 	bl	80027a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f80:	f000 fd16 	bl	80029b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001f84:	f7fe fcbc 	bl	8000900 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Delete All Data EEPROM
  readAllData();
 8001f88:	f7ff f880 	bl	800108c <readAllData>

  //Initial driver setup to drive ili9341
  ILI9341_Init();
 8001f8c:	f001 f87a 	bl	8003084 <ILI9341_Init>

  //ADC Input variable Resister(Light)
  HAL_ADC_Start(&hadc1);
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <main+0x64>)
 8001f92:	f001 fc4f 	bl	8003834 <HAL_ADC_Start>

  //Interrupt millisecond
  HAL_TIM_Base_Start_IT(&htim1);
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <main+0x68>)
 8001f98:	f004 ffe2 	bl	8006f60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <main+0x6c>)
 8001f9e:	f004 ffdf 	bl	8006f60 <HAL_TIM_Base_Start_IT>


  //Reset Screen
  setHorizontalScreen(BLACK);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff f97e 	bl	80012a4 <setHorizontalScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  assignmentOne();
 8001fa8:	f7ff ff22 	bl	8001df0 <assignmentOne>
 8001fac:	e7fc      	b.n	8001fa8 <main+0x5c>
 8001fae:	bf00      	nop
 8001fb0:	20000360 	.word	0x20000360
 8001fb4:	2000051c 	.word	0x2000051c
 8001fb8:	20000568 	.word	0x20000568

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b8      	sub	sp, #224	; 0xe0
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fc6:	2234      	movs	r2, #52	; 0x34
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f006 fe04 	bl	8008bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	2290      	movs	r2, #144	; 0x90
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 fdf5 	bl	8008bd8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fee:	f003 fa83 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <SystemClock_Config+0x12c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a3c      	ldr	r2, [pc, #240]	; (80020e8 <SystemClock_Config+0x12c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <SystemClock_Config+0x12c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <SystemClock_Config+0x130>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a37      	ldr	r2, [pc, #220]	; (80020ec <SystemClock_Config+0x130>)
 8002010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <SystemClock_Config+0x130>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002022:	2301      	movs	r3, #1
 8002024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002028:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800202c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800203e:	2304      	movs	r3, #4
 8002040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002044:	23c8      	movs	r3, #200	; 0xc8
 8002046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800204a:	2302      	movs	r3, #2
 800204c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002050:	2309      	movs	r3, #9
 8002052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002060:	4618      	mov	r0, r3
 8002062:	f003 faa9 	bl	80055b8 <HAL_RCC_OscConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800206c:	f000 f8f0 	bl	8002250 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002070:	f003 fa52 	bl	8005518 <HAL_PWREx_EnableOverDrive>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800207a:	f000 f8e9 	bl	8002250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207e:	230f      	movs	r3, #15
 8002080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002084:	2302      	movs	r3, #2
 8002086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002090:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80020a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020a4:	2106      	movs	r1, #6
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fd34 	bl	8005b14 <HAL_RCC_ClockConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80020b2:	f000 f8cd 	bl	8002250 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <SystemClock_Config+0x134>)
 80020b8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020be:	2300      	movs	r3, #0
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 ff21 	bl	8005f18 <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80020dc:	f000 f8b8 	bl	8002250 <Error_Handler>
  }
}
 80020e0:	bf00      	nop
 80020e2:	37e0      	adds	r7, #224	; 0xe0
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000
 80020f0:	00204140 	.word	0x00204140

080020f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	//Green
	if (GPIO_Pin == GPIO_PIN_7)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d111      	bne.n	8002128 <HAL_GPIO_EXTI_Callback+0x34>
	{
		sprintf(str, "pin7 \n\r");
 8002104:	492a      	ldr	r1, [pc, #168]	; (80021b0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002106:	482b      	ldr	r0, [pc, #172]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002108:	f007 f9b0 	bl	800946c <siprintf>
		pressButton1 = 1;
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8002112:	4828      	ldr	r0, [pc, #160]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002114:	f7fe f894 	bl	8000240 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	23c8      	movs	r3, #200	; 0xc8
 800211e:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002120:	4826      	ldr	r0, [pc, #152]	; (80021bc <HAL_GPIO_EXTI_Callback+0xc8>)
 8002122:	f006 f8d1 	bl	80082c8 <HAL_UART_Transmit>
		pressButton4 = 1;
		sprintf(str, "pin13 \n\r");
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
	}

}
 8002126:	e03e      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0xb2>
	else if (GPIO_Pin == GPIO_PIN_6)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d111      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0x5e>
		pressButton2 = 1;
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
		sprintf(str, "pin6 \n\r");
 8002134:	4923      	ldr	r1, [pc, #140]	; (80021c4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002136:	481f      	ldr	r0, [pc, #124]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002138:	f007 f998 	bl	800946c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 800213c:	481d      	ldr	r0, [pc, #116]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800213e:	f7fe f87f 	bl	8000240 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	23c8      	movs	r3, #200	; 0xc8
 8002148:	491a      	ldr	r1, [pc, #104]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800214a:	481c      	ldr	r0, [pc, #112]	; (80021bc <HAL_GPIO_EXTI_Callback+0xc8>)
 800214c:	f006 f8bc 	bl	80082c8 <HAL_UART_Transmit>
}
 8002150:	e029      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0xb2>
	else if (GPIO_Pin == GPIO_PIN_5)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b20      	cmp	r3, #32
 8002156:	d111      	bne.n	800217c <HAL_GPIO_EXTI_Callback+0x88>
		pressButton3 = 1;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
		sprintf(str, "pin5 \n\r");
 800215e:	491b      	ldr	r1, [pc, #108]	; (80021cc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002160:	4814      	ldr	r0, [pc, #80]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002162:	f007 f983 	bl	800946c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8002166:	4813      	ldr	r0, [pc, #76]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002168:	f7fe f86a 	bl	8000240 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	23c8      	movs	r3, #200	; 0xc8
 8002172:	4910      	ldr	r1, [pc, #64]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002174:	4811      	ldr	r0, [pc, #68]	; (80021bc <HAL_GPIO_EXTI_Callback+0xc8>)
 8002176:	f006 f8a7 	bl	80082c8 <HAL_UART_Transmit>
}
 800217a:	e014      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0xb2>
	else if (GPIO_Pin == GPIO_PIN_13)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002182:	d110      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0xb2>
		pressButton4 = 1;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
		sprintf(str, "pin13 \n\r");
 800218a:	4912      	ldr	r1, [pc, #72]	; (80021d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800218e:	f007 f96d 	bl	800946c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002194:	f7fe f854 	bl	8000240 <strlen>
 8002198:	4603      	mov	r3, r0
 800219a:	b29a      	uxth	r2, r3
 800219c:	23c8      	movs	r3, #200	; 0xc8
 800219e:	4905      	ldr	r1, [pc, #20]	; (80021b4 <HAL_GPIO_EXTI_Callback+0xc0>)
 80021a0:	4806      	ldr	r0, [pc, #24]	; (80021bc <HAL_GPIO_EXTI_Callback+0xc8>)
 80021a2:	f006 f891 	bl	80082c8 <HAL_UART_Transmit>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800b874 	.word	0x0800b874
 80021b4:	20000400 	.word	0x20000400
 80021b8:	2000032c 	.word	0x2000032c
 80021bc:	200005b4 	.word	0x200005b4
 80021c0:	2000032d 	.word	0x2000032d
 80021c4:	0800b87c 	.word	0x0800b87c
 80021c8:	2000032e 	.word	0x2000032e
 80021cc:	0800b884 	.word	0x0800b884
 80021d0:	2000032f 	.word	0x2000032f
 80021d4:	0800b88c 	.word	0x0800b88c

080021d8 <CRC16_2>:

uint16_t CRC16_2(uint8_t *ptr, uint8_t length)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
      uint16_t 	crc = 0xFFFF;
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	81fb      	strh	r3, [r7, #14]
      uint8_t 	s 	= 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	737b      	strb	r3, [r7, #13]

      while(length--) {
 80021ee:	e023      	b.n	8002238 <CRC16_2+0x60>
        crc ^= *ptr++;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	4053      	eors	r3, r2
 80021fe:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++) {
 8002200:	2300      	movs	r3, #0
 8002202:	737b      	strb	r3, [r7, #13]
 8002204:	e015      	b.n	8002232 <CRC16_2+0x5a>
          if((crc & 0x01) != 0) {
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <CRC16_2+0x4e>
            crc >>= 1;
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	81fb      	strh	r3, [r7, #14]
            crc ^= 0xA001;
 8002216:	89fb      	ldrh	r3, [r7, #14]
 8002218:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800221c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8002220:	43db      	mvns	r3, r3
 8002222:	81fb      	strh	r3, [r7, #14]
 8002224:	e002      	b.n	800222c <CRC16_2+0x54>
          } else crc >>= 1;
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++) {
 800222c:	7b7b      	ldrb	r3, [r7, #13]
 800222e:	3301      	adds	r3, #1
 8002230:	737b      	strb	r3, [r7, #13]
 8002232:	7b7b      	ldrb	r3, [r7, #13]
 8002234:	2b07      	cmp	r3, #7
 8002236:	d9e6      	bls.n	8002206 <CRC16_2+0x2e>
      while(length--) {
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	70fa      	strb	r2, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1d6      	bne.n	80021f0 <CRC16_2+0x18>
        }
      }
      return crc;
 8002242:	89fb      	ldrh	r3, [r7, #14]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002254:	e7fe      	b.n	8002254 <Error_Handler+0x4>
	...

08002258 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_RNG_Init+0x20>)
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <MX_RNG_Init+0x24>)
 8002260:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_RNG_Init+0x20>)
 8002264:	f004 fa80 	bl	8006768 <HAL_RNG_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800226e:	f7ff ffef 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000045c 	.word	0x2000045c
 800227c:	50060800 	.word	0x50060800

08002280 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_RNG_MspInit+0x38>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10b      	bne.n	80022aa <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RNG_MspInit+0x3c>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RNG_MspInit+0x3c>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	6353      	str	r3, [r2, #52]	; 0x34
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RNG_MspInit+0x3c>)
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	50060800 	.word	0x50060800
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_SPI5_Init+0x74>)
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <MX_SPI5_Init+0x78>)
 80022c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_SPI5_Init+0x74>)
 80022cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <MX_SPI5_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <MX_SPI5_Init+0x74>)
 80022da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022de:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_SPI5_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_SPI5_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_SPI5_Init+0x74>)
 80022ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_SPI5_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_SPI5_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_SPI5_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_SPI5_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_SPI5_Init+0x74>)
 800230e:	2207      	movs	r2, #7
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_SPI5_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_SPI5_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_SPI5_Init+0x74>)
 8002320:	f004 fa4c 	bl	80067bc <HAL_SPI_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800232a:	f7ff ff91 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000046c 	.word	0x2000046c
 8002338:	40015000 	.word	0x40015000

0800233c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_SPI_MspInit+0x7c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d128      	bne.n	80023b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_SPI_MspInit+0x80>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_SPI_MspInit+0x80>)
 8002364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_SPI_MspInit+0x80>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_SPI_MspInit+0x80>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_SPI_MspInit+0x80>)
 800237c:	f043 0320 	orr.w	r3, r3, #32
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_SPI_MspInit+0x80>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800238e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_SPI_MspInit+0x84>)
 80023ac:	f001 fefe 	bl	80041ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40015000 	.word	0x40015000
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40021400 	.word	0x40021400

080023c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_MspInit+0x44>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_MspInit+0x44>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_MspInit+0x44>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x44>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x44>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x44>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f001 f988 	bl	8003724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800241c:	2020      	movs	r0, #32
 800241e:	f002 f88b 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002422:	2040      	movs	r0, #64	; 0x40
 8002424:	f002 f888 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002428:	2080      	movs	r0, #128	; 0x80
 800242a:	f002 f885 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800243a:	f004 ff65 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000051c 	.word	0x2000051c

08002448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <TIM2_IRQHandler+0x10>)
 800244e:	f004 ff5b 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000568 	.word	0x20000568

0800245c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002464:	f002 f868 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_kill>:

int _kill(int pid, int sig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002486:	f006 fb7d 	bl	8008b84 <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2216      	movs	r2, #22
 800248e:	601a      	str	r2, [r3, #0]
	return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_exit>:

void _exit (int status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ae:	e7fe      	b.n	80024ae <_exit+0x12>

080024b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00a      	b.n	80024d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024c2:	f3af 8000 	nop.w
 80024c6:	4601      	mov	r1, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf0      	blt.n	80024c2 <_read+0x12>
	}

return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf1      	blt.n	80024fc <_write+0x12>
	}
	return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_close>:

int _close(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	605a      	str	r2, [r3, #4]
	return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_isatty>:

int _isatty(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f006 fae2 	bl	8008b84 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20080000 	.word	0x20080000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	20000350 	.word	0x20000350
 80025f4:	200006d0 	.word	0x200006d0

080025f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <SystemInit+0x5c>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <SystemInit+0x5c>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <SystemInit+0x60>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <SystemInit+0x60>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <SystemInit+0x60>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <SystemInit+0x60>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	490d      	ldr	r1, [pc, #52]	; (8002658 <SystemInit+0x60>)
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <SystemInit+0x64>)
 8002626:	4013      	ands	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <SystemInit+0x60>)
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <SystemInit+0x68>)
 800262e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <SystemInit+0x60>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a08      	ldr	r2, [pc, #32]	; (8002658 <SystemInit+0x60>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x60>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SystemInit+0x5c>)
 8002644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002648:	609a      	str	r2, [r3, #8]
#endif
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	40023800 	.word	0x40023800
 800265c:	fef6ffff 	.word	0xfef6ffff
 8002660:	24003010 	.word	0x24003010

08002664 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <MX_TIM1_Init+0xa0>)
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <MX_TIM1_Init+0xa4>)
 8002686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_TIM1_Init+0xa0>)
 800268a:	22c7      	movs	r2, #199	; 0xc7
 800268c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_TIM1_Init+0xa0>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_TIM1_Init+0xa0>)
 8002696:	f240 32e7 	movw	r2, #999	; 0x3e7
 800269a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM1_Init+0xa0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <MX_TIM1_Init+0xa0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <MX_TIM1_Init+0xa0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026ae:	4815      	ldr	r0, [pc, #84]	; (8002704 <MX_TIM1_Init+0xa0>)
 80026b0:	f004 fbfe 	bl	8006eb0 <HAL_TIM_Base_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80026ba:	f7ff fdc9 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <MX_TIM1_Init+0xa0>)
 80026cc:	f005 f84c 	bl	8007768 <HAL_TIM_ConfigClockSource>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80026d6:	f7ff fdbb 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM1_Init+0xa0>)
 80026ec:	f005 fcf2 	bl	80080d4 <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026f6:	f7ff fdab 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000051c 	.word	0x2000051c
 8002708:	40010000 	.word	0x40010000

0800270c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <MX_TIM2_Init+0x98>)
 800272c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <MX_TIM2_Init+0x98>)
 8002734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <MX_TIM2_Init+0x98>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <MX_TIM2_Init+0x98>)
 8002742:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <MX_TIM2_Init+0x98>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <MX_TIM2_Init+0x98>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002754:	4813      	ldr	r0, [pc, #76]	; (80027a4 <MX_TIM2_Init+0x98>)
 8002756:	f004 fbab 	bl	8006eb0 <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002760:	f7ff fd76 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4619      	mov	r1, r3
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <MX_TIM2_Init+0x98>)
 8002772:	f004 fff9 	bl	8007768 <HAL_TIM_ConfigClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800277c:	f7ff fd68 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_TIM2_Init+0x98>)
 800278e:	f005 fca1 	bl	80080d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002798:	f7ff fd5a 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000568 	.word	0x20000568

080027a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08e      	sub	sp, #56	; 0x38
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c8:	463b      	mov	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	615a      	str	r2, [r3, #20]
 80027d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <MX_TIM3_Init+0xec>)
 80027de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027e2:	22f9      	movs	r2, #249	; 0xf9
 80027e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <MX_TIM3_Init+0xe8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002800:	4823      	ldr	r0, [pc, #140]	; (8002890 <MX_TIM3_Init+0xe8>)
 8002802:	f004 fb55 	bl	8006eb0 <HAL_TIM_Base_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800280c:	f7ff fd20 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800281a:	4619      	mov	r1, r3
 800281c:	481c      	ldr	r0, [pc, #112]	; (8002890 <MX_TIM3_Init+0xe8>)
 800281e:	f004 ffa3 	bl	8007768 <HAL_TIM_ConfigClockSource>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002828:	f7ff fd12 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800282c:	4818      	ldr	r0, [pc, #96]	; (8002890 <MX_TIM3_Init+0xe8>)
 800282e:	f004 fc0f 	bl	8007050 <HAL_TIM_PWM_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002838:	f7ff fd0a 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4811      	ldr	r0, [pc, #68]	; (8002890 <MX_TIM3_Init+0xe8>)
 800284c:	f005 fc42 	bl	80080d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002856:	f7ff fcfb 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285a:	2360      	movs	r3, #96	; 0x60
 800285c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800285e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002862:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <MX_TIM3_Init+0xe8>)
 8002874:	f004 fe68 	bl	8007548 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800287e:	f7ff fce7 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002882:	4803      	ldr	r0, [pc, #12]	; (8002890 <MX_TIM3_Init+0xe8>)
 8002884:	f000 f85c 	bl	8002940 <HAL_TIM_MspPostInit>

}
 8002888:	bf00      	nop
 800288a:	3738      	adds	r7, #56	; 0x38
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	200004d0 	.word	0x200004d0
 8002894:	40000400 	.word	0x40000400

08002898 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <HAL_TIM_Base_MspInit+0x9c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d114      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2101      	movs	r1, #1
 80028c6:	2019      	movs	r0, #25
 80028c8:	f001 fc39 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028cc:	2019      	movs	r0, #25
 80028ce:	f001 fc52 	bl	8004176 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028d2:	e02a      	b.n	800292a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d114      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	201c      	movs	r0, #28
 80028fc:	f001 fc1f 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002900:	201c      	movs	r0, #28
 8002902:	f001 fc38 	bl	8004176 <HAL_NVIC_EnableIRQ>
}
 8002906:	e010      	b.n	800292a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_TIM_Base_MspInit+0xa4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10b      	bne.n	800292a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_TIM_Base_MspInit+0xa0>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40023800 	.word	0x40023800
 800293c:	40000400 	.word	0x40000400

08002940 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x64>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d11b      	bne.n	800299a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800298a:	2302      	movs	r3, #2
 800298c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_TIM_MspPostInit+0x6c>)
 8002996:	f001 fc09 	bl	80041ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000

080029b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <MX_USART1_UART_Init+0x5c>)
 80029b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029d6:	220c      	movs	r2, #12
 80029d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <MX_USART1_UART_Init+0x58>)
 80029f4:	f005 fc1a 	bl	800822c <HAL_UART_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029fe:	f7ff fc27 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000638 	.word	0x20000638
 8002a0c:	40011000 	.word	0x40011000

08002a10 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <MX_USART3_UART_Init+0x5c>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART3_UART_Init+0x58>)
 8002a54:	f005 fbea 	bl	800822c <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a5e:	f7ff fbf7 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200005b4 	.word	0x200005b4
 8002a6c:	40004800 	.word	0x40004800

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_UART_MspInit+0xfc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d139      	bne.n	8002b06 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4825      	ldr	r0, [pc, #148]	; (8002b74 <HAL_UART_MspInit+0x104>)
 8002ae0:	f001 fb64 	bl	80041ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ae4:	2340      	movs	r3, #64	; 0x40
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af4:	2307      	movs	r3, #7
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	481d      	ldr	r0, [pc, #116]	; (8002b74 <HAL_UART_MspInit+0x104>)
 8002b00:	f001 fb54 	bl	80041ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b04:	e02d      	b.n	8002b62 <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_UART_MspInit+0x108>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d128      	bne.n	8002b62 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_UART_MspInit+0x100>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b52:	2307      	movs	r3, #7
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4807      	ldr	r0, [pc, #28]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b5e:	f001 fb25 	bl	80041ac <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	3730      	adds	r7, #48	; 0x30
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	40020c00 	.word	0x40020c00

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b86:	e003      	b.n	8002b90 <LoopCopyDataInit>

08002b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b8e:	3104      	adds	r1, #4

08002b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b98:	d3f6      	bcc.n	8002b88 <CopyDataInit>
  ldr  r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b9c:	e002      	b.n	8002ba4 <LoopFillZerobss>

08002b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ba0:	f842 3b04 	str.w	r3, [r2], #4

08002ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ba8:	d3f9      	bcc.n	8002b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002baa:	f7ff fd25 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f005 ffef 	bl	8008b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7ff f9cb 	bl	8001f4c <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002bbc:	0800bee4 	.word	0x0800bee4
  ldr  r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bc4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002bc8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8002bcc:	200006d0 	.word	0x200006d0

08002bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC_IRQHandler>

08002bd2 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8002bd2:	b590      	push	{r4, r7, lr}
 8002bd4:	b089      	sub	sp, #36	; 0x24
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	80fb      	strh	r3, [r7, #6]
 8002be4:	4603      	mov	r3, r0
 8002be6:	80bb      	strh	r3, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8002c0c:	887a      	ldrh	r2, [r7, #2]
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da01      	bge.n	8002c1e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8002c22:	883a      	ldrh	r2, [r7, #0]
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da01      	bge.n	8002c34 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002c30:	2301      	movs	r3, #1
 8002c32:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	823b      	strh	r3, [r7, #16]
 8002c46:	e005      	b.n	8002c54 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002c54:	7cbb      	ldrb	r3, [r7, #18]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002c5a:	883a      	ldrh	r2, [r7, #0]
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	81fb      	strh	r3, [r7, #14]
 8002c66:	e005      	b.n	8002c74 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002c68:	88ba      	ldrh	r2, [r7, #4]
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002c70:	883b      	ldrh	r3, [r7, #0]
 8002c72:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002c74:	8abc      	ldrh	r4, [r7, #20]
 8002c76:	8afa      	ldrh	r2, [r7, #22]
 8002c78:	89f9      	ldrh	r1, [r7, #14]
 8002c7a:	8a38      	ldrh	r0, [r7, #16]
 8002c7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4623      	mov	r3, r4
 8002c82:	f000 fca7 	bl	80035d4 <ILI9341_Draw_Rectangle>
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
	...

08002c90 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	71fb      	strb	r3, [r7, #7]
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71bb      	strb	r3, [r7, #6]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	717b      	strb	r3, [r7, #5]
 8002caa:	4613      	mov	r3, r2
 8002cac:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b1f      	cmp	r3, #31
 8002cb6:	d802      	bhi.n	8002cbe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	e002      	b.n	8002cc4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	3b20      	subs	r3, #32
 8002cc2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	753b      	strb	r3, [r7, #20]
 8002cc8:	e012      	b.n	8002cf0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8002cca:	7dfa      	ldrb	r2, [r7, #23]
 8002ccc:	7d38      	ldrb	r0, [r7, #20]
 8002cce:	7d39      	ldrb	r1, [r7, #20]
 8002cd0:	4c3c      	ldr	r4, [pc, #240]	; (8002dc4 <ILI9341_Draw_Char+0x134>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4423      	add	r3, r4
 8002cdc:	4403      	add	r3, r0
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002cea:	7d3b      	ldrb	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	753b      	strb	r3, [r7, #20]
 8002cf0:	7d3b      	ldrb	r3, [r7, #20]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d9e9      	bls.n	8002cca <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	b298      	uxth	r0, r3
 8002cfa:	797b      	ldrb	r3, [r7, #5]
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d00:	461a      	mov	r2, r3
 8002d02:	0052      	lsls	r2, r2, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	b29c      	uxth	r4, r3
 8002d10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4623      	mov	r3, r4
 8002d16:	f000 fc5d 	bl	80035d4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	757b      	strb	r3, [r7, #21]
 8002d1e:	e048      	b.n	8002db2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	75bb      	strb	r3, [r7, #22]
 8002d24:	e03f      	b.n	8002da6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8002d26:	7d7b      	ldrb	r3, [r7, #21]
 8002d28:	f107 0218 	add.w	r2, r7, #24
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002d32:	461a      	mov	r2, r3
 8002d34:	7dbb      	ldrb	r3, [r7, #22]
 8002d36:	fa42 f303 	asr.w	r3, r2, r3
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02e      	beq.n	8002da0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8002d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d110      	bne.n	8002d6a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002d48:	79bb      	ldrb	r3, [r7, #6]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	7d7b      	ldrb	r3, [r7, #21]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b298      	uxth	r0, r3
 8002d54:	797b      	ldrb	r3, [r7, #5]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	7dbb      	ldrb	r3, [r7, #22]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	887a      	ldrh	r2, [r7, #2]
 8002d62:	4619      	mov	r1, r3
 8002d64:	f000 fb5c 	bl	8003420 <ILI9341_Draw_Pixel>
 8002d68:	e01a      	b.n	8002da0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	7d7b      	ldrb	r3, [r7, #21]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002d74:	fb11 f303 	smulbb	r3, r1, r3
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	797b      	ldrb	r3, [r7, #5]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	7dbb      	ldrb	r3, [r7, #22]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002d88:	fb11 f303 	smulbb	r3, r1, r3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	b299      	uxth	r1, r3
 8002d92:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002d94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	f000 fc1a 	bl	80035d4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002da0:	7dbb      	ldrb	r3, [r7, #22]
 8002da2:	3301      	adds	r3, #1
 8002da4:	75bb      	strb	r3, [r7, #22]
 8002da6:	7dbb      	ldrb	r3, [r7, #22]
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	d9bc      	bls.n	8002d26 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002dac:	7d7b      	ldrb	r3, [r7, #21]
 8002dae:	3301      	adds	r3, #1
 8002db0:	757b      	strb	r3, [r7, #21]
 8002db2:	7d7b      	ldrb	r3, [r7, #21]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d9b3      	bls.n	8002d20 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800b8b0 	.word	0x0800b8b0

08002dc8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	70fb      	strb	r3, [r7, #3]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70bb      	strb	r3, [r7, #2]
 8002dde:	4613      	mov	r3, r2
 8002de0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002de2:	e017      	b.n	8002e14 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	7818      	ldrb	r0, [r3, #0]
 8002dec:	883c      	ldrh	r4, [r7, #0]
 8002dee:	78ba      	ldrb	r2, [r7, #2]
 8002df0:	78f9      	ldrb	r1, [r7, #3]
 8002df2:	8bbb      	ldrh	r3, [r7, #28]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	8b3b      	ldrh	r3, [r7, #24]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	f7ff ff48 	bl	8002c90 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002e00:	8b3b      	ldrh	r3, [r7, #24]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	0052      	lsls	r2, r2, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	4413      	add	r3, r2
 8002e12:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <ILI9341_Draw_Text+0x1c>
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
	...

08002e28 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002e2c:	f7ff fa48 	bl	80022c0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002e30:	f7fd fdf8 	bl	8000a24 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <ILI9341_SPI_Init+0x1c>)
 8002e3c:	f001 fb62 	bl	8004504 <HAL_GPIO_WritePin>
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40020800 	.word	0x40020800

08002e48 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002e52:	1df9      	adds	r1, r7, #7
 8002e54:	2301      	movs	r3, #1
 8002e56:	2201      	movs	r2, #1
 8002e58:	4803      	ldr	r0, [pc, #12]	; (8002e68 <ILI9341_SPI_Send+0x20>)
 8002e5a:	f003 fd5a 	bl	8006912 <HAL_SPI_Transmit>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000046c 	.word	0x2000046c

08002e6c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <ILI9341_Write_Command+0x40>)
 8002e7e:	f001 fb41 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <ILI9341_Write_Command+0x40>)
 8002e8a:	f001 fb3b 	bl	8004504 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ffd9 	bl	8002e48 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002e96:	2201      	movs	r2, #1
 8002e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <ILI9341_Write_Command+0x40>)
 8002e9e:	f001 fb31 	bl	8004504 <HAL_GPIO_WritePin>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020800 	.word	0x40020800

08002eb0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <ILI9341_Write_Data+0x40>)
 8002ec2:	f001 fb1f 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <ILI9341_Write_Data+0x40>)
 8002ece:	f001 fb19 	bl	8004504 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ffb7 	bl	8002e48 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <ILI9341_Write_Data+0x40>)
 8002ee2:	f001 fb0f 	bl	8004504 <HAL_GPIO_WritePin>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020800 	.word	0x40020800

08002ef4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	80fb      	strh	r3, [r7, #6]
 8002f06:	4603      	mov	r3, r0
 8002f08:	80bb      	strh	r3, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	807b      	strh	r3, [r7, #2]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002f12:	202a      	movs	r0, #42	; 0x2a
 8002f14:	f7ff ffaa 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ffc5 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ffc0 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002f30:	887b      	ldrh	r3, [r7, #2]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ffb9 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ffb4 	bl	8002eb0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002f48:	202b      	movs	r0, #43	; 0x2b
 8002f4a:	f7ff ff8f 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ffaa 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ffa5 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002f66:	883b      	ldrh	r3, [r7, #0]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff9e 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002f74:	883b      	ldrh	r3, [r7, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff99 	bl	8002eb0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002f7e:	202c      	movs	r0, #44	; 0x2c
 8002f80:	f7ff ff74 	bl	8002e6c <ILI9341_Write_Command>
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd90      	pop	{r4, r7, pc}

08002f8c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002f90:	2201      	movs	r2, #1
 8002f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f96:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <ILI9341_Reset+0x38>)
 8002f98:	f001 fab4 	bl	8004504 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002f9c:	20c8      	movs	r0, #200	; 0xc8
 8002f9e:	f000 fbe1 	bl	8003764 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa8:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <ILI9341_Reset+0x38>)
 8002faa:	f001 faab 	bl	8004504 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002fae:	20c8      	movs	r0, #200	; 0xc8
 8002fb0:	f000 fbd8 	bl	8003764 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fba:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <ILI9341_Reset+0x38>)
 8002fbc:	f001 faa2 	bl	8004504 <HAL_GPIO_WritePin>
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40020800 	.word	0x40020800

08002fc8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002fd6:	2036      	movs	r0, #54	; 0x36
 8002fd8:	f7ff ff48 	bl	8002e6c <ILI9341_Write_Command>
HAL_Delay(1);
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f000 fbc1 	bl	8003764 <HAL_Delay>
	
switch(screen_rotation) 
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d837      	bhi.n	8003058 <ILI9341_Set_Rotation+0x90>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <ILI9341_Set_Rotation+0x28>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003017 	.word	0x08003017
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003043 	.word	0x08003043
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8003000:	2048      	movs	r0, #72	; 0x48
 8003002:	f7ff ff55 	bl	8002eb0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <ILI9341_Set_Rotation+0x9c>)
 8003008:	22f0      	movs	r2, #240	; 0xf0
 800300a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <ILI9341_Set_Rotation+0xa0>)
 800300e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003012:	801a      	strh	r2, [r3, #0]
			break;
 8003014:	e021      	b.n	800305a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8003016:	2028      	movs	r0, #40	; 0x28
 8003018:	f7ff ff4a 	bl	8002eb0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <ILI9341_Set_Rotation+0x9c>)
 800301e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003022:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <ILI9341_Set_Rotation+0xa0>)
 8003026:	22f0      	movs	r2, #240	; 0xf0
 8003028:	801a      	strh	r2, [r3, #0]
			break;
 800302a:	e016      	b.n	800305a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800302c:	2088      	movs	r0, #136	; 0x88
 800302e:	f7ff ff3f 	bl	8002eb0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <ILI9341_Set_Rotation+0x9c>)
 8003034:	22f0      	movs	r2, #240	; 0xf0
 8003036:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <ILI9341_Set_Rotation+0xa0>)
 800303a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800303e:	801a      	strh	r2, [r3, #0]
			break;
 8003040:	e00b      	b.n	800305a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003042:	20e8      	movs	r0, #232	; 0xe8
 8003044:	f7ff ff34 	bl	8002eb0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <ILI9341_Set_Rotation+0x9c>)
 800304a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800304e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <ILI9341_Set_Rotation+0xa0>)
 8003052:	22f0      	movs	r2, #240	; 0xf0
 8003054:	801a      	strh	r2, [r3, #0]
			break;
 8003056:	e000      	b.n	800305a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8003058:	bf00      	nop
	}
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000016 	.word	0x20000016
 8003068:	20000014 	.word	0x20000014

0800306c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003076:	4802      	ldr	r0, [pc, #8]	; (8003080 <ILI9341_Enable+0x14>)
 8003078:	f001 fa44 	bl	8004504 <HAL_GPIO_WritePin>
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40020800 	.word	0x40020800

08003084 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8003088:	f7ff fff0 	bl	800306c <ILI9341_Enable>
ILI9341_SPI_Init();
 800308c:	f7ff fecc 	bl	8002e28 <ILI9341_SPI_Init>
ILI9341_Reset();
 8003090:	f7ff ff7c 	bl	8002f8c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003094:	2001      	movs	r0, #1
 8003096:	f7ff fee9 	bl	8002e6c <ILI9341_Write_Command>
HAL_Delay(1000);
 800309a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800309e:	f000 fb61 	bl	8003764 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80030a2:	20cb      	movs	r0, #203	; 0xcb
 80030a4:	f7ff fee2 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80030a8:	2039      	movs	r0, #57	; 0x39
 80030aa:	f7ff ff01 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80030ae:	202c      	movs	r0, #44	; 0x2c
 80030b0:	f7ff fefe 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff fefb 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80030ba:	2034      	movs	r0, #52	; 0x34
 80030bc:	f7ff fef8 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80030c0:	2002      	movs	r0, #2
 80030c2:	f7ff fef5 	bl	8002eb0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80030c6:	20cf      	movs	r0, #207	; 0xcf
 80030c8:	f7ff fed0 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7ff feef 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80030d2:	20c1      	movs	r0, #193	; 0xc1
 80030d4:	f7ff feec 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80030d8:	2030      	movs	r0, #48	; 0x30
 80030da:	f7ff fee9 	bl	8002eb0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80030de:	20e8      	movs	r0, #232	; 0xe8
 80030e0:	f7ff fec4 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80030e4:	2085      	movs	r0, #133	; 0x85
 80030e6:	f7ff fee3 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fee0 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80030f0:	2078      	movs	r0, #120	; 0x78
 80030f2:	f7ff fedd 	bl	8002eb0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80030f6:	20ea      	movs	r0, #234	; 0xea
 80030f8:	f7ff feb8 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff fed7 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7ff fed4 	bl	8002eb0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8003108:	20ed      	movs	r0, #237	; 0xed
 800310a:	f7ff feaf 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800310e:	2064      	movs	r0, #100	; 0x64
 8003110:	f7ff fece 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003114:	2003      	movs	r0, #3
 8003116:	f7ff fecb 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800311a:	2012      	movs	r0, #18
 800311c:	f7ff fec8 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003120:	2081      	movs	r0, #129	; 0x81
 8003122:	f7ff fec5 	bl	8002eb0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8003126:	20f7      	movs	r0, #247	; 0xf7
 8003128:	f7ff fea0 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800312c:	2020      	movs	r0, #32
 800312e:	f7ff febf 	bl	8002eb0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003132:	20c0      	movs	r0, #192	; 0xc0
 8003134:	f7ff fe9a 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8003138:	2023      	movs	r0, #35	; 0x23
 800313a:	f7ff feb9 	bl	8002eb0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800313e:	20c1      	movs	r0, #193	; 0xc1
 8003140:	f7ff fe94 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003144:	2010      	movs	r0, #16
 8003146:	f7ff feb3 	bl	8002eb0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800314a:	20c5      	movs	r0, #197	; 0xc5
 800314c:	f7ff fe8e 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003150:	203e      	movs	r0, #62	; 0x3e
 8003152:	f7ff fead 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8003156:	2028      	movs	r0, #40	; 0x28
 8003158:	f7ff feaa 	bl	8002eb0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800315c:	20c7      	movs	r0, #199	; 0xc7
 800315e:	f7ff fe85 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003162:	2086      	movs	r0, #134	; 0x86
 8003164:	f7ff fea4 	bl	8002eb0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8003168:	2036      	movs	r0, #54	; 0x36
 800316a:	f7ff fe7f 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800316e:	2048      	movs	r0, #72	; 0x48
 8003170:	f7ff fe9e 	bl	8002eb0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003174:	203a      	movs	r0, #58	; 0x3a
 8003176:	f7ff fe79 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800317a:	2055      	movs	r0, #85	; 0x55
 800317c:	f7ff fe98 	bl	8002eb0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003180:	20b1      	movs	r0, #177	; 0xb1
 8003182:	f7ff fe73 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff fe92 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800318c:	2018      	movs	r0, #24
 800318e:	f7ff fe8f 	bl	8002eb0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003192:	20b6      	movs	r0, #182	; 0xb6
 8003194:	f7ff fe6a 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003198:	2008      	movs	r0, #8
 800319a:	f7ff fe89 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800319e:	2082      	movs	r0, #130	; 0x82
 80031a0:	f7ff fe86 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80031a4:	2027      	movs	r0, #39	; 0x27
 80031a6:	f7ff fe83 	bl	8002eb0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80031aa:	20f2      	movs	r0, #242	; 0xf2
 80031ac:	f7ff fe5e 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7ff fe7d 	bl	8002eb0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80031b6:	2026      	movs	r0, #38	; 0x26
 80031b8:	f7ff fe58 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff fe77 	bl	8002eb0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80031c2:	20e0      	movs	r0, #224	; 0xe0
 80031c4:	f7ff fe52 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80031c8:	200f      	movs	r0, #15
 80031ca:	f7ff fe71 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80031ce:	2031      	movs	r0, #49	; 0x31
 80031d0:	f7ff fe6e 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80031d4:	202b      	movs	r0, #43	; 0x2b
 80031d6:	f7ff fe6b 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80031da:	200c      	movs	r0, #12
 80031dc:	f7ff fe68 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80031e0:	200e      	movs	r0, #14
 80031e2:	f7ff fe65 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80031e6:	2008      	movs	r0, #8
 80031e8:	f7ff fe62 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80031ec:	204e      	movs	r0, #78	; 0x4e
 80031ee:	f7ff fe5f 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80031f2:	20f1      	movs	r0, #241	; 0xf1
 80031f4:	f7ff fe5c 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80031f8:	2037      	movs	r0, #55	; 0x37
 80031fa:	f7ff fe59 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80031fe:	2007      	movs	r0, #7
 8003200:	f7ff fe56 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003204:	2010      	movs	r0, #16
 8003206:	f7ff fe53 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800320a:	2003      	movs	r0, #3
 800320c:	f7ff fe50 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003210:	200e      	movs	r0, #14
 8003212:	f7ff fe4d 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8003216:	2009      	movs	r0, #9
 8003218:	f7ff fe4a 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7ff fe47 	bl	8002eb0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003222:	20e1      	movs	r0, #225	; 0xe1
 8003224:	f7ff fe22 	bl	8002e6c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7ff fe41 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800322e:	200e      	movs	r0, #14
 8003230:	f7ff fe3e 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003234:	2014      	movs	r0, #20
 8003236:	f7ff fe3b 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800323a:	2003      	movs	r0, #3
 800323c:	f7ff fe38 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003240:	2011      	movs	r0, #17
 8003242:	f7ff fe35 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003246:	2007      	movs	r0, #7
 8003248:	f7ff fe32 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800324c:	2031      	movs	r0, #49	; 0x31
 800324e:	f7ff fe2f 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003252:	20c1      	movs	r0, #193	; 0xc1
 8003254:	f7ff fe2c 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8003258:	2048      	movs	r0, #72	; 0x48
 800325a:	f7ff fe29 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800325e:	2008      	movs	r0, #8
 8003260:	f7ff fe26 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003264:	200f      	movs	r0, #15
 8003266:	f7ff fe23 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800326a:	200c      	movs	r0, #12
 800326c:	f7ff fe20 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003270:	2031      	movs	r0, #49	; 0x31
 8003272:	f7ff fe1d 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8003276:	2036      	movs	r0, #54	; 0x36
 8003278:	f7ff fe1a 	bl	8002eb0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800327c:	200f      	movs	r0, #15
 800327e:	f7ff fe17 	bl	8002eb0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003282:	2011      	movs	r0, #17
 8003284:	f7ff fdf2 	bl	8002e6c <ILI9341_Write_Command>
HAL_Delay(120);
 8003288:	2078      	movs	r0, #120	; 0x78
 800328a:	f000 fa6b 	bl	8003764 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800328e:	2029      	movs	r0, #41	; 0x29
 8003290:	f7ff fdec 	bl	8002e6c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fe97 	bl	8002fc8 <ILI9341_Set_Rotation>
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	80fb      	strh	r3, [r7, #6]
 80032ac:	466b      	mov	r3, sp
 80032ae:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032bc:	d202      	bcs.n	80032c4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
 80032c2:	e002      	b.n	80032ca <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80032c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80032ca:	2201      	movs	r2, #1
 80032cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032d0:	483e      	ldr	r0, [pc, #248]	; (80033cc <ILI9341_Draw_Colour_Burst+0x12c>)
 80032d2:	f001 f917 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032dc:	483b      	ldr	r0, [pc, #236]	; (80033cc <ILI9341_Draw_Colour_Burst+0x12c>)
 80032de:	f001 f911 	bl	8004504 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80032ec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80032ee:	4623      	mov	r3, r4
 80032f0:	3b01      	subs	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	4620      	mov	r0, r4
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003308:	00c2      	lsls	r2, r0, #3
 800330a:	4620      	mov	r0, r4
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00cb      	lsls	r3, r1, #3
 800331a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800331e:	00c2      	lsls	r2, r0, #3
 8003320:	1de3      	adds	r3, r4, #7
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	ebad 0d03 	sub.w	sp, sp, r3
 800332a:	466b      	mov	r3, sp
 800332c:	3300      	adds	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	e00e      	b.n	8003354 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	4413      	add	r3, r2
 800333c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003340:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	3301      	adds	r3, #1
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	b2d1      	uxtb	r1, r2
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	3302      	adds	r3, #2
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
 8003354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	429a      	cmp	r2, r3
 800335a:	d3ec      	bcc.n	8003336 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	fbb3 f2f2 	udiv	r2, r3, r2
 8003374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003376:	fb01 f202 	mul.w	r2, r1, r2
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003388:	e009      	b.n	800339e <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	b29a      	uxth	r2, r3
 8003390:	230a      	movs	r3, #10
 8003392:	480f      	ldr	r0, [pc, #60]	; (80033d0 <ILI9341_Draw_Colour_Burst+0x130>)
 8003394:	f003 fabd 	bl	8006912 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	3301      	adds	r3, #1
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d3f1      	bcc.n	800338a <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	230a      	movs	r3, #10
 80033ae:	4808      	ldr	r0, [pc, #32]	; (80033d0 <ILI9341_Draw_Colour_Burst+0x130>)
 80033b0:	f003 faaf 	bl	8006912 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80033b4:	2201      	movs	r2, #1
 80033b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ba:	4804      	ldr	r0, [pc, #16]	; (80033cc <ILI9341_Draw_Colour_Burst+0x12c>)
 80033bc:	f001 f8a2 	bl	8004504 <HAL_GPIO_WritePin>
 80033c0:	46ad      	mov	sp, r5
}
 80033c2:	bf00      	nop
 80033c4:	3730      	adds	r7, #48	; 0x30
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40020800 	.word	0x40020800
 80033d0:	2000046c 	.word	0x2000046c

080033d4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <ILI9341_Fill_Screen+0x44>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <ILI9341_Fill_Screen+0x48>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2100      	movs	r1, #0
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff fd81 	bl	8002ef4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <ILI9341_Fill_Screen+0x44>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <ILI9341_Fill_Screen+0x48>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	fb03 f302 	mul.w	r3, r3, r2
 8003404:	461a      	mov	r2, r3
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff48 	bl	80032a0 <ILI9341_Draw_Colour_Burst>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000016 	.word	0x20000016
 800341c:	20000014 	.word	0x20000014

08003420 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	460b      	mov	r3, r1
 800342c:	80bb      	strh	r3, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003432:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <ILI9341_Draw_Pixel+0x1a4>)
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	429a      	cmp	r2, r3
 800343c:	f080 80be 	bcs.w	80035bc <ILI9341_Draw_Pixel+0x19c>
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <ILI9341_Draw_Pixel+0x1a8>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	88ba      	ldrh	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	f080 80b7 	bcs.w	80035bc <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003454:	485d      	ldr	r0, [pc, #372]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003456:	f001 f855 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800345a:	2200      	movs	r2, #0
 800345c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003460:	485a      	ldr	r0, [pc, #360]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003462:	f001 f84f 	bl	8004504 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8003466:	202a      	movs	r0, #42	; 0x2a
 8003468:	f7ff fcee 	bl	8002e48 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800346c:	2201      	movs	r2, #1
 800346e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003472:	4856      	ldr	r0, [pc, #344]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003474:	f001 f846 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800347e:	4853      	ldr	r0, [pc, #332]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003480:	f001 f840 	bl	8004504 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800348a:	4850      	ldr	r0, [pc, #320]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 800348c:	f001 f83a 	bl	8004504 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	753b      	strb	r3, [r7, #20]
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	757b      	strb	r3, [r7, #21]
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	3301      	adds	r3, #1
 80034a4:	121b      	asrs	r3, r3, #8
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	75bb      	strb	r3, [r7, #22]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80034b4:	f107 0114 	add.w	r1, r7, #20
 80034b8:	2301      	movs	r3, #1
 80034ba:	2204      	movs	r2, #4
 80034bc:	4844      	ldr	r0, [pc, #272]	; (80035d0 <ILI9341_Draw_Pixel+0x1b0>)
 80034be:	f003 fa28 	bl	8006912 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c8:	4840      	ldr	r0, [pc, #256]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 80034ca:	f001 f81b 	bl	8004504 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034d4:	483d      	ldr	r0, [pc, #244]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 80034d6:	f001 f815 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80034da:	2200      	movs	r2, #0
 80034dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e0:	483a      	ldr	r0, [pc, #232]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 80034e2:	f001 f80f 	bl	8004504 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80034e6:	202b      	movs	r0, #43	; 0x2b
 80034e8:	f7ff fcae 	bl	8002e48 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80034ec:	2201      	movs	r2, #1
 80034ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f2:	4836      	ldr	r0, [pc, #216]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 80034f4:	f001 f806 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80034f8:	2201      	movs	r2, #1
 80034fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034fe:	4833      	ldr	r0, [pc, #204]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003500:	f001 f800 	bl	8004504 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800350a:	4830      	ldr	r0, [pc, #192]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 800350c:	f000 fffa 	bl	8004504 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003510:	88bb      	ldrh	r3, [r7, #4]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	b29b      	uxth	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	743b      	strb	r3, [r7, #16]
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	747b      	strb	r3, [r7, #17]
 8003520:	88bb      	ldrh	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	121b      	asrs	r3, r3, #8
 8003526:	b2db      	uxtb	r3, r3
 8003528:	74bb      	strb	r3, [r7, #18]
 800352a:	88bb      	ldrh	r3, [r7, #4]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003534:	f107 0110 	add.w	r1, r7, #16
 8003538:	2301      	movs	r3, #1
 800353a:	2204      	movs	r2, #4
 800353c:	4824      	ldr	r0, [pc, #144]	; (80035d0 <ILI9341_Draw_Pixel+0x1b0>)
 800353e:	f003 f9e8 	bl	8006912 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003542:	2201      	movs	r2, #1
 8003544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003548:	4820      	ldr	r0, [pc, #128]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 800354a:	f000 ffdb 	bl	8004504 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003554:	481d      	ldr	r0, [pc, #116]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003556:	f000 ffd5 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003560:	481a      	ldr	r0, [pc, #104]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003562:	f000 ffcf 	bl	8004504 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8003566:	202c      	movs	r0, #44	; 0x2c
 8003568:	f7ff fc6e 	bl	8002e48 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800356c:	2201      	movs	r2, #1
 800356e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003572:	4816      	ldr	r0, [pc, #88]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003574:	f000 ffc6 	bl	8004504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003578:	2201      	movs	r2, #1
 800357a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 8003580:	f000 ffc0 	bl	8004504 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800358a:	4810      	ldr	r0, [pc, #64]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 800358c:	f000 ffba 	bl	8004504 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	b29b      	uxth	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	733b      	strb	r3, [r7, #12]
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80035a0:	f107 010c 	add.w	r1, r7, #12
 80035a4:	2301      	movs	r3, #1
 80035a6:	2202      	movs	r2, #2
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <ILI9341_Draw_Pixel+0x1b0>)
 80035aa:	f003 f9b2 	bl	8006912 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <ILI9341_Draw_Pixel+0x1ac>)
 80035b6:	f000 ffa5 	bl	8004504 <HAL_GPIO_WritePin>
 80035ba:	e000      	b.n	80035be <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80035bc:	bf00      	nop
	
}
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000016 	.word	0x20000016
 80035c8:	20000014 	.word	0x20000014
 80035cc:	40020800 	.word	0x40020800
 80035d0:	2000046c 	.word	0x2000046c

080035d4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4604      	mov	r4, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	80fb      	strh	r3, [r7, #6]
 80035e6:	4603      	mov	r3, r0
 80035e8:	80bb      	strh	r3, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	807b      	strh	r3, [r7, #2]
 80035ee:	4613      	mov	r3, r2
 80035f0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <ILI9341_Draw_Rectangle+0xb0>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	88fa      	ldrh	r2, [r7, #6]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d23d      	bcs.n	800367a <ILI9341_Draw_Rectangle+0xa6>
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <ILI9341_Draw_Rectangle+0xb4>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	88ba      	ldrh	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d237      	bcs.n	800367a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	4413      	add	r3, r2
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <ILI9341_Draw_Rectangle+0xb0>)
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	b292      	uxth	r2, r2
 8003616:	4293      	cmp	r3, r2
 8003618:	dd05      	ble.n	8003626 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <ILI9341_Draw_Rectangle+0xb0>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29a      	uxth	r2, r3
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003626:	88ba      	ldrh	r2, [r7, #4]
 8003628:	883b      	ldrh	r3, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <ILI9341_Draw_Rectangle+0xb4>)
 800362e:	8812      	ldrh	r2, [r2, #0]
 8003630:	b292      	uxth	r2, r2
 8003632:	4293      	cmp	r3, r2
 8003634:	dd05      	ble.n	8003642 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <ILI9341_Draw_Rectangle+0xb4>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29a      	uxth	r2, r3
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4413      	add	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29c      	uxth	r4, r3
 800364e:	88ba      	ldrh	r2, [r7, #4]
 8003650:	883b      	ldrh	r3, [r7, #0]
 8003652:	4413      	add	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	88b9      	ldrh	r1, [r7, #4]
 800365c:	88f8      	ldrh	r0, [r7, #6]
 800365e:	4622      	mov	r2, r4
 8003660:	f7ff fc48 	bl	8002ef4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003664:	883b      	ldrh	r3, [r7, #0]
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	461a      	mov	r2, r3
 800366e:	8b3b      	ldrh	r3, [r7, #24]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fe14 	bl	80032a0 <ILI9341_Draw_Colour_Burst>
 8003678:	e000      	b.n	800367c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800367a:	bf00      	nop
}
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	20000016 	.word	0x20000016
 8003688:	20000014 	.word	0x20000014

0800368c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_Init+0x34>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_Init+0x34>)
 8003696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_Init+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <HAL_Init+0x34>)
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a8:	2003      	movs	r0, #3
 80036aa:	f000 fd3d 	bl	8004128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f000 f808 	bl	80036c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80036b4:	f7fe fe86 	bl	80023c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00

080036c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x54>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_InitTick+0x58>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036da:	fbb3 f3f1 	udiv	r3, r3, r1
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd55 	bl	8004192 <HAL_SYSTICK_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00e      	b.n	8003710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0f      	cmp	r3, #15
 80036f6:	d80a      	bhi.n	800370e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f8:	2200      	movs	r2, #0
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f000 fd1d 	bl	800413e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <HAL_InitTick+0x5c>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000010 	.word	0x20000010
 800371c:	2000001c 	.word	0x2000001c
 8003720:	20000018 	.word	0x20000018

08003724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x20>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_IncTick+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4413      	add	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_IncTick+0x24>)
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000001c 	.word	0x2000001c
 8003748:	200006bc 	.word	0x200006bc

0800374c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_GetTick+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	200006bc 	.word	0x200006bc

08003764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff ffee 	bl	800374c <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d005      	beq.n	800378a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_Delay+0x44>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800378a:	bf00      	nop
 800378c:	f7ff ffde 	bl	800374c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d8f7      	bhi.n	800378c <HAL_Delay+0x28>
  {
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000001c 	.word	0x2000001c

080037ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e031      	b.n	8003826 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd f8ea 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_ADC_Init+0x84>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 faca 	bl	8003d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
 8003816:	e001      	b.n	800381c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	ffffeefd 	.word	0xffffeefd

08003834 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_ADC_Start+0x1a>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ad      	b.n	80039aa <HAL_ADC_Start+0x176>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d018      	beq.n	8003896 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_ADC_Start+0x184>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_ADC_Start+0x188>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9a      	lsrs	r2, r3, #18
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003888:	e002      	b.n	8003890 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d175      	bne.n	8003990 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <HAL_ADC_Start+0x18c>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d106      	bne.n	80038ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f023 0206 	bic.w	r2, r3, #6
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
 80038ec:	e002      	b.n	80038f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003904:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_ADC_Start+0x190>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d143      	bne.n	80039a8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	e03a      	b.n	80039a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_ADC_Start+0x194>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10e      	bne.n	800395a <HAL_ADC_Start+0x126>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003958:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_ADC_Start+0x190>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d120      	bne.n	80039a8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_ADC_Start+0x198>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d11b      	bne.n	80039a8 <HAL_ADC_Start+0x174>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d114      	bne.n	80039a8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	e00b      	b.n	80039a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000010 	.word	0x20000010
 80039bc:	431bde83 	.word	0x431bde83
 80039c0:	fffff8fe 	.word	0xfffff8fe
 80039c4:	40012300 	.word	0x40012300
 80039c8:	40012000 	.word	0x40012000
 80039cc:	40012200 	.word	0x40012200

080039d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d113      	bne.n	8003a16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fc:	d10b      	bne.n	8003a16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e063      	b.n	8003ade <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a16:	f7ff fe99 	bl	800374c <HAL_GetTick>
 8003a1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a1c:	e021      	b.n	8003a62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d01d      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_ADC_PollForConversion+0x6c>
 8003a2c:	f7ff fe8e 	bl	800374c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d212      	bcs.n	8003a62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d00b      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e03d      	b.n	8003ade <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d1d6      	bne.n	8003a1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0212 	mvn.w	r2, #18
 8003a78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d123      	bne.n	8003adc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11f      	bne.n	8003adc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1c>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e12a      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x272>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	d93a      	bls.n	8003ba2 <HAL_ADC_ConfigChannel+0xa2>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b34:	d035      	beq.n	8003ba2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68d9      	ldr	r1, [r3, #12]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	3b1e      	subs	r3, #30
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	400a      	ands	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a87      	ldr	r2, [pc, #540]	; (8003d80 <HAL_ADC_ConfigChannel+0x280>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10a      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b7a:	e035      	b.n	8003be8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4403      	add	r3, r0
 8003b94:	3b1e      	subs	r3, #30
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba0:	e022      	b.n	8003be8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6919      	ldr	r1, [r3, #16]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6919      	ldr	r1, [r3, #16]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4603      	mov	r3, r0
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4403      	add	r3, r0
 8003bde:	409a      	lsls	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b06      	cmp	r3, #6
 8003bee:	d824      	bhi.n	8003c3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	3b05      	subs	r3, #5
 8003c02:	221f      	movs	r2, #31
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	400a      	ands	r2, r1
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	3b05      	subs	r3, #5
 8003c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	635a      	str	r2, [r3, #52]	; 0x34
 8003c38:	e04c      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d824      	bhi.n	8003c8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	3b23      	subs	r3, #35	; 0x23
 8003c54:	221f      	movs	r2, #31
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	400a      	ands	r2, r1
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4618      	mov	r0, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3b23      	subs	r3, #35	; 0x23
 8003c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
 8003c8a:	e023      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b41      	subs	r3, #65	; 0x41
 8003c9e:	221f      	movs	r2, #31
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	400a      	ands	r2, r1
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3b41      	subs	r3, #65	; 0x41
 8003cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <HAL_ADC_ConfigChannel+0x284>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x1f4>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce6:	d105      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003cee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003cf2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_ADC_ConfigChannel+0x284>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d109      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x212>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d105      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_ADC_ConfigChannel+0x284>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d125      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x268>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_ADC_ConfigChannel+0x280>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x22e>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b11      	cmp	r3, #17
 8003d2c:	d11c      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_ADC_ConfigChannel+0x288>)
 8003d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_ADC_ConfigChannel+0x280>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d111      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_ADC_ConfigChannel+0x28c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_ADC_ConfigChannel+0x290>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9a      	lsrs	r2, r3, #18
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d5a:	e002      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f9      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	10000012 	.word	0x10000012
 8003d84:	40012000 	.word	0x40012000
 8003d88:	40012300 	.word	0x40012300
 8003d8c:	20000010 	.word	0x20000010
 8003d90:	431bde83 	.word	0x431bde83

08003d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d9c:	4b78      	ldr	r3, [pc, #480]	; (8003f80 <ADC_Init+0x1ec>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a77      	ldr	r2, [pc, #476]	; (8003f80 <ADC_Init+0x1ec>)
 8003da2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003da6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003da8:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <ADC_Init+0x1ec>)
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4973      	ldr	r1, [pc, #460]	; (8003f80 <ADC_Init+0x1ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6899      	ldr	r1, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <ADC_Init+0x1f0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6899      	ldr	r1, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6899      	ldr	r1, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e00f      	b.n	8003e8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0202 	bic.w	r2, r2, #2
 8003e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	035a      	lsls	r2, r3, #13
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	e007      	b.n	8003f04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	051a      	lsls	r2, r3, #20
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f46:	025a      	lsls	r2, r3, #9
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	029a      	lsls	r2, r3, #10
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40012300 	.word	0x40012300
 8003f84:	0f000001 	.word	0x0f000001

08003f88 <__NVIC_SetPriorityGrouping>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00
 8003fcc:	05fa0000 	.word	0x05fa0000

08003fd0 <__NVIC_GetPriorityGrouping>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f003 0307 	and.w	r3, r3, #7
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <__NVIC_EnableIRQ>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db0b      	blt.n	8004016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	4907      	ldr	r1, [pc, #28]	; (8004024 <__NVIC_EnableIRQ+0x38>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2001      	movs	r0, #1
 800400e:	fa00 f202 	lsl.w	r2, r0, r2
 8004012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100

08004028 <__NVIC_SetPriority>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	db0a      	blt.n	8004052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	490c      	ldr	r1, [pc, #48]	; (8004074 <__NVIC_SetPriority+0x4c>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	440b      	add	r3, r1
 800404c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004050:	e00a      	b.n	8004068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4908      	ldr	r1, [pc, #32]	; (8004078 <__NVIC_SetPriority+0x50>)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	3b04      	subs	r3, #4
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	440b      	add	r3, r1
 8004066:	761a      	strb	r2, [r3, #24]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000e100 	.word	0xe000e100
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <NVIC_EncodePriority>:
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f1c3 0307 	rsb	r3, r3, #7
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf28      	it	cs
 800409a:	2304      	movcs	r3, #4
 800409c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d902      	bls.n	80040ac <NVIC_EncodePriority+0x30>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3b03      	subs	r3, #3
 80040aa:	e000      	b.n	80040ae <NVIC_EncodePriority+0x32>
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c4:	f04f 31ff 	mov.w	r1, #4294967295
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	43d9      	mvns	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	4313      	orrs	r3, r2
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f4:	d301      	bcc.n	80040fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00f      	b.n	800411a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <SysTick_Config+0x40>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004102:	210f      	movs	r1, #15
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f7ff ff8e 	bl	8004028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <SysTick_Config+0x40>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004112:	4b04      	ldr	r3, [pc, #16]	; (8004124 <SysTick_Config+0x40>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000e010 	.word	0xe000e010

08004128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff29 	bl	8003f88 <__NVIC_SetPriorityGrouping>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004150:	f7ff ff3e 	bl	8003fd0 <__NVIC_GetPriorityGrouping>
 8004154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff8e 	bl	800407c <NVIC_EncodePriority>
 8004160:	4602      	mov	r2, r0
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff5d 	bl	8004028 <__NVIC_SetPriority>
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff31 	bl	8003fec <__NVIC_EnableIRQ>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffa2 	bl	80040e4 <SysTick_Config>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e175      	b.n	80044b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041cc:	2201      	movs	r2, #1
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	f040 8164 	bne.w	80044b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d00b      	beq.n	800420a <HAL_GPIO_Init+0x5e>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041fe:	2b11      	cmp	r3, #17
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b12      	cmp	r3, #18
 8004208:	d130      	bne.n	800426c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004240:	2201      	movs	r2, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 0201 	and.w	r2, r3, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	2203      	movs	r2, #3
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x100>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b12      	cmp	r3, #18
 80042aa:	d123      	bne.n	80042f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	08da      	lsrs	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	08da      	lsrs	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3208      	adds	r2, #8
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	2203      	movs	r2, #3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80be 	beq.w	80044b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004336:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a65      	ldr	r2, [pc, #404]	; (80044d0 <HAL_GPIO_Init+0x324>)
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800434e:	4a61      	ldr	r2, [pc, #388]	; (80044d4 <HAL_GPIO_Init+0x328>)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	3302      	adds	r3, #2
 8004356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	220f      	movs	r2, #15
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a58      	ldr	r2, [pc, #352]	; (80044d8 <HAL_GPIO_Init+0x32c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d037      	beq.n	80043ea <HAL_GPIO_Init+0x23e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_GPIO_Init+0x330>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_GPIO_Init+0x23a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_GPIO_Init+0x334>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02b      	beq.n	80043e2 <HAL_GPIO_Init+0x236>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a55      	ldr	r2, [pc, #340]	; (80044e4 <HAL_GPIO_Init+0x338>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d025      	beq.n	80043de <HAL_GPIO_Init+0x232>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a54      	ldr	r2, [pc, #336]	; (80044e8 <HAL_GPIO_Init+0x33c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <HAL_GPIO_Init+0x22e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a53      	ldr	r2, [pc, #332]	; (80044ec <HAL_GPIO_Init+0x340>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d019      	beq.n	80043d6 <HAL_GPIO_Init+0x22a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_GPIO_Init+0x344>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x226>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_GPIO_Init+0x348>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_GPIO_Init+0x222>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_GPIO_Init+0x34c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x21e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_GPIO_Init+0x350>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_GPIO_Init+0x21a>
 80043c2:	2309      	movs	r3, #9
 80043c4:	e012      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043c6:	230a      	movs	r3, #10
 80043c8:	e010      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ca:	2308      	movs	r3, #8
 80043cc:	e00e      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00c      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e00a      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d6:	2305      	movs	r3, #5
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043da:	2304      	movs	r3, #4
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	; (80044d4 <HAL_GPIO_Init+0x328>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_GPIO_Init+0x354>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_GPIO_Init+0x354>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_GPIO_Init+0x354>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_GPIO_Init+0x354>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f ae86 	bls.w	80041cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021800 	.word	0x40021800
 80044f4:	40021c00 	.word	0x40021c00
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022400 	.word	0x40022400
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fdcc 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07f      	b.n	800467a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fbda 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	e006      	b.n	80045f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d104      	bne.n	8004602 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004600:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_I2C_Init+0x11c>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	ea42 0103 	orr.w	r1, r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	02008000 	.word	0x02008000

08004688 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	460b      	mov	r3, r1
 8004696:	817b      	strh	r3, [r7, #10]
 8004698:	4613      	mov	r3, r2
 800469a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	f040 80da 	bne.w	800485e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_I2C_Master_Transmit+0x30>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e0d3      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046c0:	f7ff f844 	bl	800374c <HAL_GetTick>
 80046c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2319      	movs	r3, #25
 80046cc:	2201      	movs	r2, #1
 80046ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fcbc 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0be      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	; 0x21
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2210      	movs	r2, #16
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	893a      	ldrh	r2, [r7, #8]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	2bff      	cmp	r3, #255	; 0xff
 8004712:	d90e      	bls.n	8004732 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	b2da      	uxtb	r2, r3
 8004720:	8979      	ldrh	r1, [r7, #10]
 8004722:	4b51      	ldr	r3, [pc, #324]	; (8004868 <HAL_I2C_Master_Transmit+0x1e0>)
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fe1e 	bl	800536c <I2C_TransferConfig>
 8004730:	e06c      	b.n	800480c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	b2da      	uxtb	r2, r3
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	4b48      	ldr	r3, [pc, #288]	; (8004868 <HAL_I2C_Master_Transmit+0x1e0>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fe0d 	bl	800536c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004752:	e05b      	b.n	800480c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	6a39      	ldr	r1, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fcb9 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e07b      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d034      	beq.n	800480c <HAL_I2C_Master_Transmit+0x184>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d130      	bne.n	800480c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fc4b 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04d      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2bff      	cmp	r3, #255	; 0xff
 80047cc:	d90e      	bls.n	80047ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	8979      	ldrh	r1, [r7, #10]
 80047dc:	2300      	movs	r3, #0
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fdc1 	bl	800536c <I2C_TransferConfig>
 80047ea:	e00f      	b.n	800480c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	2300      	movs	r3, #0
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fdb0 	bl	800536c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d19e      	bne.n	8004754 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fc98 	bl	8005150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e01a      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2220      	movs	r2, #32
 8004830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_I2C_Master_Transmit+0x1e4>)
 800483e:	400b      	ands	r3, r1
 8004840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	80002000 	.word	0x80002000
 800486c:	fe00e800 	.word	0xfe00e800

08004870 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	817b      	strh	r3, [r7, #10]
 8004880:	4613      	mov	r3, r2
 8004882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	f040 80db 	bne.w	8004a48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_I2C_Master_Receive+0x30>
 800489c:	2302      	movs	r3, #2
 800489e:	e0d4      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a8:	f7fe ff50 	bl	800374c <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2319      	movs	r3, #25
 80048b4:	2201      	movs	r2, #1
 80048b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fbc8 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0bf      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2222      	movs	r2, #34	; 0x22
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2210      	movs	r2, #16
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2bff      	cmp	r3, #255	; 0xff
 80048fa:	d90e      	bls.n	800491a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	22ff      	movs	r2, #255	; 0xff
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	4b52      	ldr	r3, [pc, #328]	; (8004a54 <HAL_I2C_Master_Receive+0x1e4>)
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fd2a 	bl	800536c <I2C_TransferConfig>
 8004918:	e06d      	b.n	80049f6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	b2da      	uxtb	r2, r3
 800492a:	8979      	ldrh	r1, [r7, #10]
 800492c:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <HAL_I2C_Master_Receive+0x1e4>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fd19 	bl	800536c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800493a:	e05c      	b.n	80049f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	6a39      	ldr	r1, [r7, #32]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fc41 	bl	80051c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e07c      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d034      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x186>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d130      	bne.n	80049f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	2200      	movs	r2, #0
 800499c:	2180      	movs	r1, #128	; 0x80
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fb56 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e04d      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2bff      	cmp	r3, #255	; 0xff
 80049b6:	d90e      	bls.n	80049d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fccc 	bl	800536c <I2C_TransferConfig>
 80049d4:	e00f      	b.n	80049f6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	8979      	ldrh	r1, [r7, #10]
 80049e8:	2300      	movs	r3, #0
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fcbb 	bl	800536c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d19d      	bne.n	800493c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fba3 	bl	8005150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e01a      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_I2C_Master_Receive+0x1e8>)
 8004a28:	400b      	ands	r3, r1
 8004a2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	80002400 	.word	0x80002400
 8004a58:	fe00e800 	.word	0xfe00e800

08004a5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	813b      	strh	r3, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	f040 80f9 	bne.w	8004c76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x34>
 8004a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0ed      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Write+0x4e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0e6      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fe fe4b 	bl	800374c <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2319      	movs	r3, #25
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fac3 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d1      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	; 0x21
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004afc:	88f8      	ldrh	r0, [r7, #6]
 8004afe:	893a      	ldrh	r2, [r7, #8]
 8004b00:	8979      	ldrh	r1, [r7, #10]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f9d3 	bl	8004eb8 <I2C_RequestMemoryWrite>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0a9      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2bff      	cmp	r3, #255	; 0xff
 8004b2c:	d90e      	bls.n	8004b4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	22ff      	movs	r2, #255	; 0xff
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	8979      	ldrh	r1, [r7, #10]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fc11 	bl	800536c <I2C_TransferConfig>
 8004b4a:	e00f      	b.n	8004b6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	8979      	ldrh	r1, [r7, #10]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fc00 	bl	800536c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 faad 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e07b      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d034      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x1c8>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d130      	bne.n	8004c24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fa3f 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04d      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2bff      	cmp	r3, #255	; 0xff
 8004be4:	d90e      	bls.n	8004c04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22ff      	movs	r2, #255	; 0xff
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	8979      	ldrh	r1, [r7, #10]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fbb5 	bl	800536c <I2C_TransferConfig>
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	8979      	ldrh	r1, [r7, #10]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fba4 	bl	800536c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d19e      	bne.n	8004b6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fa8c 	bl	8005150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e01a      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2220      	movs	r2, #32
 8004c48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_I2C_Mem_Write+0x224>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	fe00e800 	.word	0xfe00e800

08004c84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	461a      	mov	r2, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	817b      	strh	r3, [r7, #10]
 8004c96:	460b      	mov	r3, r1
 8004c98:	813b      	strh	r3, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	f040 80fd 	bne.w	8004ea6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_I2C_Mem_Read+0x34>
 8004cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0f1      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Mem_Read+0x4e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e0ea      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cda:	f7fe fd37 	bl	800374c <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2319      	movs	r3, #25
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f9af 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0d5      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	; 0x22
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2240      	movs	r2, #64	; 0x40
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a3a      	ldr	r2, [r7, #32]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d24:	88f8      	ldrh	r0, [r7, #6]
 8004d26:	893a      	ldrh	r2, [r7, #8]
 8004d28:	8979      	ldrh	r1, [r7, #10]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4603      	mov	r3, r0
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f913 	bl	8004f60 <I2C_RequestMemoryRead>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0ad      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2bff      	cmp	r3, #255	; 0xff
 8004d54:	d90e      	bls.n	8004d74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	8979      	ldrh	r1, [r7, #10]
 8004d64:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <HAL_I2C_Mem_Read+0x22c>)
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fafd 	bl	800536c <I2C_TransferConfig>
 8004d72:	e00f      	b.n	8004d94 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	8979      	ldrh	r1, [r7, #10]
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <HAL_I2C_Mem_Read+0x22c>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 faec 	bl	800536c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f956 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07c      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d034      	beq.n	8004e54 <HAL_I2C_Mem_Read+0x1d0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d130      	bne.n	8004e54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f927 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e04d      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2bff      	cmp	r3, #255	; 0xff
 8004e14:	d90e      	bls.n	8004e34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	8979      	ldrh	r1, [r7, #10]
 8004e24:	2300      	movs	r3, #0
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fa9d 	bl	800536c <I2C_TransferConfig>
 8004e32:	e00f      	b.n	8004e54 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	8979      	ldrh	r1, [r7, #10]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fa8c 	bl	800536c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d19a      	bne.n	8004d94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f974 	bl	8005150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e01a      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2220      	movs	r2, #32
 8004e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_I2C_Mem_Read+0x230>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	80002400 	.word	0x80002400
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	8979      	ldrh	r1, [r7, #10]
 8004ed8:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <I2C_RequestMemoryWrite+0xa4>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa43 	bl	800536c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f8f0 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e02c      	b.n	8004f54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
 8004f0a:	e015      	b.n	8004f38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	69b9      	ldr	r1, [r7, #24]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f8d6 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e012      	b.n	8004f54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2e:	893b      	ldrh	r3, [r7, #8]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f884 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	80002000 	.word	0x80002000

08004f60 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	817b      	strh	r3, [r7, #10]
 8004f72:	460b      	mov	r3, r1
 8004f74:	813b      	strh	r3, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	8979      	ldrh	r1, [r7, #10]
 8004f80:	4b20      	ldr	r3, [pc, #128]	; (8005004 <I2C_RequestMemoryRead+0xa4>)
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f9f0 	bl	800536c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	69b9      	ldr	r1, [r7, #24]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f89d 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e02c      	b.n	8004ffa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d105      	bne.n	8004fb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa6:	893b      	ldrh	r3, [r7, #8]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb0:	e015      	b.n	8004fde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f883 	bl	80050d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e012      	b.n	8004ffa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2140      	movs	r1, #64	; 0x40
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f831 	bl	8005050 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	80002000 	.word	0x80002000

08005008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d103      	bne.n	8005026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d007      	beq.n	8005044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	619a      	str	r2, [r3, #24]
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005060:	e022      	b.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d01e      	beq.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fe fb6f 	bl	800374c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d113      	bne.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e00f      	b.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d0cd      	beq.n	8005062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050dc:	e02c      	b.n	8005138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8dc 	bl	80052a0 <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e02a      	b.n	8005148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d01e      	beq.n	8005138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fe fb27 	bl	800374c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d113      	bne.n	8005138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e007      	b.n	8005148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d1cb      	bne.n	80050de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800515c:	e028      	b.n	80051b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f89c 	bl	80052a0 <I2C_IsAcknowledgeFailed>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e026      	b.n	80051c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fe faeb 	bl	800374c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d113      	bne.n	80051b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e007      	b.n	80051c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d1cf      	bne.n	800515e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051d4:	e055      	b.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f860 	bl	80052a0 <I2C_IsAcknowledgeFailed>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e053      	b.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d129      	bne.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d105      	bne.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e03f      	b.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2220      	movs	r2, #32
 8005218:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005226:	400b      	ands	r3, r1
 8005228:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e022      	b.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fe fa7e 	bl	800374c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e007      	b.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d1a2      	bne.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	fe00e800 	.word	0xfe00e800

080052a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d151      	bne.n	800535e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ba:	e022      	b.n	8005302 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d01e      	beq.n	8005302 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fe fa42 	bl	800374c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <I2C_IsAcknowledgeFailed+0x3a>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d113      	bne.n	8005302 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e02e      	b.n	8005360 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b20      	cmp	r3, #32
 800530e:	d1d5      	bne.n	80052bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2210      	movs	r2, #16
 8005316:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2220      	movs	r2, #32
 800531e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fe71 	bl	8005008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <I2C_IsAcknowledgeFailed+0xc8>)
 8005332:	400b      	ands	r3, r1
 8005334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	fe00e800 	.word	0xfe00e800

0800536c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	817b      	strh	r3, [r7, #10]
 800537a:	4613      	mov	r3, r2
 800537c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	0d5b      	lsrs	r3, r3, #21
 8005388:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <I2C_TransferConfig+0x58>)
 800538e:	430b      	orrs	r3, r1
 8005390:	43db      	mvns	r3, r3
 8005392:	ea02 0103 	and.w	r1, r2, r3
 8005396:	897b      	ldrh	r3, [r7, #10]
 8005398:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800539c:	7a7b      	ldrb	r3, [r7, #9]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	03ff63ff 	.word	0x03ff63ff

080053c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d138      	bne.n	8005450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e032      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800541a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b20      	cmp	r3, #32
 8005472:	d139      	bne.n	80054e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800547e:	2302      	movs	r3, #2
 8005480:	e033      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	; 0x24
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40007000 	.word	0x40007000

08005518 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6413      	str	r3, [r2, #64]	; 0x40
 800552e:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005546:	f7fe f901 	bl	800374c <HAL_GetTick>
 800554a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800554c:	e009      	b.n	8005562 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800554e:	f7fe f8fd 	bl	800374c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555c:	d901      	bls.n	8005562 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e022      	b.n	80055a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556e:	d1ee      	bne.n	800554e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800557c:	f7fe f8e6 	bl	800374c <HAL_GetTick>
 8005580:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005582:	e009      	b.n	8005598 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005584:	f7fe f8e2 	bl	800374c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005592:	d901      	bls.n	8005598 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e007      	b.n	80055a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a4:	d1ee      	bne.n	8005584 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40007000 	.word	0x40007000

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e29b      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8087 	beq.w	80056ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055dc:	4b96      	ldr	r3, [pc, #600]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d00c      	beq.n	8005602 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e8:	4b93      	ldr	r3, [pc, #588]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d112      	bne.n	800561a <HAL_RCC_OscConfig+0x62>
 80055f4:	4b90      	ldr	r3, [pc, #576]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005600:	d10b      	bne.n	800561a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005602:	4b8d      	ldr	r3, [pc, #564]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d06c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x130>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d168      	bne.n	80056e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e275      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x7a>
 8005624:	4b84      	ldr	r3, [pc, #528]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a83      	ldr	r2, [pc, #524]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800562a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e02e      	b.n	8005690 <HAL_RCC_OscConfig+0xd8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x9c>
 800563a:	4b7f      	ldr	r3, [pc, #508]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7e      	ldr	r2, [pc, #504]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b7c      	ldr	r3, [pc, #496]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7b      	ldr	r2, [pc, #492]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800564c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e01d      	b.n	8005690 <HAL_RCC_OscConfig+0xd8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0xc0>
 800565e:	4b76      	ldr	r3, [pc, #472]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a75      	ldr	r2, [pc, #468]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b73      	ldr	r3, [pc, #460]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a72      	ldr	r2, [pc, #456]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00b      	b.n	8005690 <HAL_RCC_OscConfig+0xd8>
 8005678:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6e      	ldr	r2, [pc, #440]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800567e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a6b      	ldr	r2, [pc, #428]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800568a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d013      	beq.n	80056c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fe f858 	bl	800374c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fe f854 	bl	800374c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e229      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	4b61      	ldr	r3, [pc, #388]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0xe8>
 80056be:	e014      	b.n	80056ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fe f844 	bl	800374c <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fe f840 	bl	800374c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e215      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056da:	4b57      	ldr	r3, [pc, #348]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x110>
 80056e6:	e000      	b.n	80056ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d069      	beq.n	80057ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056f6:	4b50      	ldr	r3, [pc, #320]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b08      	cmp	r3, #8
 800570c:	d11c      	bne.n	8005748 <HAL_RCC_OscConfig+0x190>
 800570e:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d116      	bne.n	8005748 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	4b47      	ldr	r3, [pc, #284]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_RCC_OscConfig+0x17a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d001      	beq.n	8005732 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e1e9      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	4b41      	ldr	r3, [pc, #260]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	493d      	ldr	r1, [pc, #244]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005746:	e040      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d023      	beq.n	8005798 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005750:	4b39      	ldr	r3, [pc, #228]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a38      	ldr	r2, [pc, #224]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd fff6 	bl	800374c <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005764:	f7fd fff2 	bl	800374c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e1c7      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005776:	4b30      	ldr	r3, [pc, #192]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4929      	ldr	r1, [pc, #164]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
 8005796:	e018      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005798:	4b27      	ldr	r3, [pc, #156]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd ffd2 	bl	800374c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ac:	f7fd ffce 	bl	800374c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e1a3      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d038      	beq.n	8005848 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d019      	beq.n	8005812 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80057e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ea:	f7fd ffaf 	bl	800374c <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f2:	f7fd ffab 	bl	800374c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e180      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x23a>
 8005810:	e01a      	b.n	8005848 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <HAL_RCC_OscConfig+0x280>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581e:	f7fd ff95 	bl	800374c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005824:	e00a      	b.n	800583c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005826:	f7fd ff91 	bl	800374c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d903      	bls.n	800583c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e166      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
 8005838:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 800583e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ee      	bne.n	8005826 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80a4 	beq.w	800599e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005856:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10d      	bne.n	800587e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005862:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a88      	ldr	r2, [pc, #544]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
 800586e:	4b86      	ldr	r3, [pc, #536]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587e:	4b83      	ldr	r3, [pc, #524]	; (8005a8c <HAL_RCC_OscConfig+0x4d4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d118      	bne.n	80058bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800588a:	4b80      	ldr	r3, [pc, #512]	; (8005a8c <HAL_RCC_OscConfig+0x4d4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7f      	ldr	r2, [pc, #508]	; (8005a8c <HAL_RCC_OscConfig+0x4d4>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005896:	f7fd ff59 	bl	800374c <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589e:	f7fd ff55 	bl	800374c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b64      	cmp	r3, #100	; 0x64
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e12a      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b0:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x4d4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x31a>
 80058c4:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a6f      	ldr	r2, [pc, #444]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	e02d      	b.n	800592e <HAL_RCC_OscConfig+0x376>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x33c>
 80058da:	4b6b      	ldr	r3, [pc, #428]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	4a6a      	ldr	r2, [pc, #424]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	6713      	str	r3, [r2, #112]	; 0x70
 80058e6:	4b68      	ldr	r3, [pc, #416]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a67      	ldr	r2, [pc, #412]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	e01c      	b.n	800592e <HAL_RCC_OscConfig+0x376>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d10c      	bne.n	8005916 <HAL_RCC_OscConfig+0x35e>
 80058fc:	4b62      	ldr	r3, [pc, #392]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a61      	ldr	r2, [pc, #388]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005902:	f043 0304 	orr.w	r3, r3, #4
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	4b5f      	ldr	r3, [pc, #380]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a5e      	ldr	r2, [pc, #376]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e00b      	b.n	800592e <HAL_RCC_OscConfig+0x376>
 8005916:	4b5c      	ldr	r3, [pc, #368]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	4a5b      	ldr	r2, [pc, #364]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005928:	f023 0304 	bic.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fd ff09 	bl	800374c <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd ff05 	bl	800374c <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0d8      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005954:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ee      	beq.n	800593e <HAL_RCC_OscConfig+0x386>
 8005960:	e014      	b.n	800598c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fd fef3 	bl	800374c <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd feef 	bl	800374c <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0c2      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005980:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ee      	bne.n	800596a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80ae 	beq.w	8005b04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a8:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 030c 	and.w	r3, r3, #12
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d06d      	beq.n	8005a90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d14b      	bne.n	8005a54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80059c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fd fec0 	bl	800374c <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fd febc 	bl	800374c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e091      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e2:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	061b      	lsls	r3, r3, #24
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	491b      	ldr	r1, [pc, #108]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fd fe8e 	bl	800374c <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fd fe8a 	bl	800374c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e05f      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0x47c>
 8005a52:	e057      	b.n	8005b04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fd fe74 	bl	800374c <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fd fe70 	bl	800374c <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e045      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x4b0>
 8005a86:	e03d      	b.n	8005b04 <HAL_RCC_OscConfig+0x54c>
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a90:	4b1f      	ldr	r3, [pc, #124]	; (8005b10 <HAL_RCC_OscConfig+0x558>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d030      	beq.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d129      	bne.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d122      	bne.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ac6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d119      	bne.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d10f      	bne.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800

08005b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0d0      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b2c:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d910      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3a:	4b67      	ldr	r3, [pc, #412]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 020f 	bic.w	r2, r3, #15
 8005b42:	4965      	ldr	r1, [pc, #404]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b63      	ldr	r3, [pc, #396]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0b8      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d020      	beq.n	8005baa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b74:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a58      	ldr	r2, [pc, #352]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b8c:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a52      	ldr	r2, [pc, #328]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	494d      	ldr	r1, [pc, #308]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d040      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd6:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e073      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be6:	4b3d      	ldr	r3, [pc, #244]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e06b      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bf6:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4936      	ldr	r1, [pc, #216]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c08:	f7fd fda0 	bl	800374c <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c10:	f7fd fd9c 	bl	800374c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e053      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 020c 	and.w	r2, r3, #12
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1eb      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c38:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d210      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4922      	ldr	r1, [pc, #136]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e032      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4916      	ldr	r1, [pc, #88]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c92:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	490e      	ldr	r1, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ca6:	f000 f821 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	490a      	ldr	r1, [pc, #40]	; (8005ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8005cb8:	5ccb      	ldrb	r3, [r1, r3]
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8005cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_ClockConfig+0x1d4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd fcfc 	bl	80036c4 <HAL_InitTick>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023c00 	.word	0x40023c00
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	0800b898 	.word	0x0800b898
 8005ce4:	20000010 	.word	0x20000010
 8005ce8:	20000018 	.word	0x20000018

08005cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d04:	4b67      	ldr	r3, [pc, #412]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 030c 	and.w	r3, r3, #12
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d00d      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x40>
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	f200 80bd 	bhi.w	8005e90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x34>
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1e:	e0b7      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4b61      	ldr	r3, [pc, #388]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d22:	60bb      	str	r3, [r7, #8]
      break;
 8005d24:	e0b7      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d26:	4b61      	ldr	r3, [pc, #388]	; (8005eac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d28:	60bb      	str	r3, [r7, #8]
      break;
 8005d2a:	e0b4      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d36:	4b5b      	ldr	r3, [pc, #364]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04d      	beq.n	8005dde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d42:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d52:	f04f 0100 	mov.w	r1, #0
 8005d56:	ea02 0800 	and.w	r8, r2, r0
 8005d5a:	ea03 0901 	and.w	r9, r3, r1
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	014b      	lsls	r3, r1, #5
 8005d6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d70:	0142      	lsls	r2, r0, #5
 8005d72:	4610      	mov	r0, r2
 8005d74:	4619      	mov	r1, r3
 8005d76:	ebb0 0008 	subs.w	r0, r0, r8
 8005d7a:	eb61 0109 	sbc.w	r1, r1, r9
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	018b      	lsls	r3, r1, #6
 8005d88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d8c:	0182      	lsls	r2, r0, #6
 8005d8e:	1a12      	subs	r2, r2, r0
 8005d90:	eb63 0301 	sbc.w	r3, r3, r1
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	00d9      	lsls	r1, r3, #3
 8005d9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005da2:	00d0      	lsls	r0, r2, #3
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	eb12 0208 	adds.w	r2, r2, r8
 8005dac:	eb43 0309 	adc.w	r3, r3, r9
 8005db0:	f04f 0000 	mov.w	r0, #0
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	0259      	lsls	r1, r3, #9
 8005dba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005dbe:	0250      	lsls	r0, r2, #9
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	f7fa fa8e 	bl	80002f0 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4613      	mov	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e04a      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	099b      	lsrs	r3, r3, #6
 8005de4:	461a      	mov	r2, r3
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	ea02 0400 	and.w	r4, r2, r0
 8005df6:	ea03 0501 	and.w	r5, r3, r1
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	014b      	lsls	r3, r1, #5
 8005e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e0c:	0142      	lsls	r2, r0, #5
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4619      	mov	r1, r3
 8005e12:	1b00      	subs	r0, r0, r4
 8005e14:	eb61 0105 	sbc.w	r1, r1, r5
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	018b      	lsls	r3, r1, #6
 8005e22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e26:	0182      	lsls	r2, r0, #6
 8005e28:	1a12      	subs	r2, r2, r0
 8005e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e2e:	f04f 0000 	mov.w	r0, #0
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	00d9      	lsls	r1, r3, #3
 8005e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e3c:	00d0      	lsls	r0, r2, #3
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	1912      	adds	r2, r2, r4
 8005e44:	eb45 0303 	adc.w	r3, r5, r3
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	0299      	lsls	r1, r3, #10
 8005e52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e56:	0290      	lsls	r0, r2, #10
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f7fa fa42 	bl	80002f0 <__aeabi_uldivmod>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4613      	mov	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	60bb      	str	r3, [r7, #8]
      break;
 8005e8e:	e002      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e92:	60bb      	str	r3, [r7, #8]
      break;
 8005e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e96:	68bb      	ldr	r3, [r7, #8]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	007a1200 	.word	0x007a1200

08005eb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000010 	.word	0x20000010

08005ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ecc:	f7ff fff0 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	0a9b      	lsrs	r3, r3, #10
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	4903      	ldr	r1, [pc, #12]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ede:	5ccb      	ldrb	r3, [r1, r3]
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	0800b8a8 	.word	0x0800b8a8

08005ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ef4:	f7ff ffdc 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	0b5b      	lsrs	r3, r3, #13
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	4903      	ldr	r1, [pc, #12]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40023800 	.word	0x40023800
 8005f14:	0800b8a8 	.word	0x0800b8a8

08005f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f40:	4b69      	ldr	r3, [pc, #420]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a68      	ldr	r2, [pc, #416]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f4a:	6093      	str	r3, [r2, #8]
 8005f4c:	4b66      	ldr	r3, [pc, #408]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	4964      	ldr	r1, [pc, #400]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f72:	4b5d      	ldr	r3, [pc, #372]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	4959      	ldr	r1, [pc, #356]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f90:	d101      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fae:	4b4e      	ldr	r3, [pc, #312]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	494a      	ldr	r1, [pc, #296]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 808b 	beq.w	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	4a39      	ldr	r2, [pc, #228]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006006:	6413      	str	r3, [r2, #64]	; 0x40
 8006008:	4b37      	ldr	r3, [pc, #220]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006014:	4b35      	ldr	r3, [pc, #212]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a34      	ldr	r2, [pc, #208]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800601a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fd fb94 	bl	800374c <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006028:	f7fd fb90 	bl	800374c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e38f      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800603a:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006046:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d035      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	429a      	cmp	r2, r3
 8006062:	d02e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006064:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800606e:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006078:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800607a:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a1a      	ldr	r2, [pc, #104]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800608c:	4b16      	ldr	r3, [pc, #88]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d114      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fd fb58 	bl	800374c <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fd fb54 	bl	800374c <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e351      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ce:	d111      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060de:	400b      	ands	r3, r1
 80060e0:	4901      	ldr	r1, [pc, #4]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
 80060e6:	e00b      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	0ffffcff 	.word	0x0ffffcff
 80060f4:	4bb3      	ldr	r3, [pc, #716]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4ab2      	ldr	r2, [pc, #712]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060fe:	6093      	str	r3, [r2, #8]
 8006100:	4bb0      	ldr	r3, [pc, #704]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610c:	49ad      	ldr	r1, [pc, #692]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800610e:	4313      	orrs	r3, r2
 8006110:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	d010      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800611e:	4ba9      	ldr	r3, [pc, #676]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	4aa7      	ldr	r2, [pc, #668]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800612a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800612e:	4ba5      	ldr	r3, [pc, #660]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006130:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	49a2      	ldr	r1, [pc, #648]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800614c:	4b9d      	ldr	r3, [pc, #628]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	499a      	ldr	r1, [pc, #616]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800616e:	4b95      	ldr	r3, [pc, #596]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617c:	4991      	ldr	r1, [pc, #580]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006190:	4b8c      	ldr	r3, [pc, #560]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619e:	4989      	ldr	r1, [pc, #548]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b2:	4b84      	ldr	r3, [pc, #528]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4980      	ldr	r1, [pc, #512]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061d4:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f023 0203 	bic.w	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e2:	4978      	ldr	r1, [pc, #480]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061f6:	4b73      	ldr	r3, [pc, #460]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f023 020c 	bic.w	r2, r3, #12
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	496f      	ldr	r1, [pc, #444]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006218:	4b6a      	ldr	r3, [pc, #424]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	4967      	ldr	r1, [pc, #412]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800623a:	4b62      	ldr	r3, [pc, #392]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006248:	495e      	ldr	r1, [pc, #376]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800625c:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	4956      	ldr	r1, [pc, #344]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800627e:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628c:	494d      	ldr	r1, [pc, #308]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062a0:	4b48      	ldr	r3, [pc, #288]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	4945      	ldr	r1, [pc, #276]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062c2:	4b40      	ldr	r3, [pc, #256]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d0:	493c      	ldr	r1, [pc, #240]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062e4:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f2:	4934      	ldr	r1, [pc, #208]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d011      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006306:	4b2f      	ldr	r3, [pc, #188]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006314:	492b      	ldr	r1, [pc, #172]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006324:	d101      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006336:	2301      	movs	r3, #1
 8006338:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006346:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	491b      	ldr	r1, [pc, #108]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006368:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006378:	4912      	ldr	r1, [pc, #72]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800639c:	4909      	ldr	r1, [pc, #36]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00f      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	4986      	ldr	r1, [pc, #536]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063dc:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ec:	497d      	ldr	r1, [pc, #500]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d006      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 80d6 	beq.w	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006408:	4b76      	ldr	r3, [pc, #472]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a75      	ldr	r2, [pc, #468]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006414:	f7fd f99a 	bl	800374c <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800641c:	f7fd f996 	bl	800374c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	; 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e195      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800642e:	4b6d      	ldr	r3, [pc, #436]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11d      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800644e:	4b65      	ldr	r3, [pc, #404]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800645c:	4b61      	ldr	r3, [pc, #388]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006462:	0e1b      	lsrs	r3, r3, #24
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	019a      	lsls	r2, r3, #6
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	061b      	lsls	r3, r3, #24
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	071b      	lsls	r3, r3, #28
 8006482:	4958      	ldr	r1, [pc, #352]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d02e      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b4:	d129      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064b6:	4b4b      	ldr	r3, [pc, #300]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064c4:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ca:	0f1b      	lsrs	r3, r3, #28
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	019a      	lsls	r2, r3, #6
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	061b      	lsls	r3, r3, #24
 80064e4:	431a      	orrs	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	071b      	lsls	r3, r3, #28
 80064ea:	493e      	ldr	r1, [pc, #248]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064f2:	4b3c      	ldr	r3, [pc, #240]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f8:	f023 021f 	bic.w	r2, r3, #31
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	3b01      	subs	r3, #1
 8006502:	4938      	ldr	r1, [pc, #224]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01d      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006516:	4b33      	ldr	r3, [pc, #204]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006524:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652a:	0f1b      	lsrs	r3, r3, #28
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	019a      	lsls	r2, r3, #6
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	431a      	orrs	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	071b      	lsls	r3, r3, #28
 800654a:	4926      	ldr	r1, [pc, #152]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	019a      	lsls	r2, r3, #6
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	071b      	lsls	r3, r3, #28
 800657a:	491a      	ldr	r1, [pc, #104]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006582:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800658c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658e:	f7fd f8dd 	bl	800374c <HAL_GetTick>
 8006592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006596:	f7fd f8d9 	bl	800374c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	d901      	bls.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e0d8      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065a8:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	f040 80ce 	bne.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c8:	f7fd f8c0 	bl	800374c <HAL_GetTick>
 80065cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ce:	e00b      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065d0:	f7fd f8bc 	bl	800374c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	; 0x64
 80065dc:	d904      	bls.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0bb      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065e8:	4b5e      	ldr	r3, [pc, #376]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f4:	d0ec      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02e      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d12a      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800661e:	4b51      	ldr	r3, [pc, #324]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800662c:	4b4d      	ldr	r3, [pc, #308]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006632:	0f1b      	lsrs	r3, r3, #28
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	019a      	lsls	r2, r3, #6
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	061b      	lsls	r3, r3, #24
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	071b      	lsls	r3, r3, #28
 8006652:	4944      	ldr	r1, [pc, #272]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800665a:	4b42      	ldr	r3, [pc, #264]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800665c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006660:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	3b01      	subs	r3, #1
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	493d      	ldr	r1, [pc, #244]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d022      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006688:	d11d      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	0e1b      	lsrs	r3, r3, #24
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	0f1b      	lsrs	r3, r3, #28
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	019a      	lsls	r2, r3, #6
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	431a      	orrs	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	061b      	lsls	r3, r3, #24
 80066b8:	431a      	orrs	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	071b      	lsls	r3, r3, #28
 80066be:	4929      	ldr	r1, [pc, #164]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d028      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066d2:	4b24      	ldr	r3, [pc, #144]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	0c1b      	lsrs	r3, r3, #16
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	019a      	lsls	r2, r3, #6
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	431a      	orrs	r2, r3
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	4917      	ldr	r1, [pc, #92]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	4911      	ldr	r1, [pc, #68]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0e      	ldr	r2, [pc, #56]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006730:	f7fd f80c 	bl	800374c <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006738:	f7fd f808 	bl	800374c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e007      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006756:	d1ef      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800

08006768 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e01c      	b.n	80067b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	795b      	ldrb	r3, [r3, #5]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fb fd78 	bl	8002280 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0204 	orr.w	r2, r2, #4
 80067a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e09d      	b.n	800690a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d108      	bne.n	80067e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067de:	d009      	beq.n	80067f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
 80067e6:	e005      	b.n	80067f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb fd94 	bl	800233c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006834:	d902      	bls.n	800683c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e002      	b.n	8006842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800683c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800684a:	d007      	beq.n	800685c <HAL_SPI_Init+0xa0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006854:	d002      	beq.n	800685c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	ea42 0103 	orr.w	r1, r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f003 0204 	and.w	r2, r3, #4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068d8:	ea42 0103 	orr.w	r1, r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b088      	sub	sp, #32
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_SPI_Transmit+0x22>
 8006930:	2302      	movs	r3, #2
 8006932:	e158      	b.n	8006be6 <HAL_SPI_Transmit+0x2d4>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800693c:	f7fc ff06 	bl	800374c <HAL_GetTick>
 8006940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d002      	beq.n	8006958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006952:	2302      	movs	r3, #2
 8006954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006956:	e13d      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_SPI_Transmit+0x52>
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006968:	e134      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2203      	movs	r2, #3
 800696e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	88fa      	ldrh	r2, [r7, #6]
 8006988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	d10f      	bne.n	80069d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d007      	beq.n	80069f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069fc:	d94b      	bls.n	8006a96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_SPI_Transmit+0xfa>
 8006a06:	8afb      	ldrh	r3, [r7, #22]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d13e      	bne.n	8006a8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a30:	e02b      	b.n	8006a8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d112      	bne.n	8006a66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a64:	e011      	b.n	8006a8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a66:	f7fc fe71 	bl	800374c <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d803      	bhi.n	8006a7e <HAL_SPI_Transmit+0x16c>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x172>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a88:	e0a4      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ce      	bne.n	8006a32 <HAL_SPI_Transmit+0x120>
 8006a94:	e07c      	b.n	8006b90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Transmit+0x192>
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d170      	bne.n	8006b86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d912      	bls.n	8006ad4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	881a      	ldrh	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b02      	subs	r3, #2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ad2:	e058      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006afa:	e044      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d12b      	bne.n	8006b62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d912      	bls.n	8006b3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b02      	subs	r3, #2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b38:	e025      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b60:	e011      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b62:	f7fc fdf3 	bl	800374c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d803      	bhi.n	8006b7a <HAL_SPI_Transmit+0x268>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x26e>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b84:	e026      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1b5      	bne.n	8006afc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f945 	bl	8006e24 <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e000      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c00:	f7fc fda4 	bl	800374c <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c10:	f7fc fd9c 	bl	800374c <HAL_GetTick>
 8006c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c16:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	015b      	lsls	r3, r3, #5
 8006c1c:	0d1b      	lsrs	r3, r3, #20
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	fb02 f303 	mul.w	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c26:	e054      	b.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d050      	beq.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c30:	f7fc fd8c 	bl	800374c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d902      	bls.n	8006c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d13d      	bne.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5e:	d111      	bne.n	8006c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c68:	d004      	beq.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c72:	d107      	bne.n	8006c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d10f      	bne.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e017      	b.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	2300      	movne	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d19b      	bne.n	8006c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000010 	.word	0x20000010

08006d00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d0e:	f7fc fd1d 	bl	800374c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d1e:	f7fc fd15 	bl	800374c <HAL_GetTick>
 8006d22:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d24:	4b3e      	ldr	r3, [pc, #248]	; (8006e20 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	00da      	lsls	r2, r3, #3
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	0d1b      	lsrs	r3, r3, #20
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d3c:	e062      	b.n	8006e04 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d44:	d109      	bne.n	8006d5a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006d58:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d050      	beq.n	8006e04 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d62:	f7fc fcf3 	bl	800374c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d902      	bls.n	8006d78 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d13d      	bne.n	8006df4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d90:	d111      	bne.n	8006db6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9a:	d004      	beq.n	8006da6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da4:	d107      	bne.n	8006db6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbe:	d10f      	bne.n	8006de0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e010      	b.n	8006e16 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d194      	bne.n	8006d3e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000010 	.word	0x20000010

08006e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff ff5f 	bl	8006d00 <SPI_WaitFifoStateUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	f043 0220 	orr.w	r2, r3, #32
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e027      	b.n	8006ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff fec4 	bl	8006bf0 <SPI_WaitFlagStateUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e72:	f043 0220 	orr.w	r2, r3, #32
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e014      	b.n	8006ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff ff38 	bl	8006d00 <SPI_WaitFifoStateUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e000      	b.n	8006ea8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e049      	b.n	8006f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb fcde 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f000 fd32 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e054      	b.n	8007022 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_TIM_Base_Start_IT+0xd4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	; (800703c <HAL_TIM_Base_Start_IT+0xdc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	; (8007040 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <HAL_TIM_Base_Start_IT+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d115      	bne.n	800700c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_TIM_Base_Start_IT+0xec>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40010000 	.word	0x40010000
 8007034:	40000400 	.word	0x40000400
 8007038:	40000800 	.word	0x40000800
 800703c:	40000c00 	.word	0x40000c00
 8007040:	40010400 	.word	0x40010400
 8007044:	40014000 	.word	0x40014000
 8007048:	40001800 	.word	0x40001800
 800704c:	00010007 	.word	0x00010007

08007050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e049      	b.n	80070f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f841 	bl	80070fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fc62 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <HAL_TIM_PWM_Start+0x24>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e03c      	b.n	80071b2 <HAL_TIM_PWM_Start+0x9e>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b04      	cmp	r3, #4
 800713c:	d109      	bne.n	8007152 <HAL_TIM_PWM_Start+0x3e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	bf14      	ite	ne
 800714a:	2301      	movne	r3, #1
 800714c:	2300      	moveq	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	e02f      	b.n	80071b2 <HAL_TIM_PWM_Start+0x9e>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d109      	bne.n	800716c <HAL_TIM_PWM_Start+0x58>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	e022      	b.n	80071b2 <HAL_TIM_PWM_Start+0x9e>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d109      	bne.n	8007186 <HAL_TIM_PWM_Start+0x72>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	e015      	b.n	80071b2 <HAL_TIM_PWM_Start+0x9e>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b10      	cmp	r3, #16
 800718a:	d109      	bne.n	80071a0 <HAL_TIM_PWM_Start+0x8c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	bf14      	ite	ne
 8007198:	2301      	movne	r3, #1
 800719a:	2300      	moveq	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	e008      	b.n	80071b2 <HAL_TIM_PWM_Start+0x9e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	bf14      	ite	ne
 80071ac:	2301      	movne	r3, #1
 80071ae:	2300      	moveq	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e092      	b.n	80072e0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <HAL_TIM_PWM_Start+0xb6>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c8:	e023      	b.n	8007212 <HAL_TIM_PWM_Start+0xfe>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Start+0xc6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d8:	e01b      	b.n	8007212 <HAL_TIM_PWM_Start+0xfe>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d104      	bne.n	80071ea <HAL_TIM_PWM_Start+0xd6>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e8:	e013      	b.n	8007212 <HAL_TIM_PWM_Start+0xfe>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Start+0xe6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f8:	e00b      	b.n	8007212 <HAL_TIM_PWM_Start+0xfe>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Start+0xf6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007208:	e003      	b.n	8007212 <HAL_TIM_PWM_Start+0xfe>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 ff34 	bl	8008088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a30      	ldr	r2, [pc, #192]	; (80072e8 <HAL_TIM_PWM_Start+0x1d4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIM_PWM_Start+0x120>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2f      	ldr	r2, [pc, #188]	; (80072ec <HAL_TIM_PWM_Start+0x1d8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d101      	bne.n	8007238 <HAL_TIM_PWM_Start+0x124>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <HAL_TIM_PWM_Start+0x126>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800724c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a25      	ldr	r2, [pc, #148]	; (80072e8 <HAL_TIM_PWM_Start+0x1d4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d022      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d01d      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <HAL_TIM_PWM_Start+0x1dc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d018      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a20      	ldr	r2, [pc, #128]	; (80072f4 <HAL_TIM_PWM_Start+0x1e0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <HAL_TIM_PWM_Start+0x1e4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a19      	ldr	r2, [pc, #100]	; (80072ec <HAL_TIM_PWM_Start+0x1d8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <HAL_TIM_PWM_Start+0x1e8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIM_PWM_Start+0x18a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a19      	ldr	r2, [pc, #100]	; (8007300 <HAL_TIM_PWM_Start+0x1ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d115      	bne.n	80072ca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	4b17      	ldr	r3, [pc, #92]	; (8007304 <HAL_TIM_PWM_Start+0x1f0>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d015      	beq.n	80072dc <HAL_TIM_PWM_Start+0x1c8>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b6:	d011      	beq.n	80072dc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c8:	e008      	b.n	80072dc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0201 	orr.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	e000      	b.n	80072de <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800
 8007304:	00010007 	.word	0x00010007

08007308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d122      	bne.n	8007364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d11b      	bne.n	8007364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0202 	mvn.w	r2, #2
 8007334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fae6 	bl	800791c <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fad8 	bl	8007908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fae9 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b04      	cmp	r3, #4
 8007370:	d122      	bne.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b04      	cmp	r3, #4
 800737e:	d11b      	bne.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0204 	mvn.w	r2, #4
 8007388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fabc 	bl	800791c <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 faae 	bl	8007908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fabf 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d122      	bne.n	800740c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d11b      	bne.n	800740c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0208 	mvn.w	r2, #8
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2204      	movs	r2, #4
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa92 	bl	800791c <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa84 	bl	8007908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa95 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b10      	cmp	r3, #16
 8007418:	d122      	bne.n	8007460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b10      	cmp	r3, #16
 8007426:	d11b      	bne.n	8007460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0210 	mvn.w	r2, #16
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2208      	movs	r2, #8
 8007436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa68 	bl	800791c <HAL_TIM_IC_CaptureCallback>
 800744c:	e005      	b.n	800745a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa5a 	bl	8007908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fa6b 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10e      	bne.n	800748c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d107      	bne.n	800748c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0201 	mvn.w	r2, #1
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa34 	bl	80078f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d10e      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b80      	cmp	r3, #128	; 0x80
 80074a6:	d107      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fea6 	bl	8008204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c6:	d10e      	bne.n	80074e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d107      	bne.n	80074e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fe99 	bl	8008218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d10e      	bne.n	8007512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d107      	bne.n	8007512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa19 	bl	8007944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b20      	cmp	r3, #32
 800751e:	d10e      	bne.n	800753e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b20      	cmp	r3, #32
 800752c:	d107      	bne.n	800753e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f06f 0220 	mvn.w	r2, #32
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fe59 	bl	80081f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800755e:	2302      	movs	r3, #2
 8007560:	e0fd      	b.n	800775e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b14      	cmp	r3, #20
 800756e:	f200 80f0 	bhi.w	8007752 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	080075cd 	.word	0x080075cd
 800757c:	08007753 	.word	0x08007753
 8007580:	08007753 	.word	0x08007753
 8007584:	08007753 	.word	0x08007753
 8007588:	0800760d 	.word	0x0800760d
 800758c:	08007753 	.word	0x08007753
 8007590:	08007753 	.word	0x08007753
 8007594:	08007753 	.word	0x08007753
 8007598:	0800764f 	.word	0x0800764f
 800759c:	08007753 	.word	0x08007753
 80075a0:	08007753 	.word	0x08007753
 80075a4:	08007753 	.word	0x08007753
 80075a8:	0800768f 	.word	0x0800768f
 80075ac:	08007753 	.word	0x08007753
 80075b0:	08007753 	.word	0x08007753
 80075b4:	08007753 	.word	0x08007753
 80075b8:	080076d1 	.word	0x080076d1
 80075bc:	08007753 	.word	0x08007753
 80075c0:	08007753 	.word	0x08007753
 80075c4:	08007753 	.word	0x08007753
 80075c8:	08007711 	.word	0x08007711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fa60 	bl	8007a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0208 	orr.w	r2, r2, #8
 80075e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0204 	bic.w	r2, r2, #4
 80075f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6999      	ldr	r1, [r3, #24]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	619a      	str	r2, [r3, #24]
      break;
 800760a:	e0a3      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fab2 	bl	8007b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	021a      	lsls	r2, r3, #8
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	619a      	str	r2, [r3, #24]
      break;
 800764c:	e082      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fb09 	bl	8007c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0208 	orr.w	r2, r2, #8
 8007668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0204 	bic.w	r2, r2, #4
 8007678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69d9      	ldr	r1, [r3, #28]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	61da      	str	r2, [r3, #28]
      break;
 800768c:	e062      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fb5f 	bl	8007d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	021a      	lsls	r2, r3, #8
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	61da      	str	r2, [r3, #28]
      break;
 80076ce:	e041      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fb96 	bl	8007e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0208 	orr.w	r2, r2, #8
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800770e:	e021      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fbc8 	bl	8007eac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	021a      	lsls	r2, r3, #8
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007750:	e000      	b.n	8007754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop

08007768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_TIM_ConfigClockSource+0x18>
 800777c:	2302      	movs	r3, #2
 800777e:	e0b3      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x180>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4b55      	ldr	r3, [pc, #340]	; (80078f0 <HAL_TIM_ConfigClockSource+0x188>)
 800779c:	4013      	ands	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d03e      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0xd0>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077be:	f200 8087 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	f000 8085 	beq.w	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d87f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077d0:	2b70      	cmp	r3, #112	; 0x70
 80077d2:	d01a      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xa2>
 80077d4:	2b70      	cmp	r3, #112	; 0x70
 80077d6:	d87b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077d8:	2b60      	cmp	r3, #96	; 0x60
 80077da:	d050      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x116>
 80077dc:	2b60      	cmp	r3, #96	; 0x60
 80077de:	d877      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077e0:	2b50      	cmp	r3, #80	; 0x50
 80077e2:	d03c      	beq.n	800785e <HAL_TIM_ConfigClockSource+0xf6>
 80077e4:	2b50      	cmp	r3, #80	; 0x50
 80077e6:	d873      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d058      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x136>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d86f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	d064      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x156>
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d86b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d060      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x156>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d867      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d05c      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x156>
 8007804:	2b10      	cmp	r3, #16
 8007806:	d05a      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007808:	e062      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f000 fc15 	bl	8008048 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800782c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	609a      	str	r2, [r3, #8]
      break;
 8007836:	e04e      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6899      	ldr	r1, [r3, #8]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f000 fbfe 	bl	8008048 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785a:	609a      	str	r2, [r3, #8]
      break;
 800785c:	e03b      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	f000 fb72 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2150      	movs	r1, #80	; 0x50
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fbcb 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 800787c:	e02b      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6859      	ldr	r1, [r3, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	f000 fb91 	bl	8007fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2160      	movs	r1, #96	; 0x60
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fbbb 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 800789c:	e01b      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f000 fb52 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2140      	movs	r1, #64	; 0x40
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fbab 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 80078bc:	e00b      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fba2 	bl	8008012 <TIM_ITRx_SetConfig>
        break;
 80078ce:	e002      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078d0:	bf00      	nop
 80078d2:	e000      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	fffeff88 	.word	0xfffeff88

080078f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a40      	ldr	r2, [pc, #256]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007976:	d00f      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a3d      	ldr	r2, [pc, #244]	; (8007a70 <TIM_Base_SetConfig+0x118>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00b      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a3c      	ldr	r2, [pc, #240]	; (8007a74 <TIM_Base_SetConfig+0x11c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a3b      	ldr	r2, [pc, #236]	; (8007a78 <TIM_Base_SetConfig+0x120>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a3a      	ldr	r2, [pc, #232]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d108      	bne.n	80079aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d02b      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d027      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2c      	ldr	r2, [pc, #176]	; (8007a70 <TIM_Base_SetConfig+0x118>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d023      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a2b      	ldr	r2, [pc, #172]	; (8007a74 <TIM_Base_SetConfig+0x11c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d01f      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <TIM_Base_SetConfig+0x120>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01b      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a29      	ldr	r2, [pc, #164]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d017      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a28      	ldr	r2, [pc, #160]	; (8007a80 <TIM_Base_SetConfig+0x128>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a27      	ldr	r2, [pc, #156]	; (8007a84 <TIM_Base_SetConfig+0x12c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a26      	ldr	r2, [pc, #152]	; (8007a88 <TIM_Base_SetConfig+0x130>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a25      	ldr	r2, [pc, #148]	; (8007a8c <TIM_Base_SetConfig+0x134>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a24      	ldr	r2, [pc, #144]	; (8007a90 <TIM_Base_SetConfig+0x138>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a23      	ldr	r2, [pc, #140]	; (8007a94 <TIM_Base_SetConfig+0x13c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d108      	bne.n	8007a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0xf8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d103      	bne.n	8007a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	615a      	str	r2, [r3, #20]
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40010000 	.word	0x40010000
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40000800 	.word	0x40000800
 8007a78:	40000c00 	.word	0x40000c00
 8007a7c:	40010400 	.word	0x40010400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800
 8007a8c:	40001800 	.word	0x40001800
 8007a90:	40001c00 	.word	0x40001c00
 8007a94:	40002000 	.word	0x40002000

08007a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4b2b      	ldr	r3, [pc, #172]	; (8007b70 <TIM_OC1_SetConfig+0xd8>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f023 0302 	bic.w	r3, r3, #2
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <TIM_OC1_SetConfig+0xdc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_OC1_SetConfig+0x64>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a20      	ldr	r2, [pc, #128]	; (8007b78 <TIM_OC1_SetConfig+0xe0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10c      	bne.n	8007b16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0308 	bic.w	r3, r3, #8
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f023 0304 	bic.w	r3, r3, #4
 8007b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <TIM_OC1_SetConfig+0xdc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <TIM_OC1_SetConfig+0x8e>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <TIM_OC1_SetConfig+0xe0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d111      	bne.n	8007b4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	621a      	str	r2, [r3, #32]
}
 8007b64:	bf00      	nop
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	fffeff8f 	.word	0xfffeff8f
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0210 	bic.w	r2, r3, #16
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4b2e      	ldr	r3, [pc, #184]	; (8007c60 <TIM_OC2_SetConfig+0xe4>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0320 	bic.w	r3, r3, #32
 8007bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC2_SetConfig+0x68>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <TIM_OC2_SetConfig+0xec>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d10d      	bne.n	8007c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a18      	ldr	r2, [pc, #96]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC2_SetConfig+0x94>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <TIM_OC2_SetConfig+0xec>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d113      	bne.n	8007c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	feff8fff 	.word	0xfeff8fff
 8007c64:	40010000 	.word	0x40010000
 8007c68:	40010400 	.word	0x40010400

08007c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4b2d      	ldr	r3, [pc, #180]	; (8007d4c <TIM_OC3_SetConfig+0xe0>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0303 	bic.w	r3, r3, #3
 8007ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <TIM_OC3_SetConfig+0xe4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d003      	beq.n	8007cd2 <TIM_OC3_SetConfig+0x66>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a21      	ldr	r2, [pc, #132]	; (8007d54 <TIM_OC3_SetConfig+0xe8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d10d      	bne.n	8007cee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a17      	ldr	r2, [pc, #92]	; (8007d50 <TIM_OC3_SetConfig+0xe4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC3_SetConfig+0x92>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a16      	ldr	r2, [pc, #88]	; (8007d54 <TIM_OC3_SetConfig+0xe8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d113      	bne.n	8007d26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	621a      	str	r2, [r3, #32]
}
 8007d40:	bf00      	nop
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	fffeff8f 	.word	0xfffeff8f
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40010400 	.word	0x40010400

08007d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <TIM_OC4_SetConfig+0xa4>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	031b      	lsls	r3, r3, #12
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <TIM_OC4_SetConfig+0xa8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x68>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <TIM_OC4_SetConfig+0xac>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	feff8fff 	.word	0xfeff8fff
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40010400 	.word	0x40010400

08007e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <TIM_OC5_SetConfig+0x98>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a12      	ldr	r2, [pc, #72]	; (8007ea4 <TIM_OC5_SetConfig+0x9c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_OC5_SetConfig+0x5e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <TIM_OC5_SetConfig+0xa0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d109      	bne.n	8007e7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	621a      	str	r2, [r3, #32]
}
 8007e94:	bf00      	nop
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	fffeff8f 	.word	0xfffeff8f
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40010400 	.word	0x40010400

08007eac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <TIM_OC6_SetConfig+0x9c>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	051b      	lsls	r3, r3, #20
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a13      	ldr	r2, [pc, #76]	; (8007f4c <TIM_OC6_SetConfig+0xa0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_OC6_SetConfig+0x60>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <TIM_OC6_SetConfig+0xa4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d109      	bne.n	8007f20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	029b      	lsls	r3, r3, #10
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	621a      	str	r2, [r3, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	feff8fff 	.word	0xfeff8fff
 8007f4c:	40010000 	.word	0x40010000
 8007f50:	40010400 	.word	0x40010400

08007f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 030a 	bic.w	r3, r3, #10
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0210 	bic.w	r2, r3, #16
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	f043 0307 	orr.w	r3, r3, #7
 8008034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	021a      	lsls	r2, r3, #8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	431a      	orrs	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	609a      	str	r2, [r3, #8]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2201      	movs	r2, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	43db      	mvns	r3, r3
 80080aa:	401a      	ands	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1a      	ldr	r2, [r3, #32]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	fa01 f303 	lsl.w	r3, r1, r3
 80080c0:	431a      	orrs	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e06d      	b.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a30      	ldr	r2, [pc, #192]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a2f      	ldr	r2, [pc, #188]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d108      	bne.n	8008132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d022      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815e:	d01d      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1d      	ldr	r2, [pc, #116]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d018      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1c      	ldr	r2, [pc, #112]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a1a      	ldr	r2, [pc, #104]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00e      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a15      	ldr	r2, [pc, #84]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a16      	ldr	r2, [pc, #88]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a15      	ldr	r2, [pc, #84]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d10c      	bne.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800
 80081e4:	40000c00 	.word	0x40000c00
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40001800 	.word	0x40001800

080081f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e040      	b.n	80082c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7fa fc0e 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2224      	movs	r2, #36	; 0x24
 8008258:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f8c0 	bl	80083f0 <UART_SetConfig>
 8008270:	4603      	mov	r3, r0
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e022      	b.n	80082c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb16 	bl	80088b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fb9d 	bl	80089f8 <UART_CheckIdleState>
 80082be:	4603      	mov	r3, r0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 8081 	bne.w	80083e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_UART_Transmit+0x26>
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e079      	b.n	80083e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_UART_Transmit+0x38>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e072      	b.n	80083e6 <HAL_UART_Transmit+0x11e>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008316:	f7fb fa19 	bl	800374c <HAL_GetTick>
 800831a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008334:	d108      	bne.n	8008348 <HAL_UART_Transmit+0x80>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d104      	bne.n	8008348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	e003      	b.n	8008350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008358:	e02c      	b.n	80083b4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	2180      	movs	r1, #128	; 0x80
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fb90 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e038      	b.n	80083e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	3302      	adds	r3, #2
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	e007      	b.n	80083a2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	3301      	adds	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1cc      	bne.n	800835a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2140      	movs	r1, #64	; 0x40
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fb5d 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e005      	b.n	80083e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e000      	b.n	80083e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80083e4:	2302      	movs	r3, #2
  }
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3720      	adds	r7, #32
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4ba7      	ldr	r3, [pc, #668]	; (80086b8 <UART_SetConfig+0x2c8>)
 800841c:	4013      	ands	r3, r2
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	6979      	ldr	r1, [r7, #20]
 8008424:	430b      	orrs	r3, r1
 8008426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	430a      	orrs	r2, r1
 8008460:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a95      	ldr	r2, [pc, #596]	; (80086bc <UART_SetConfig+0x2cc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d120      	bne.n	80084ae <UART_SetConfig+0xbe>
 800846c:	4b94      	ldr	r3, [pc, #592]	; (80086c0 <UART_SetConfig+0x2d0>)
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d816      	bhi.n	80084a8 <UART_SetConfig+0xb8>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x90>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	0800849d 	.word	0x0800849d
 8008488:	08008497 	.word	0x08008497
 800848c:	080084a3 	.word	0x080084a3
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e14f      	b.n	8008736 <UART_SetConfig+0x346>
 8008496:	2302      	movs	r3, #2
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e14c      	b.n	8008736 <UART_SetConfig+0x346>
 800849c:	2304      	movs	r3, #4
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e149      	b.n	8008736 <UART_SetConfig+0x346>
 80084a2:	2308      	movs	r3, #8
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e146      	b.n	8008736 <UART_SetConfig+0x346>
 80084a8:	2310      	movs	r3, #16
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e143      	b.n	8008736 <UART_SetConfig+0x346>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a84      	ldr	r2, [pc, #528]	; (80086c4 <UART_SetConfig+0x2d4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d132      	bne.n	800851e <UART_SetConfig+0x12e>
 80084b8:	4b81      	ldr	r3, [pc, #516]	; (80086c0 <UART_SetConfig+0x2d0>)
 80084ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084be:	f003 030c 	and.w	r3, r3, #12
 80084c2:	2b0c      	cmp	r3, #12
 80084c4:	d828      	bhi.n	8008518 <UART_SetConfig+0x128>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0xdc>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	08008501 	.word	0x08008501
 80084d0:	08008519 	.word	0x08008519
 80084d4:	08008519 	.word	0x08008519
 80084d8:	08008519 	.word	0x08008519
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	08008519 	.word	0x08008519
 80084e4:	08008519 	.word	0x08008519
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008507 	.word	0x08008507
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008513 	.word	0x08008513
 8008500:	2300      	movs	r3, #0
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e117      	b.n	8008736 <UART_SetConfig+0x346>
 8008506:	2302      	movs	r3, #2
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e114      	b.n	8008736 <UART_SetConfig+0x346>
 800850c:	2304      	movs	r3, #4
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	e111      	b.n	8008736 <UART_SetConfig+0x346>
 8008512:	2308      	movs	r3, #8
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e10e      	b.n	8008736 <UART_SetConfig+0x346>
 8008518:	2310      	movs	r3, #16
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e10b      	b.n	8008736 <UART_SetConfig+0x346>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a69      	ldr	r2, [pc, #420]	; (80086c8 <UART_SetConfig+0x2d8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d120      	bne.n	800856a <UART_SetConfig+0x17a>
 8008528:	4b65      	ldr	r3, [pc, #404]	; (80086c0 <UART_SetConfig+0x2d0>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008532:	2b30      	cmp	r3, #48	; 0x30
 8008534:	d013      	beq.n	800855e <UART_SetConfig+0x16e>
 8008536:	2b30      	cmp	r3, #48	; 0x30
 8008538:	d814      	bhi.n	8008564 <UART_SetConfig+0x174>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d009      	beq.n	8008552 <UART_SetConfig+0x162>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d810      	bhi.n	8008564 <UART_SetConfig+0x174>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <UART_SetConfig+0x15c>
 8008546:	2b10      	cmp	r3, #16
 8008548:	d006      	beq.n	8008558 <UART_SetConfig+0x168>
 800854a:	e00b      	b.n	8008564 <UART_SetConfig+0x174>
 800854c:	2300      	movs	r3, #0
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e0f1      	b.n	8008736 <UART_SetConfig+0x346>
 8008552:	2302      	movs	r3, #2
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e0ee      	b.n	8008736 <UART_SetConfig+0x346>
 8008558:	2304      	movs	r3, #4
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e0eb      	b.n	8008736 <UART_SetConfig+0x346>
 800855e:	2308      	movs	r3, #8
 8008560:	77fb      	strb	r3, [r7, #31]
 8008562:	e0e8      	b.n	8008736 <UART_SetConfig+0x346>
 8008564:	2310      	movs	r3, #16
 8008566:	77fb      	strb	r3, [r7, #31]
 8008568:	e0e5      	b.n	8008736 <UART_SetConfig+0x346>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a57      	ldr	r2, [pc, #348]	; (80086cc <UART_SetConfig+0x2dc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d120      	bne.n	80085b6 <UART_SetConfig+0x1c6>
 8008574:	4b52      	ldr	r3, [pc, #328]	; (80086c0 <UART_SetConfig+0x2d0>)
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800857e:	2bc0      	cmp	r3, #192	; 0xc0
 8008580:	d013      	beq.n	80085aa <UART_SetConfig+0x1ba>
 8008582:	2bc0      	cmp	r3, #192	; 0xc0
 8008584:	d814      	bhi.n	80085b0 <UART_SetConfig+0x1c0>
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d009      	beq.n	800859e <UART_SetConfig+0x1ae>
 800858a:	2b80      	cmp	r3, #128	; 0x80
 800858c:	d810      	bhi.n	80085b0 <UART_SetConfig+0x1c0>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <UART_SetConfig+0x1a8>
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d006      	beq.n	80085a4 <UART_SetConfig+0x1b4>
 8008596:	e00b      	b.n	80085b0 <UART_SetConfig+0x1c0>
 8008598:	2300      	movs	r3, #0
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e0cb      	b.n	8008736 <UART_SetConfig+0x346>
 800859e:	2302      	movs	r3, #2
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e0c8      	b.n	8008736 <UART_SetConfig+0x346>
 80085a4:	2304      	movs	r3, #4
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	e0c5      	b.n	8008736 <UART_SetConfig+0x346>
 80085aa:	2308      	movs	r3, #8
 80085ac:	77fb      	strb	r3, [r7, #31]
 80085ae:	e0c2      	b.n	8008736 <UART_SetConfig+0x346>
 80085b0:	2310      	movs	r3, #16
 80085b2:	77fb      	strb	r3, [r7, #31]
 80085b4:	e0bf      	b.n	8008736 <UART_SetConfig+0x346>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a45      	ldr	r2, [pc, #276]	; (80086d0 <UART_SetConfig+0x2e0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d125      	bne.n	800860c <UART_SetConfig+0x21c>
 80085c0:	4b3f      	ldr	r3, [pc, #252]	; (80086c0 <UART_SetConfig+0x2d0>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ce:	d017      	beq.n	8008600 <UART_SetConfig+0x210>
 80085d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085d4:	d817      	bhi.n	8008606 <UART_SetConfig+0x216>
 80085d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085da:	d00b      	beq.n	80085f4 <UART_SetConfig+0x204>
 80085dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e0:	d811      	bhi.n	8008606 <UART_SetConfig+0x216>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <UART_SetConfig+0x1fe>
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ea:	d006      	beq.n	80085fa <UART_SetConfig+0x20a>
 80085ec:	e00b      	b.n	8008606 <UART_SetConfig+0x216>
 80085ee:	2300      	movs	r3, #0
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e0a0      	b.n	8008736 <UART_SetConfig+0x346>
 80085f4:	2302      	movs	r3, #2
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e09d      	b.n	8008736 <UART_SetConfig+0x346>
 80085fa:	2304      	movs	r3, #4
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e09a      	b.n	8008736 <UART_SetConfig+0x346>
 8008600:	2308      	movs	r3, #8
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e097      	b.n	8008736 <UART_SetConfig+0x346>
 8008606:	2310      	movs	r3, #16
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e094      	b.n	8008736 <UART_SetConfig+0x346>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a30      	ldr	r2, [pc, #192]	; (80086d4 <UART_SetConfig+0x2e4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d125      	bne.n	8008662 <UART_SetConfig+0x272>
 8008616:	4b2a      	ldr	r3, [pc, #168]	; (80086c0 <UART_SetConfig+0x2d0>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008624:	d017      	beq.n	8008656 <UART_SetConfig+0x266>
 8008626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800862a:	d817      	bhi.n	800865c <UART_SetConfig+0x26c>
 800862c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008630:	d00b      	beq.n	800864a <UART_SetConfig+0x25a>
 8008632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008636:	d811      	bhi.n	800865c <UART_SetConfig+0x26c>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <UART_SetConfig+0x254>
 800863c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008640:	d006      	beq.n	8008650 <UART_SetConfig+0x260>
 8008642:	e00b      	b.n	800865c <UART_SetConfig+0x26c>
 8008644:	2301      	movs	r3, #1
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	e075      	b.n	8008736 <UART_SetConfig+0x346>
 800864a:	2302      	movs	r3, #2
 800864c:	77fb      	strb	r3, [r7, #31]
 800864e:	e072      	b.n	8008736 <UART_SetConfig+0x346>
 8008650:	2304      	movs	r3, #4
 8008652:	77fb      	strb	r3, [r7, #31]
 8008654:	e06f      	b.n	8008736 <UART_SetConfig+0x346>
 8008656:	2308      	movs	r3, #8
 8008658:	77fb      	strb	r3, [r7, #31]
 800865a:	e06c      	b.n	8008736 <UART_SetConfig+0x346>
 800865c:	2310      	movs	r3, #16
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e069      	b.n	8008736 <UART_SetConfig+0x346>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1c      	ldr	r2, [pc, #112]	; (80086d8 <UART_SetConfig+0x2e8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d137      	bne.n	80086dc <UART_SetConfig+0x2ec>
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <UART_SetConfig+0x2d0>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800867a:	d017      	beq.n	80086ac <UART_SetConfig+0x2bc>
 800867c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008680:	d817      	bhi.n	80086b2 <UART_SetConfig+0x2c2>
 8008682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008686:	d00b      	beq.n	80086a0 <UART_SetConfig+0x2b0>
 8008688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868c:	d811      	bhi.n	80086b2 <UART_SetConfig+0x2c2>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <UART_SetConfig+0x2aa>
 8008692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008696:	d006      	beq.n	80086a6 <UART_SetConfig+0x2b6>
 8008698:	e00b      	b.n	80086b2 <UART_SetConfig+0x2c2>
 800869a:	2300      	movs	r3, #0
 800869c:	77fb      	strb	r3, [r7, #31]
 800869e:	e04a      	b.n	8008736 <UART_SetConfig+0x346>
 80086a0:	2302      	movs	r3, #2
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	e047      	b.n	8008736 <UART_SetConfig+0x346>
 80086a6:	2304      	movs	r3, #4
 80086a8:	77fb      	strb	r3, [r7, #31]
 80086aa:	e044      	b.n	8008736 <UART_SetConfig+0x346>
 80086ac:	2308      	movs	r3, #8
 80086ae:	77fb      	strb	r3, [r7, #31]
 80086b0:	e041      	b.n	8008736 <UART_SetConfig+0x346>
 80086b2:	2310      	movs	r3, #16
 80086b4:	77fb      	strb	r3, [r7, #31]
 80086b6:	e03e      	b.n	8008736 <UART_SetConfig+0x346>
 80086b8:	efff69f3 	.word	0xefff69f3
 80086bc:	40011000 	.word	0x40011000
 80086c0:	40023800 	.word	0x40023800
 80086c4:	40004400 	.word	0x40004400
 80086c8:	40004800 	.word	0x40004800
 80086cc:	40004c00 	.word	0x40004c00
 80086d0:	40005000 	.word	0x40005000
 80086d4:	40011400 	.word	0x40011400
 80086d8:	40007800 	.word	0x40007800
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a71      	ldr	r2, [pc, #452]	; (80088a8 <UART_SetConfig+0x4b8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d125      	bne.n	8008732 <UART_SetConfig+0x342>
 80086e6:	4b71      	ldr	r3, [pc, #452]	; (80088ac <UART_SetConfig+0x4bc>)
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086f4:	d017      	beq.n	8008726 <UART_SetConfig+0x336>
 80086f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086fa:	d817      	bhi.n	800872c <UART_SetConfig+0x33c>
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008700:	d00b      	beq.n	800871a <UART_SetConfig+0x32a>
 8008702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008706:	d811      	bhi.n	800872c <UART_SetConfig+0x33c>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <UART_SetConfig+0x324>
 800870c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008710:	d006      	beq.n	8008720 <UART_SetConfig+0x330>
 8008712:	e00b      	b.n	800872c <UART_SetConfig+0x33c>
 8008714:	2300      	movs	r3, #0
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e00d      	b.n	8008736 <UART_SetConfig+0x346>
 800871a:	2302      	movs	r3, #2
 800871c:	77fb      	strb	r3, [r7, #31]
 800871e:	e00a      	b.n	8008736 <UART_SetConfig+0x346>
 8008720:	2304      	movs	r3, #4
 8008722:	77fb      	strb	r3, [r7, #31]
 8008724:	e007      	b.n	8008736 <UART_SetConfig+0x346>
 8008726:	2308      	movs	r3, #8
 8008728:	77fb      	strb	r3, [r7, #31]
 800872a:	e004      	b.n	8008736 <UART_SetConfig+0x346>
 800872c:	2310      	movs	r3, #16
 800872e:	77fb      	strb	r3, [r7, #31]
 8008730:	e001      	b.n	8008736 <UART_SetConfig+0x346>
 8008732:	2310      	movs	r3, #16
 8008734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873e:	d15b      	bne.n	80087f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008740:	7ffb      	ldrb	r3, [r7, #31]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d827      	bhi.n	8008796 <UART_SetConfig+0x3a6>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x35c>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008771 	.word	0x08008771
 8008750:	08008779 	.word	0x08008779
 8008754:	08008781 	.word	0x08008781
 8008758:	08008797 	.word	0x08008797
 800875c:	08008787 	.word	0x08008787
 8008760:	08008797 	.word	0x08008797
 8008764:	08008797 	.word	0x08008797
 8008768:	08008797 	.word	0x08008797
 800876c:	0800878f 	.word	0x0800878f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008770:	f7fd fbaa 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 8008774:	61b8      	str	r0, [r7, #24]
        break;
 8008776:	e013      	b.n	80087a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008778:	f7fd fbba 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 800877c:	61b8      	str	r0, [r7, #24]
        break;
 800877e:	e00f      	b.n	80087a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008780:	4b4b      	ldr	r3, [pc, #300]	; (80088b0 <UART_SetConfig+0x4c0>)
 8008782:	61bb      	str	r3, [r7, #24]
        break;
 8008784:	e00c      	b.n	80087a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008786:	f7fd fab1 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 800878a:	61b8      	str	r0, [r7, #24]
        break;
 800878c:	e008      	b.n	80087a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e004      	b.n	80087a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	77bb      	strb	r3, [r7, #30]
        break;
 800879e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d074      	beq.n	8008890 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	005a      	lsls	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b0f      	cmp	r3, #15
 80087c2:	d916      	bls.n	80087f2 <UART_SetConfig+0x402>
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ca:	d212      	bcs.n	80087f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f023 030f 	bic.w	r3, r3, #15
 80087d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	89fb      	ldrh	r3, [r7, #14]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	89fa      	ldrh	r2, [r7, #14]
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	e04e      	b.n	8008890 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	77bb      	strb	r3, [r7, #30]
 80087f6:	e04b      	b.n	8008890 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087f8:	7ffb      	ldrb	r3, [r7, #31]
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d827      	bhi.n	800884e <UART_SetConfig+0x45e>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <UART_SetConfig+0x414>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008829 	.word	0x08008829
 8008808:	08008831 	.word	0x08008831
 800880c:	08008839 	.word	0x08008839
 8008810:	0800884f 	.word	0x0800884f
 8008814:	0800883f 	.word	0x0800883f
 8008818:	0800884f 	.word	0x0800884f
 800881c:	0800884f 	.word	0x0800884f
 8008820:	0800884f 	.word	0x0800884f
 8008824:	08008847 	.word	0x08008847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008828:	f7fd fb4e 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 800882c:	61b8      	str	r0, [r7, #24]
        break;
 800882e:	e013      	b.n	8008858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008830:	f7fd fb5e 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 8008834:	61b8      	str	r0, [r7, #24]
        break;
 8008836:	e00f      	b.n	8008858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <UART_SetConfig+0x4c0>)
 800883a:	61bb      	str	r3, [r7, #24]
        break;
 800883c:	e00c      	b.n	8008858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883e:	f7fd fa55 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8008842:	61b8      	str	r0, [r7, #24]
        break;
 8008844:	e008      	b.n	8008858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800884a:	61bb      	str	r3, [r7, #24]
        break;
 800884c:	e004      	b.n	8008858 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	77bb      	strb	r3, [r7, #30]
        break;
 8008856:	bf00      	nop
    }

    if (pclk != 0U)
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d018      	beq.n	8008890 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085a      	lsrs	r2, r3, #1
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008870:	b29b      	uxth	r3, r3
 8008872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b0f      	cmp	r3, #15
 8008878:	d908      	bls.n	800888c <UART_SetConfig+0x49c>
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008880:	d204      	bcs.n	800888c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	60da      	str	r2, [r3, #12]
 800888a:	e001      	b.n	8008890 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800889c:	7fbb      	ldrb	r3, [r7, #30]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	40007c00 	.word	0x40007c00
 80088ac:	40023800 	.word	0x40023800
 80088b0:	00f42400 	.word	0x00f42400

080088b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01a      	beq.n	80089ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b2:	d10a      	bne.n	80089ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a08:	f7fa fea0 	bl	800374c <HAL_GetTick>
 8008a0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d10e      	bne.n	8008a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f82d 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e023      	b.n	8008a82 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d10e      	bne.n	8008a66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f817 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e00d      	b.n	8008a82 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9a:	e05e      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d05a      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa4:	f7fa fe52 	bl	800374c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <UART_WaitOnFlagUntilTimeout+0x30>
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d11b      	bne.n	8008af2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ac8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0201 	bic.w	r2, r2, #1
 8008ad8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e043      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d02c      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0e:	d124      	bne.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e00f      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69da      	ldr	r2, [r3, #28]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4013      	ands	r3, r2
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	bf0c      	ite	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	2300      	movne	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d091      	beq.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <__errno>:
 8008b84:	4b01      	ldr	r3, [pc, #4]	; (8008b8c <__errno+0x8>)
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000020 	.word	0x20000020

08008b90 <__libc_init_array>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4d0d      	ldr	r5, [pc, #52]	; (8008bc8 <__libc_init_array+0x38>)
 8008b94:	4c0d      	ldr	r4, [pc, #52]	; (8008bcc <__libc_init_array+0x3c>)
 8008b96:	1b64      	subs	r4, r4, r5
 8008b98:	10a4      	asrs	r4, r4, #2
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	d109      	bne.n	8008bb4 <__libc_init_array+0x24>
 8008ba0:	4d0b      	ldr	r5, [pc, #44]	; (8008bd0 <__libc_init_array+0x40>)
 8008ba2:	4c0c      	ldr	r4, [pc, #48]	; (8008bd4 <__libc_init_array+0x44>)
 8008ba4:	f002 fe24 	bl	800b7f0 <_init>
 8008ba8:	1b64      	subs	r4, r4, r5
 8008baa:	10a4      	asrs	r4, r4, #2
 8008bac:	2600      	movs	r6, #0
 8008bae:	42a6      	cmp	r6, r4
 8008bb0:	d105      	bne.n	8008bbe <__libc_init_array+0x2e>
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb8:	4798      	blx	r3
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7ee      	b.n	8008b9c <__libc_init_array+0xc>
 8008bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc2:	4798      	blx	r3
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	e7f2      	b.n	8008bae <__libc_init_array+0x1e>
 8008bc8:	0800bedc 	.word	0x0800bedc
 8008bcc:	0800bedc 	.word	0x0800bedc
 8008bd0:	0800bedc 	.word	0x0800bedc
 8008bd4:	0800bee0 	.word	0x0800bee0

08008bd8 <memset>:
 8008bd8:	4402      	add	r2, r0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d100      	bne.n	8008be2 <memset+0xa>
 8008be0:	4770      	bx	lr
 8008be2:	f803 1b01 	strb.w	r1, [r3], #1
 8008be6:	e7f9      	b.n	8008bdc <memset+0x4>

08008be8 <__cvt>:
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	ed2d 8b02 	vpush	{d8}
 8008bee:	eeb0 8b40 	vmov.f64	d8, d0
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	4617      	mov	r7, r2
 8008bf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008bf8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008bfa:	ee18 2a90 	vmov	r2, s17
 8008bfe:	f025 0520 	bic.w	r5, r5, #32
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	bfb6      	itet	lt
 8008c06:	222d      	movlt	r2, #45	; 0x2d
 8008c08:	2200      	movge	r2, #0
 8008c0a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008c0e:	2d46      	cmp	r5, #70	; 0x46
 8008c10:	460c      	mov	r4, r1
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	d004      	beq.n	8008c20 <__cvt+0x38>
 8008c16:	2d45      	cmp	r5, #69	; 0x45
 8008c18:	d100      	bne.n	8008c1c <__cvt+0x34>
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	2102      	movs	r1, #2
 8008c1e:	e000      	b.n	8008c22 <__cvt+0x3a>
 8008c20:	2103      	movs	r1, #3
 8008c22:	ab03      	add	r3, sp, #12
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	ab02      	add	r3, sp, #8
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4633      	mov	r3, r6
 8008c2e:	eeb0 0b48 	vmov.f64	d0, d8
 8008c32:	f000 fcc9 	bl	80095c8 <_dtoa_r>
 8008c36:	2d47      	cmp	r5, #71	; 0x47
 8008c38:	d109      	bne.n	8008c4e <__cvt+0x66>
 8008c3a:	07fb      	lsls	r3, r7, #31
 8008c3c:	d407      	bmi.n	8008c4e <__cvt+0x66>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c42:	1a1b      	subs	r3, r3, r0
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	b005      	add	sp, #20
 8008c48:	ecbd 8b02 	vpop	{d8}
 8008c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4e:	2d46      	cmp	r5, #70	; 0x46
 8008c50:	eb00 0204 	add.w	r2, r0, r4
 8008c54:	d10c      	bne.n	8008c70 <__cvt+0x88>
 8008c56:	7803      	ldrb	r3, [r0, #0]
 8008c58:	2b30      	cmp	r3, #48	; 0x30
 8008c5a:	d107      	bne.n	8008c6c <__cvt+0x84>
 8008c5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	bf1c      	itt	ne
 8008c66:	f1c4 0401 	rsbne	r4, r4, #1
 8008c6a:	6034      	strne	r4, [r6, #0]
 8008c6c:	6833      	ldr	r3, [r6, #0]
 8008c6e:	441a      	add	r2, r3
 8008c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	bf08      	it	eq
 8008c7a:	9203      	streq	r2, [sp, #12]
 8008c7c:	2130      	movs	r1, #48	; 0x30
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d2dc      	bcs.n	8008c3e <__cvt+0x56>
 8008c84:	1c5c      	adds	r4, r3, #1
 8008c86:	9403      	str	r4, [sp, #12]
 8008c88:	7019      	strb	r1, [r3, #0]
 8008c8a:	e7f8      	b.n	8008c7e <__cvt+0x96>

08008c8c <__exponent>:
 8008c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2900      	cmp	r1, #0
 8008c92:	bfb8      	it	lt
 8008c94:	4249      	neglt	r1, r1
 8008c96:	f803 2b02 	strb.w	r2, [r3], #2
 8008c9a:	bfb4      	ite	lt
 8008c9c:	222d      	movlt	r2, #45	; 0x2d
 8008c9e:	222b      	movge	r2, #43	; 0x2b
 8008ca0:	2909      	cmp	r1, #9
 8008ca2:	7042      	strb	r2, [r0, #1]
 8008ca4:	dd2a      	ble.n	8008cfc <__exponent+0x70>
 8008ca6:	f10d 0407 	add.w	r4, sp, #7
 8008caa:	46a4      	mov	ip, r4
 8008cac:	270a      	movs	r7, #10
 8008cae:	46a6      	mov	lr, r4
 8008cb0:	460a      	mov	r2, r1
 8008cb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008cb6:	fb07 1516 	mls	r5, r7, r6, r1
 8008cba:	3530      	adds	r5, #48	; 0x30
 8008cbc:	2a63      	cmp	r2, #99	; 0x63
 8008cbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	dcf1      	bgt.n	8008cae <__exponent+0x22>
 8008cca:	3130      	adds	r1, #48	; 0x30
 8008ccc:	f1ae 0502 	sub.w	r5, lr, #2
 8008cd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cd4:	1c44      	adds	r4, r0, #1
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4561      	cmp	r1, ip
 8008cda:	d30a      	bcc.n	8008cf2 <__exponent+0x66>
 8008cdc:	f10d 0209 	add.w	r2, sp, #9
 8008ce0:	eba2 020e 	sub.w	r2, r2, lr
 8008ce4:	4565      	cmp	r5, ip
 8008ce6:	bf88      	it	hi
 8008ce8:	2200      	movhi	r2, #0
 8008cea:	4413      	add	r3, r2
 8008cec:	1a18      	subs	r0, r3, r0
 8008cee:	b003      	add	sp, #12
 8008cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cfa:	e7ed      	b.n	8008cd8 <__exponent+0x4c>
 8008cfc:	2330      	movs	r3, #48	; 0x30
 8008cfe:	3130      	adds	r1, #48	; 0x30
 8008d00:	7083      	strb	r3, [r0, #2]
 8008d02:	70c1      	strb	r1, [r0, #3]
 8008d04:	1d03      	adds	r3, r0, #4
 8008d06:	e7f1      	b.n	8008cec <__exponent+0x60>

08008d08 <_printf_float>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	b08b      	sub	sp, #44	; 0x2c
 8008d0e:	460c      	mov	r4, r1
 8008d10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008d14:	4616      	mov	r6, r2
 8008d16:	461f      	mov	r7, r3
 8008d18:	4605      	mov	r5, r0
 8008d1a:	f001 f9d7 	bl	800a0cc <_localeconv_r>
 8008d1e:	f8d0 b000 	ldr.w	fp, [r0]
 8008d22:	4658      	mov	r0, fp
 8008d24:	f7f7 fa8c 	bl	8000240 <strlen>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9308      	str	r3, [sp, #32]
 8008d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	3307      	adds	r3, #7
 8008d38:	f023 0307 	bic.w	r3, r3, #7
 8008d3c:	f103 0108 	add.w	r1, r3, #8
 8008d40:	f8c8 1000 	str.w	r1, [r8]
 8008d44:	4682      	mov	sl, r0
 8008d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008d4e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008fb0 <_printf_float+0x2a8>
 8008d52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008d56:	eeb0 6bc0 	vabs.f64	d6, d0
 8008d5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d62:	dd24      	ble.n	8008dae <_printf_float+0xa6>
 8008d64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6c:	d502      	bpl.n	8008d74 <_printf_float+0x6c>
 8008d6e:	232d      	movs	r3, #45	; 0x2d
 8008d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d74:	4b90      	ldr	r3, [pc, #576]	; (8008fb8 <_printf_float+0x2b0>)
 8008d76:	4891      	ldr	r0, [pc, #580]	; (8008fbc <_printf_float+0x2b4>)
 8008d78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d7c:	bf94      	ite	ls
 8008d7e:	4698      	movls	r8, r3
 8008d80:	4680      	movhi	r8, r0
 8008d82:	2303      	movs	r3, #3
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	f022 0204 	bic.w	r2, r2, #4
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6022      	str	r2, [r4, #0]
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	9700      	str	r7, [sp, #0]
 8008d92:	4633      	mov	r3, r6
 8008d94:	aa09      	add	r2, sp, #36	; 0x24
 8008d96:	4621      	mov	r1, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 f9d3 	bl	8009144 <_printf_common>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f040 808a 	bne.w	8008eb8 <_printf_float+0x1b0>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	b00b      	add	sp, #44	; 0x2c
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	eeb4 0b40 	vcmp.f64	d0, d0
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	d709      	bvc.n	8008dcc <_printf_float+0xc4>
 8008db8:	ee10 3a90 	vmov	r3, s1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	bfbc      	itt	lt
 8008dc0:	232d      	movlt	r3, #45	; 0x2d
 8008dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008dc6:	487e      	ldr	r0, [pc, #504]	; (8008fc0 <_printf_float+0x2b8>)
 8008dc8:	4b7e      	ldr	r3, [pc, #504]	; (8008fc4 <_printf_float+0x2bc>)
 8008dca:	e7d5      	b.n	8008d78 <_printf_float+0x70>
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008dd2:	9104      	str	r1, [sp, #16]
 8008dd4:	1c59      	adds	r1, r3, #1
 8008dd6:	d13c      	bne.n	8008e52 <_printf_float+0x14a>
 8008dd8:	2306      	movs	r3, #6
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9303      	str	r3, [sp, #12]
 8008de0:	ab08      	add	r3, sp, #32
 8008de2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dea:	ab07      	add	r3, sp, #28
 8008dec:	6861      	ldr	r1, [r4, #4]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	f10d 031b 	add.w	r3, sp, #27
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7ff fef6 	bl	8008be8 <__cvt>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	9907      	ldr	r1, [sp, #28]
 8008e00:	2b47      	cmp	r3, #71	; 0x47
 8008e02:	4680      	mov	r8, r0
 8008e04:	d108      	bne.n	8008e18 <_printf_float+0x110>
 8008e06:	1cc8      	adds	r0, r1, #3
 8008e08:	db02      	blt.n	8008e10 <_printf_float+0x108>
 8008e0a:	6863      	ldr	r3, [r4, #4]
 8008e0c:	4299      	cmp	r1, r3
 8008e0e:	dd41      	ble.n	8008e94 <_printf_float+0x18c>
 8008e10:	f1a9 0902 	sub.w	r9, r9, #2
 8008e14:	fa5f f989 	uxtb.w	r9, r9
 8008e18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e1c:	d820      	bhi.n	8008e60 <_printf_float+0x158>
 8008e1e:	3901      	subs	r1, #1
 8008e20:	464a      	mov	r2, r9
 8008e22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e26:	9107      	str	r1, [sp, #28]
 8008e28:	f7ff ff30 	bl	8008c8c <__exponent>
 8008e2c:	9a08      	ldr	r2, [sp, #32]
 8008e2e:	9004      	str	r0, [sp, #16]
 8008e30:	1813      	adds	r3, r2, r0
 8008e32:	2a01      	cmp	r2, #1
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	dc02      	bgt.n	8008e3e <_printf_float+0x136>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	07d2      	lsls	r2, r2, #31
 8008e3c:	d501      	bpl.n	8008e42 <_printf_float+0x13a>
 8008e3e:	3301      	adds	r3, #1
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0a2      	beq.n	8008d90 <_printf_float+0x88>
 8008e4a:	232d      	movs	r3, #45	; 0x2d
 8008e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e50:	e79e      	b.n	8008d90 <_printf_float+0x88>
 8008e52:	9904      	ldr	r1, [sp, #16]
 8008e54:	2947      	cmp	r1, #71	; 0x47
 8008e56:	d1c1      	bne.n	8008ddc <_printf_float+0xd4>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1bf      	bne.n	8008ddc <_printf_float+0xd4>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e7bc      	b.n	8008dda <_printf_float+0xd2>
 8008e60:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e64:	d118      	bne.n	8008e98 <_printf_float+0x190>
 8008e66:	2900      	cmp	r1, #0
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	dd0b      	ble.n	8008e84 <_printf_float+0x17c>
 8008e6c:	6121      	str	r1, [r4, #16]
 8008e6e:	b913      	cbnz	r3, 8008e76 <_printf_float+0x16e>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	07d0      	lsls	r0, r2, #31
 8008e74:	d502      	bpl.n	8008e7c <_printf_float+0x174>
 8008e76:	3301      	adds	r3, #1
 8008e78:	440b      	add	r3, r1
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	e7de      	b.n	8008e42 <_printf_float+0x13a>
 8008e84:	b913      	cbnz	r3, 8008e8c <_printf_float+0x184>
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	07d2      	lsls	r2, r2, #31
 8008e8a:	d501      	bpl.n	8008e90 <_printf_float+0x188>
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	e7f4      	b.n	8008e7a <_printf_float+0x172>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e7f2      	b.n	8008e7a <_printf_float+0x172>
 8008e94:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e98:	9b08      	ldr	r3, [sp, #32]
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	db05      	blt.n	8008eaa <_printf_float+0x1a2>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	6121      	str	r1, [r4, #16]
 8008ea2:	07d8      	lsls	r0, r3, #31
 8008ea4:	d5ea      	bpl.n	8008e7c <_printf_float+0x174>
 8008ea6:	1c4b      	adds	r3, r1, #1
 8008ea8:	e7e7      	b.n	8008e7a <_printf_float+0x172>
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	bfd4      	ite	le
 8008eae:	f1c1 0202 	rsble	r2, r1, #2
 8008eb2:	2201      	movgt	r2, #1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	e7e0      	b.n	8008e7a <_printf_float+0x172>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	055a      	lsls	r2, r3, #21
 8008ebc:	d407      	bmi.n	8008ece <_printf_float+0x1c6>
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d12a      	bne.n	8008f22 <_printf_float+0x21a>
 8008ecc:	e76a      	b.n	8008da4 <_printf_float+0x9c>
 8008ece:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ed2:	f240 80e2 	bls.w	800909a <_printf_float+0x392>
 8008ed6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008eda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	d133      	bne.n	8008f4c <_printf_float+0x244>
 8008ee4:	4a38      	ldr	r2, [pc, #224]	; (8008fc8 <_printf_float+0x2c0>)
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f af58 	beq.w	8008da4 <_printf_float+0x9c>
 8008ef4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	db02      	blt.n	8008f02 <_printf_float+0x1fa>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	07d8      	lsls	r0, r3, #31
 8008f00:	d50f      	bpl.n	8008f22 <_printf_float+0x21a>
 8008f02:	4653      	mov	r3, sl
 8008f04:	465a      	mov	r2, fp
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f af49 	beq.w	8008da4 <_printf_float+0x9c>
 8008f12:	f04f 0800 	mov.w	r8, #0
 8008f16:	f104 091a 	add.w	r9, r4, #26
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	4543      	cmp	r3, r8
 8008f20:	dc09      	bgt.n	8008f36 <_printf_float+0x22e>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	079b      	lsls	r3, r3, #30
 8008f26:	f100 8108 	bmi.w	800913a <_printf_float+0x432>
 8008f2a:	68e0      	ldr	r0, [r4, #12]
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	4298      	cmp	r0, r3
 8008f30:	bfb8      	it	lt
 8008f32:	4618      	movlt	r0, r3
 8008f34:	e738      	b.n	8008da8 <_printf_float+0xa0>
 8008f36:	2301      	movs	r3, #1
 8008f38:	464a      	mov	r2, r9
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	f43f af2f 	beq.w	8008da4 <_printf_float+0x9c>
 8008f46:	f108 0801 	add.w	r8, r8, #1
 8008f4a:	e7e6      	b.n	8008f1a <_printf_float+0x212>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc3c      	bgt.n	8008fcc <_printf_float+0x2c4>
 8008f52:	4a1d      	ldr	r2, [pc, #116]	; (8008fc8 <_printf_float+0x2c0>)
 8008f54:	2301      	movs	r3, #1
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f af21 	beq.w	8008da4 <_printf_float+0x9c>
 8008f62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	d102      	bne.n	8008f70 <_printf_float+0x268>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d5d8      	bpl.n	8008f22 <_printf_float+0x21a>
 8008f70:	4653      	mov	r3, sl
 8008f72:	465a      	mov	r2, fp
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	47b8      	blx	r7
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	f43f af12 	beq.w	8008da4 <_printf_float+0x9c>
 8008f80:	f04f 0900 	mov.w	r9, #0
 8008f84:	f104 0a1a 	add.w	sl, r4, #26
 8008f88:	9b07      	ldr	r3, [sp, #28]
 8008f8a:	425b      	negs	r3, r3
 8008f8c:	454b      	cmp	r3, r9
 8008f8e:	dc01      	bgt.n	8008f94 <_printf_float+0x28c>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	e795      	b.n	8008ec0 <_printf_float+0x1b8>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4652      	mov	r2, sl
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f af00 	beq.w	8008da4 <_printf_float+0x9c>
 8008fa4:	f109 0901 	add.w	r9, r9, #1
 8008fa8:	e7ee      	b.n	8008f88 <_printf_float+0x280>
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w
 8008fb0:	ffffffff 	.word	0xffffffff
 8008fb4:	7fefffff 	.word	0x7fefffff
 8008fb8:	0800baf4 	.word	0x0800baf4
 8008fbc:	0800baf8 	.word	0x0800baf8
 8008fc0:	0800bb00 	.word	0x0800bb00
 8008fc4:	0800bafc 	.word	0x0800bafc
 8008fc8:	0800bb04 	.word	0x0800bb04
 8008fcc:	9a08      	ldr	r2, [sp, #32]
 8008fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	bfa8      	it	ge
 8008fd4:	461a      	movge	r2, r3
 8008fd6:	2a00      	cmp	r2, #0
 8008fd8:	4691      	mov	r9, r2
 8008fda:	dc38      	bgt.n	800904e <_printf_float+0x346>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fe4:	f104 021a 	add.w	r2, r4, #26
 8008fe8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fea:	9905      	ldr	r1, [sp, #20]
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	eba3 0309 	sub.w	r3, r3, r9
 8008ff2:	428b      	cmp	r3, r1
 8008ff4:	dc33      	bgt.n	800905e <_printf_float+0x356>
 8008ff6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	db3c      	blt.n	8009078 <_printf_float+0x370>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	07da      	lsls	r2, r3, #31
 8009002:	d439      	bmi.n	8009078 <_printf_float+0x370>
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	9907      	ldr	r1, [sp, #28]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	eba2 0901 	sub.w	r9, r2, r1
 8009010:	4599      	cmp	r9, r3
 8009012:	bfa8      	it	ge
 8009014:	4699      	movge	r9, r3
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	dc35      	bgt.n	8009088 <_printf_float+0x380>
 800901c:	f04f 0800 	mov.w	r8, #0
 8009020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009024:	f104 0a1a 	add.w	sl, r4, #26
 8009028:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	eba3 0309 	sub.w	r3, r3, r9
 8009032:	4543      	cmp	r3, r8
 8009034:	f77f af75 	ble.w	8008f22 <_printf_float+0x21a>
 8009038:	2301      	movs	r3, #1
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f aeae 	beq.w	8008da4 <_printf_float+0x9c>
 8009048:	f108 0801 	add.w	r8, r8, #1
 800904c:	e7ec      	b.n	8009028 <_printf_float+0x320>
 800904e:	4613      	mov	r3, r2
 8009050:	4631      	mov	r1, r6
 8009052:	4642      	mov	r2, r8
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	d1bf      	bne.n	8008fdc <_printf_float+0x2d4>
 800905c:	e6a2      	b.n	8008da4 <_printf_float+0x9c>
 800905e:	2301      	movs	r3, #1
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	9204      	str	r2, [sp, #16]
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f ae9b 	beq.w	8008da4 <_printf_float+0x9c>
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	9a04      	ldr	r2, [sp, #16]
 8009072:	3301      	adds	r3, #1
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	e7b7      	b.n	8008fe8 <_printf_float+0x2e0>
 8009078:	4653      	mov	r3, sl
 800907a:	465a      	mov	r2, fp
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	d1be      	bne.n	8009004 <_printf_float+0x2fc>
 8009086:	e68d      	b.n	8008da4 <_printf_float+0x9c>
 8009088:	9a04      	ldr	r2, [sp, #16]
 800908a:	464b      	mov	r3, r9
 800908c:	4442      	add	r2, r8
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	d1c1      	bne.n	800901c <_printf_float+0x314>
 8009098:	e684      	b.n	8008da4 <_printf_float+0x9c>
 800909a:	9a08      	ldr	r2, [sp, #32]
 800909c:	2a01      	cmp	r2, #1
 800909e:	dc01      	bgt.n	80090a4 <_printf_float+0x39c>
 80090a0:	07db      	lsls	r3, r3, #31
 80090a2:	d537      	bpl.n	8009114 <_printf_float+0x40c>
 80090a4:	2301      	movs	r3, #1
 80090a6:	4642      	mov	r2, r8
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f ae78 	beq.w	8008da4 <_printf_float+0x9c>
 80090b4:	4653      	mov	r3, sl
 80090b6:	465a      	mov	r2, fp
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f ae70 	beq.w	8008da4 <_printf_float+0x9c>
 80090c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80090c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d0:	d01b      	beq.n	800910a <_printf_float+0x402>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	f108 0201 	add.w	r2, r8, #1
 80090d8:	3b01      	subs	r3, #1
 80090da:	4631      	mov	r1, r6
 80090dc:	4628      	mov	r0, r5
 80090de:	47b8      	blx	r7
 80090e0:	3001      	adds	r0, #1
 80090e2:	d10e      	bne.n	8009102 <_printf_float+0x3fa>
 80090e4:	e65e      	b.n	8008da4 <_printf_float+0x9c>
 80090e6:	2301      	movs	r3, #1
 80090e8:	464a      	mov	r2, r9
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	f43f ae57 	beq.w	8008da4 <_printf_float+0x9c>
 80090f6:	f108 0801 	add.w	r8, r8, #1
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4543      	cmp	r3, r8
 8009100:	dcf1      	bgt.n	80090e6 <_printf_float+0x3de>
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009108:	e6db      	b.n	8008ec2 <_printf_float+0x1ba>
 800910a:	f04f 0800 	mov.w	r8, #0
 800910e:	f104 091a 	add.w	r9, r4, #26
 8009112:	e7f2      	b.n	80090fa <_printf_float+0x3f2>
 8009114:	2301      	movs	r3, #1
 8009116:	4642      	mov	r2, r8
 8009118:	e7df      	b.n	80090da <_printf_float+0x3d2>
 800911a:	2301      	movs	r3, #1
 800911c:	464a      	mov	r2, r9
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	f43f ae3d 	beq.w	8008da4 <_printf_float+0x9c>
 800912a:	f108 0801 	add.w	r8, r8, #1
 800912e:	68e3      	ldr	r3, [r4, #12]
 8009130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009132:	1a5b      	subs	r3, r3, r1
 8009134:	4543      	cmp	r3, r8
 8009136:	dcf0      	bgt.n	800911a <_printf_float+0x412>
 8009138:	e6f7      	b.n	8008f2a <_printf_float+0x222>
 800913a:	f04f 0800 	mov.w	r8, #0
 800913e:	f104 0919 	add.w	r9, r4, #25
 8009142:	e7f4      	b.n	800912e <_printf_float+0x426>

08009144 <_printf_common>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	4616      	mov	r6, r2
 800914a:	4699      	mov	r9, r3
 800914c:	688a      	ldr	r2, [r1, #8]
 800914e:	690b      	ldr	r3, [r1, #16]
 8009150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009154:	4293      	cmp	r3, r2
 8009156:	bfb8      	it	lt
 8009158:	4613      	movlt	r3, r2
 800915a:	6033      	str	r3, [r6, #0]
 800915c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009160:	4607      	mov	r7, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b10a      	cbz	r2, 800916a <_printf_common+0x26>
 8009166:	3301      	adds	r3, #1
 8009168:	6033      	str	r3, [r6, #0]
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	0699      	lsls	r1, r3, #26
 800916e:	bf42      	ittt	mi
 8009170:	6833      	ldrmi	r3, [r6, #0]
 8009172:	3302      	addmi	r3, #2
 8009174:	6033      	strmi	r3, [r6, #0]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	f015 0506 	ands.w	r5, r5, #6
 800917c:	d106      	bne.n	800918c <_printf_common+0x48>
 800917e:	f104 0a19 	add.w	sl, r4, #25
 8009182:	68e3      	ldr	r3, [r4, #12]
 8009184:	6832      	ldr	r2, [r6, #0]
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	42ab      	cmp	r3, r5
 800918a:	dc26      	bgt.n	80091da <_printf_common+0x96>
 800918c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009190:	1e13      	subs	r3, r2, #0
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	bf18      	it	ne
 8009196:	2301      	movne	r3, #1
 8009198:	0692      	lsls	r2, r2, #26
 800919a:	d42b      	bmi.n	80091f4 <_printf_common+0xb0>
 800919c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a0:	4649      	mov	r1, r9
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	3001      	adds	r0, #1
 80091a8:	d01e      	beq.n	80091e8 <_printf_common+0xa4>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	68e5      	ldr	r5, [r4, #12]
 80091ae:	6832      	ldr	r2, [r6, #0]
 80091b0:	f003 0306 	and.w	r3, r3, #6
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	bf08      	it	eq
 80091b8:	1aad      	subeq	r5, r5, r2
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	6922      	ldr	r2, [r4, #16]
 80091be:	bf0c      	ite	eq
 80091c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c4:	2500      	movne	r5, #0
 80091c6:	4293      	cmp	r3, r2
 80091c8:	bfc4      	itt	gt
 80091ca:	1a9b      	subgt	r3, r3, r2
 80091cc:	18ed      	addgt	r5, r5, r3
 80091ce:	2600      	movs	r6, #0
 80091d0:	341a      	adds	r4, #26
 80091d2:	42b5      	cmp	r5, r6
 80091d4:	d11a      	bne.n	800920c <_printf_common+0xc8>
 80091d6:	2000      	movs	r0, #0
 80091d8:	e008      	b.n	80091ec <_printf_common+0xa8>
 80091da:	2301      	movs	r3, #1
 80091dc:	4652      	mov	r2, sl
 80091de:	4649      	mov	r1, r9
 80091e0:	4638      	mov	r0, r7
 80091e2:	47c0      	blx	r8
 80091e4:	3001      	adds	r0, #1
 80091e6:	d103      	bne.n	80091f0 <_printf_common+0xac>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f0:	3501      	adds	r5, #1
 80091f2:	e7c6      	b.n	8009182 <_printf_common+0x3e>
 80091f4:	18e1      	adds	r1, r4, r3
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	2030      	movs	r0, #48	; 0x30
 80091fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091fe:	4422      	add	r2, r4
 8009200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009208:	3302      	adds	r3, #2
 800920a:	e7c7      	b.n	800919c <_printf_common+0x58>
 800920c:	2301      	movs	r3, #1
 800920e:	4622      	mov	r2, r4
 8009210:	4649      	mov	r1, r9
 8009212:	4638      	mov	r0, r7
 8009214:	47c0      	blx	r8
 8009216:	3001      	adds	r0, #1
 8009218:	d0e6      	beq.n	80091e8 <_printf_common+0xa4>
 800921a:	3601      	adds	r6, #1
 800921c:	e7d9      	b.n	80091d2 <_printf_common+0x8e>
	...

08009220 <_printf_i>:
 8009220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	460c      	mov	r4, r1
 8009226:	4691      	mov	r9, r2
 8009228:	7e27      	ldrb	r7, [r4, #24]
 800922a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800922c:	2f78      	cmp	r7, #120	; 0x78
 800922e:	4680      	mov	r8, r0
 8009230:	469a      	mov	sl, r3
 8009232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009236:	d807      	bhi.n	8009248 <_printf_i+0x28>
 8009238:	2f62      	cmp	r7, #98	; 0x62
 800923a:	d80a      	bhi.n	8009252 <_printf_i+0x32>
 800923c:	2f00      	cmp	r7, #0
 800923e:	f000 80d8 	beq.w	80093f2 <_printf_i+0x1d2>
 8009242:	2f58      	cmp	r7, #88	; 0x58
 8009244:	f000 80a3 	beq.w	800938e <_printf_i+0x16e>
 8009248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800924c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009250:	e03a      	b.n	80092c8 <_printf_i+0xa8>
 8009252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009256:	2b15      	cmp	r3, #21
 8009258:	d8f6      	bhi.n	8009248 <_printf_i+0x28>
 800925a:	a001      	add	r0, pc, #4	; (adr r0, 8009260 <_printf_i+0x40>)
 800925c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009260:	080092b9 	.word	0x080092b9
 8009264:	080092cd 	.word	0x080092cd
 8009268:	08009249 	.word	0x08009249
 800926c:	08009249 	.word	0x08009249
 8009270:	08009249 	.word	0x08009249
 8009274:	08009249 	.word	0x08009249
 8009278:	080092cd 	.word	0x080092cd
 800927c:	08009249 	.word	0x08009249
 8009280:	08009249 	.word	0x08009249
 8009284:	08009249 	.word	0x08009249
 8009288:	08009249 	.word	0x08009249
 800928c:	080093d9 	.word	0x080093d9
 8009290:	080092fd 	.word	0x080092fd
 8009294:	080093bb 	.word	0x080093bb
 8009298:	08009249 	.word	0x08009249
 800929c:	08009249 	.word	0x08009249
 80092a0:	080093fb 	.word	0x080093fb
 80092a4:	08009249 	.word	0x08009249
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009249 	.word	0x08009249
 80092b0:	08009249 	.word	0x08009249
 80092b4:	080093c3 	.word	0x080093c3
 80092b8:	680b      	ldr	r3, [r1, #0]
 80092ba:	1d1a      	adds	r2, r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	600a      	str	r2, [r1, #0]
 80092c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c8:	2301      	movs	r3, #1
 80092ca:	e0a3      	b.n	8009414 <_printf_i+0x1f4>
 80092cc:	6825      	ldr	r5, [r4, #0]
 80092ce:	6808      	ldr	r0, [r1, #0]
 80092d0:	062e      	lsls	r6, r5, #24
 80092d2:	f100 0304 	add.w	r3, r0, #4
 80092d6:	d50a      	bpl.n	80092ee <_printf_i+0xce>
 80092d8:	6805      	ldr	r5, [r0, #0]
 80092da:	600b      	str	r3, [r1, #0]
 80092dc:	2d00      	cmp	r5, #0
 80092de:	da03      	bge.n	80092e8 <_printf_i+0xc8>
 80092e0:	232d      	movs	r3, #45	; 0x2d
 80092e2:	426d      	negs	r5, r5
 80092e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e8:	485e      	ldr	r0, [pc, #376]	; (8009464 <_printf_i+0x244>)
 80092ea:	230a      	movs	r3, #10
 80092ec:	e019      	b.n	8009322 <_printf_i+0x102>
 80092ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092f2:	6805      	ldr	r5, [r0, #0]
 80092f4:	600b      	str	r3, [r1, #0]
 80092f6:	bf18      	it	ne
 80092f8:	b22d      	sxthne	r5, r5
 80092fa:	e7ef      	b.n	80092dc <_printf_i+0xbc>
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	1d18      	adds	r0, r3, #4
 8009302:	6008      	str	r0, [r1, #0]
 8009304:	0628      	lsls	r0, r5, #24
 8009306:	d501      	bpl.n	800930c <_printf_i+0xec>
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	e002      	b.n	8009312 <_printf_i+0xf2>
 800930c:	0669      	lsls	r1, r5, #25
 800930e:	d5fb      	bpl.n	8009308 <_printf_i+0xe8>
 8009310:	881d      	ldrh	r5, [r3, #0]
 8009312:	4854      	ldr	r0, [pc, #336]	; (8009464 <_printf_i+0x244>)
 8009314:	2f6f      	cmp	r7, #111	; 0x6f
 8009316:	bf0c      	ite	eq
 8009318:	2308      	moveq	r3, #8
 800931a:	230a      	movne	r3, #10
 800931c:	2100      	movs	r1, #0
 800931e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009322:	6866      	ldr	r6, [r4, #4]
 8009324:	60a6      	str	r6, [r4, #8]
 8009326:	2e00      	cmp	r6, #0
 8009328:	bfa2      	ittt	ge
 800932a:	6821      	ldrge	r1, [r4, #0]
 800932c:	f021 0104 	bicge.w	r1, r1, #4
 8009330:	6021      	strge	r1, [r4, #0]
 8009332:	b90d      	cbnz	r5, 8009338 <_printf_i+0x118>
 8009334:	2e00      	cmp	r6, #0
 8009336:	d04d      	beq.n	80093d4 <_printf_i+0x1b4>
 8009338:	4616      	mov	r6, r2
 800933a:	fbb5 f1f3 	udiv	r1, r5, r3
 800933e:	fb03 5711 	mls	r7, r3, r1, r5
 8009342:	5dc7      	ldrb	r7, [r0, r7]
 8009344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009348:	462f      	mov	r7, r5
 800934a:	42bb      	cmp	r3, r7
 800934c:	460d      	mov	r5, r1
 800934e:	d9f4      	bls.n	800933a <_printf_i+0x11a>
 8009350:	2b08      	cmp	r3, #8
 8009352:	d10b      	bne.n	800936c <_printf_i+0x14c>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	07df      	lsls	r7, r3, #31
 8009358:	d508      	bpl.n	800936c <_printf_i+0x14c>
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	6861      	ldr	r1, [r4, #4]
 800935e:	4299      	cmp	r1, r3
 8009360:	bfde      	ittt	le
 8009362:	2330      	movle	r3, #48	; 0x30
 8009364:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009368:	f106 36ff 	addle.w	r6, r6, #4294967295
 800936c:	1b92      	subs	r2, r2, r6
 800936e:	6122      	str	r2, [r4, #16]
 8009370:	f8cd a000 	str.w	sl, [sp]
 8009374:	464b      	mov	r3, r9
 8009376:	aa03      	add	r2, sp, #12
 8009378:	4621      	mov	r1, r4
 800937a:	4640      	mov	r0, r8
 800937c:	f7ff fee2 	bl	8009144 <_printf_common>
 8009380:	3001      	adds	r0, #1
 8009382:	d14c      	bne.n	800941e <_printf_i+0x1fe>
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	b004      	add	sp, #16
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	4835      	ldr	r0, [pc, #212]	; (8009464 <_printf_i+0x244>)
 8009390:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	680e      	ldr	r6, [r1, #0]
 8009398:	061f      	lsls	r7, r3, #24
 800939a:	f856 5b04 	ldr.w	r5, [r6], #4
 800939e:	600e      	str	r6, [r1, #0]
 80093a0:	d514      	bpl.n	80093cc <_printf_i+0x1ac>
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	bf44      	itt	mi
 80093a6:	f043 0320 	orrmi.w	r3, r3, #32
 80093aa:	6023      	strmi	r3, [r4, #0]
 80093ac:	b91d      	cbnz	r5, 80093b6 <_printf_i+0x196>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f023 0320 	bic.w	r3, r3, #32
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	2310      	movs	r3, #16
 80093b8:	e7b0      	b.n	800931c <_printf_i+0xfc>
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	f043 0320 	orr.w	r3, r3, #32
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	2378      	movs	r3, #120	; 0x78
 80093c4:	4828      	ldr	r0, [pc, #160]	; (8009468 <_printf_i+0x248>)
 80093c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ca:	e7e3      	b.n	8009394 <_printf_i+0x174>
 80093cc:	065e      	lsls	r6, r3, #25
 80093ce:	bf48      	it	mi
 80093d0:	b2ad      	uxthmi	r5, r5
 80093d2:	e7e6      	b.n	80093a2 <_printf_i+0x182>
 80093d4:	4616      	mov	r6, r2
 80093d6:	e7bb      	b.n	8009350 <_printf_i+0x130>
 80093d8:	680b      	ldr	r3, [r1, #0]
 80093da:	6826      	ldr	r6, [r4, #0]
 80093dc:	6960      	ldr	r0, [r4, #20]
 80093de:	1d1d      	adds	r5, r3, #4
 80093e0:	600d      	str	r5, [r1, #0]
 80093e2:	0635      	lsls	r5, r6, #24
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	d501      	bpl.n	80093ec <_printf_i+0x1cc>
 80093e8:	6018      	str	r0, [r3, #0]
 80093ea:	e002      	b.n	80093f2 <_printf_i+0x1d2>
 80093ec:	0671      	lsls	r1, r6, #25
 80093ee:	d5fb      	bpl.n	80093e8 <_printf_i+0x1c8>
 80093f0:	8018      	strh	r0, [r3, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	4616      	mov	r6, r2
 80093f8:	e7ba      	b.n	8009370 <_printf_i+0x150>
 80093fa:	680b      	ldr	r3, [r1, #0]
 80093fc:	1d1a      	adds	r2, r3, #4
 80093fe:	600a      	str	r2, [r1, #0]
 8009400:	681e      	ldr	r6, [r3, #0]
 8009402:	6862      	ldr	r2, [r4, #4]
 8009404:	2100      	movs	r1, #0
 8009406:	4630      	mov	r0, r6
 8009408:	f7f6 ff22 	bl	8000250 <memchr>
 800940c:	b108      	cbz	r0, 8009412 <_printf_i+0x1f2>
 800940e:	1b80      	subs	r0, r0, r6
 8009410:	6060      	str	r0, [r4, #4]
 8009412:	6863      	ldr	r3, [r4, #4]
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	2300      	movs	r3, #0
 8009418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800941c:	e7a8      	b.n	8009370 <_printf_i+0x150>
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	4632      	mov	r2, r6
 8009422:	4649      	mov	r1, r9
 8009424:	4640      	mov	r0, r8
 8009426:	47d0      	blx	sl
 8009428:	3001      	adds	r0, #1
 800942a:	d0ab      	beq.n	8009384 <_printf_i+0x164>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	079b      	lsls	r3, r3, #30
 8009430:	d413      	bmi.n	800945a <_printf_i+0x23a>
 8009432:	68e0      	ldr	r0, [r4, #12]
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	4298      	cmp	r0, r3
 8009438:	bfb8      	it	lt
 800943a:	4618      	movlt	r0, r3
 800943c:	e7a4      	b.n	8009388 <_printf_i+0x168>
 800943e:	2301      	movs	r3, #1
 8009440:	4632      	mov	r2, r6
 8009442:	4649      	mov	r1, r9
 8009444:	4640      	mov	r0, r8
 8009446:	47d0      	blx	sl
 8009448:	3001      	adds	r0, #1
 800944a:	d09b      	beq.n	8009384 <_printf_i+0x164>
 800944c:	3501      	adds	r5, #1
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	9903      	ldr	r1, [sp, #12]
 8009452:	1a5b      	subs	r3, r3, r1
 8009454:	42ab      	cmp	r3, r5
 8009456:	dcf2      	bgt.n	800943e <_printf_i+0x21e>
 8009458:	e7eb      	b.n	8009432 <_printf_i+0x212>
 800945a:	2500      	movs	r5, #0
 800945c:	f104 0619 	add.w	r6, r4, #25
 8009460:	e7f5      	b.n	800944e <_printf_i+0x22e>
 8009462:	bf00      	nop
 8009464:	0800bb06 	.word	0x0800bb06
 8009468:	0800bb17 	.word	0x0800bb17

0800946c <siprintf>:
 800946c:	b40e      	push	{r1, r2, r3}
 800946e:	b500      	push	{lr}
 8009470:	b09c      	sub	sp, #112	; 0x70
 8009472:	ab1d      	add	r3, sp, #116	; 0x74
 8009474:	9002      	str	r0, [sp, #8]
 8009476:	9006      	str	r0, [sp, #24]
 8009478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800947c:	4809      	ldr	r0, [pc, #36]	; (80094a4 <siprintf+0x38>)
 800947e:	9107      	str	r1, [sp, #28]
 8009480:	9104      	str	r1, [sp, #16]
 8009482:	4909      	ldr	r1, [pc, #36]	; (80094a8 <siprintf+0x3c>)
 8009484:	f853 2b04 	ldr.w	r2, [r3], #4
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	a902      	add	r1, sp, #8
 8009490:	f001 faca 	bl	800aa28 <_svfiprintf_r>
 8009494:	9b02      	ldr	r3, [sp, #8]
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	b01c      	add	sp, #112	; 0x70
 800949c:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a0:	b003      	add	sp, #12
 80094a2:	4770      	bx	lr
 80094a4:	20000020 	.word	0x20000020
 80094a8:	ffff0208 	.word	0xffff0208

080094ac <quorem>:
 80094ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	690c      	ldr	r4, [r1, #16]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	4607      	mov	r7, r0
 80094b8:	f2c0 8081 	blt.w	80095be <quorem+0x112>
 80094bc:	3c01      	subs	r4, #1
 80094be:	f101 0814 	add.w	r8, r1, #20
 80094c2:	f100 0514 	add.w	r5, r0, #20
 80094c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d4:	3301      	adds	r3, #1
 80094d6:	429a      	cmp	r2, r3
 80094d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094e4:	d331      	bcc.n	800954a <quorem+0x9e>
 80094e6:	f04f 0e00 	mov.w	lr, #0
 80094ea:	4640      	mov	r0, r8
 80094ec:	46ac      	mov	ip, r5
 80094ee:	46f2      	mov	sl, lr
 80094f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80094f4:	b293      	uxth	r3, r2
 80094f6:	fb06 e303 	mla	r3, r6, r3, lr
 80094fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ebaa 0303 	sub.w	r3, sl, r3
 8009504:	0c12      	lsrs	r2, r2, #16
 8009506:	f8dc a000 	ldr.w	sl, [ip]
 800950a:	fb06 e202 	mla	r2, r6, r2, lr
 800950e:	fa13 f38a 	uxtah	r3, r3, sl
 8009512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009516:	fa1f fa82 	uxth.w	sl, r2
 800951a:	f8dc 2000 	ldr.w	r2, [ip]
 800951e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009522:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009526:	b29b      	uxth	r3, r3
 8009528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952c:	4581      	cmp	r9, r0
 800952e:	f84c 3b04 	str.w	r3, [ip], #4
 8009532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009536:	d2db      	bcs.n	80094f0 <quorem+0x44>
 8009538:	f855 300b 	ldr.w	r3, [r5, fp]
 800953c:	b92b      	cbnz	r3, 800954a <quorem+0x9e>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	3b04      	subs	r3, #4
 8009542:	429d      	cmp	r5, r3
 8009544:	461a      	mov	r2, r3
 8009546:	d32e      	bcc.n	80095a6 <quorem+0xfa>
 8009548:	613c      	str	r4, [r7, #16]
 800954a:	4638      	mov	r0, r7
 800954c:	f001 f856 	bl	800a5fc <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	db24      	blt.n	800959e <quorem+0xf2>
 8009554:	3601      	adds	r6, #1
 8009556:	4628      	mov	r0, r5
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009560:	f8d0 e000 	ldr.w	lr, [r0]
 8009564:	b293      	uxth	r3, r2
 8009566:	ebac 0303 	sub.w	r3, ip, r3
 800956a:	0c12      	lsrs	r2, r2, #16
 800956c:	fa13 f38e 	uxtah	r3, r3, lr
 8009570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800957e:	45c1      	cmp	r9, r8
 8009580:	f840 3b04 	str.w	r3, [r0], #4
 8009584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009588:	d2e8      	bcs.n	800955c <quorem+0xb0>
 800958a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800958e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009592:	b922      	cbnz	r2, 800959e <quorem+0xf2>
 8009594:	3b04      	subs	r3, #4
 8009596:	429d      	cmp	r5, r3
 8009598:	461a      	mov	r2, r3
 800959a:	d30a      	bcc.n	80095b2 <quorem+0x106>
 800959c:	613c      	str	r4, [r7, #16]
 800959e:	4630      	mov	r0, r6
 80095a0:	b003      	add	sp, #12
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	3b04      	subs	r3, #4
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	d1cc      	bne.n	8009548 <quorem+0x9c>
 80095ae:	3c01      	subs	r4, #1
 80095b0:	e7c7      	b.n	8009542 <quorem+0x96>
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	3b04      	subs	r3, #4
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d1f0      	bne.n	800959c <quorem+0xf0>
 80095ba:	3c01      	subs	r4, #1
 80095bc:	e7eb      	b.n	8009596 <quorem+0xea>
 80095be:	2000      	movs	r0, #0
 80095c0:	e7ee      	b.n	80095a0 <quorem+0xf4>
 80095c2:	0000      	movs	r0, r0
 80095c4:	0000      	movs	r0, r0
	...

080095c8 <_dtoa_r>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	ec59 8b10 	vmov	r8, r9, d0
 80095d0:	b095      	sub	sp, #84	; 0x54
 80095d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095d4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80095d6:	9107      	str	r1, [sp, #28]
 80095d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80095dc:	4606      	mov	r6, r0
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	9310      	str	r3, [sp, #64]	; 0x40
 80095e2:	b975      	cbnz	r5, 8009602 <_dtoa_r+0x3a>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f000 fd75 	bl	800a0d4 <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	6270      	str	r0, [r6, #36]	; 0x24
 80095ee:	b920      	cbnz	r0, 80095fa <_dtoa_r+0x32>
 80095f0:	4bab      	ldr	r3, [pc, #684]	; (80098a0 <_dtoa_r+0x2d8>)
 80095f2:	21ea      	movs	r1, #234	; 0xea
 80095f4:	48ab      	ldr	r0, [pc, #684]	; (80098a4 <_dtoa_r+0x2dc>)
 80095f6:	f001 fb27 	bl	800ac48 <__assert_func>
 80095fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095fe:	6005      	str	r5, [r0, #0]
 8009600:	60c5      	str	r5, [r0, #12]
 8009602:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009604:	6819      	ldr	r1, [r3, #0]
 8009606:	b151      	cbz	r1, 800961e <_dtoa_r+0x56>
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	604a      	str	r2, [r1, #4]
 800960c:	2301      	movs	r3, #1
 800960e:	4093      	lsls	r3, r2
 8009610:	608b      	str	r3, [r1, #8]
 8009612:	4630      	mov	r0, r6
 8009614:	f000 fdb4 	bl	800a180 <_Bfree>
 8009618:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	f1b9 0300 	subs.w	r3, r9, #0
 8009622:	bfbb      	ittet	lt
 8009624:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009628:	9303      	strlt	r3, [sp, #12]
 800962a:	2300      	movge	r3, #0
 800962c:	2201      	movlt	r2, #1
 800962e:	bfac      	ite	ge
 8009630:	6023      	strge	r3, [r4, #0]
 8009632:	6022      	strlt	r2, [r4, #0]
 8009634:	4b9c      	ldr	r3, [pc, #624]	; (80098a8 <_dtoa_r+0x2e0>)
 8009636:	9c03      	ldr	r4, [sp, #12]
 8009638:	43a3      	bics	r3, r4
 800963a:	d11a      	bne.n	8009672 <_dtoa_r+0xaa>
 800963c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800963e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009648:	ea53 0308 	orrs.w	r3, r3, r8
 800964c:	f000 8512 	beq.w	800a074 <_dtoa_r+0xaac>
 8009650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009652:	b953      	cbnz	r3, 800966a <_dtoa_r+0xa2>
 8009654:	4b95      	ldr	r3, [pc, #596]	; (80098ac <_dtoa_r+0x2e4>)
 8009656:	e01f      	b.n	8009698 <_dtoa_r+0xd0>
 8009658:	4b95      	ldr	r3, [pc, #596]	; (80098b0 <_dtoa_r+0x2e8>)
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	9800      	ldr	r0, [sp, #0]
 8009664:	b015      	add	sp, #84	; 0x54
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	4b90      	ldr	r3, [pc, #576]	; (80098ac <_dtoa_r+0x2e4>)
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	3303      	adds	r3, #3
 8009670:	e7f5      	b.n	800965e <_dtoa_r+0x96>
 8009672:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009682:	d10b      	bne.n	800969c <_dtoa_r+0xd4>
 8009684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009686:	2301      	movs	r3, #1
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 84ee 	beq.w	800a06e <_dtoa_r+0xaa6>
 8009692:	4888      	ldr	r0, [pc, #544]	; (80098b4 <_dtoa_r+0x2ec>)
 8009694:	6018      	str	r0, [r3, #0]
 8009696:	1e43      	subs	r3, r0, #1
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	e7e2      	b.n	8009662 <_dtoa_r+0x9a>
 800969c:	a913      	add	r1, sp, #76	; 0x4c
 800969e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80096a2:	aa12      	add	r2, sp, #72	; 0x48
 80096a4:	4630      	mov	r0, r6
 80096a6:	f001 f84d 	bl	800a744 <__d2b>
 80096aa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80096ae:	4605      	mov	r5, r0
 80096b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096b2:	2900      	cmp	r1, #0
 80096b4:	d047      	beq.n	8009746 <_dtoa_r+0x17e>
 80096b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80096bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80096c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096c8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80096cc:	2400      	movs	r4, #0
 80096ce:	ec43 2b16 	vmov	d6, r2, r3
 80096d2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80096d6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009888 <_dtoa_r+0x2c0>
 80096da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096de:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009890 <_dtoa_r+0x2c8>
 80096e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80096e6:	eeb0 7b46 	vmov.f64	d7, d6
 80096ea:	ee06 1a90 	vmov	s13, r1
 80096ee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80096f2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009898 <_dtoa_r+0x2d0>
 80096f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80096fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80096fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009706:	ee16 ba90 	vmov	fp, s13
 800970a:	9411      	str	r4, [sp, #68]	; 0x44
 800970c:	d508      	bpl.n	8009720 <_dtoa_r+0x158>
 800970e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009712:	eeb4 6b47 	vcmp.f64	d6, d7
 8009716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971a:	bf18      	it	ne
 800971c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009720:	f1bb 0f16 	cmp.w	fp, #22
 8009724:	d832      	bhi.n	800978c <_dtoa_r+0x1c4>
 8009726:	4b64      	ldr	r3, [pc, #400]	; (80098b8 <_dtoa_r+0x2f0>)
 8009728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800972c:	ed93 7b00 	vldr	d7, [r3]
 8009730:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009734:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973c:	d501      	bpl.n	8009742 <_dtoa_r+0x17a>
 800973e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009742:	2300      	movs	r3, #0
 8009744:	e023      	b.n	800978e <_dtoa_r+0x1c6>
 8009746:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009748:	4401      	add	r1, r0
 800974a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800974e:	2b20      	cmp	r3, #32
 8009750:	bfc3      	ittte	gt
 8009752:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009756:	fa04 f303 	lslgt.w	r3, r4, r3
 800975a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800975e:	f1c3 0320 	rsble	r3, r3, #32
 8009762:	bfc6      	itte	gt
 8009764:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009768:	ea43 0308 	orrgt.w	r3, r3, r8
 800976c:	fa08 f303 	lslle.w	r3, r8, r3
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009778:	3901      	subs	r1, #1
 800977a:	ed8d 7b00 	vstr	d7, [sp]
 800977e:	9c01      	ldr	r4, [sp, #4]
 8009780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009784:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009788:	2401      	movs	r4, #1
 800978a:	e7a0      	b.n	80096ce <_dtoa_r+0x106>
 800978c:	2301      	movs	r3, #1
 800978e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009790:	1a43      	subs	r3, r0, r1
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	bf45      	ittet	mi
 8009796:	f1c3 0301 	rsbmi	r3, r3, #1
 800979a:	9305      	strmi	r3, [sp, #20]
 800979c:	2300      	movpl	r3, #0
 800979e:	2300      	movmi	r3, #0
 80097a0:	9206      	str	r2, [sp, #24]
 80097a2:	bf54      	ite	pl
 80097a4:	9305      	strpl	r3, [sp, #20]
 80097a6:	9306      	strmi	r3, [sp, #24]
 80097a8:	f1bb 0f00 	cmp.w	fp, #0
 80097ac:	db18      	blt.n	80097e0 <_dtoa_r+0x218>
 80097ae:	9b06      	ldr	r3, [sp, #24]
 80097b0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80097b4:	445b      	add	r3, fp
 80097b6:	9306      	str	r3, [sp, #24]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9a07      	ldr	r2, [sp, #28]
 80097bc:	2a09      	cmp	r2, #9
 80097be:	d849      	bhi.n	8009854 <_dtoa_r+0x28c>
 80097c0:	2a05      	cmp	r2, #5
 80097c2:	bfc4      	itt	gt
 80097c4:	3a04      	subgt	r2, #4
 80097c6:	9207      	strgt	r2, [sp, #28]
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	f1a2 0202 	sub.w	r2, r2, #2
 80097ce:	bfcc      	ite	gt
 80097d0:	2400      	movgt	r4, #0
 80097d2:	2401      	movle	r4, #1
 80097d4:	2a03      	cmp	r2, #3
 80097d6:	d848      	bhi.n	800986a <_dtoa_r+0x2a2>
 80097d8:	e8df f002 	tbb	[pc, r2]
 80097dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80097e0:	9b05      	ldr	r3, [sp, #20]
 80097e2:	2200      	movs	r2, #0
 80097e4:	eba3 030b 	sub.w	r3, r3, fp
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	920e      	str	r2, [sp, #56]	; 0x38
 80097ec:	f1cb 0300 	rsb	r3, fp, #0
 80097f0:	e7e3      	b.n	80097ba <_dtoa_r+0x1f2>
 80097f2:	2200      	movs	r2, #0
 80097f4:	9208      	str	r2, [sp, #32]
 80097f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	dc39      	bgt.n	8009870 <_dtoa_r+0x2a8>
 80097fc:	f04f 0a01 	mov.w	sl, #1
 8009800:	46d1      	mov	r9, sl
 8009802:	4652      	mov	r2, sl
 8009804:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009808:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800980a:	2100      	movs	r1, #0
 800980c:	6079      	str	r1, [r7, #4]
 800980e:	2004      	movs	r0, #4
 8009810:	f100 0c14 	add.w	ip, r0, #20
 8009814:	4594      	cmp	ip, r2
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	d92f      	bls.n	800987a <_dtoa_r+0x2b2>
 800981a:	4630      	mov	r0, r6
 800981c:	930c      	str	r3, [sp, #48]	; 0x30
 800981e:	f000 fc6f 	bl	800a100 <_Balloc>
 8009822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009824:	9000      	str	r0, [sp, #0]
 8009826:	4602      	mov	r2, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	d149      	bne.n	80098c0 <_dtoa_r+0x2f8>
 800982c:	4b23      	ldr	r3, [pc, #140]	; (80098bc <_dtoa_r+0x2f4>)
 800982e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009832:	e6df      	b.n	80095f4 <_dtoa_r+0x2c>
 8009834:	2201      	movs	r2, #1
 8009836:	e7dd      	b.n	80097f4 <_dtoa_r+0x22c>
 8009838:	2200      	movs	r2, #0
 800983a:	9208      	str	r2, [sp, #32]
 800983c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800983e:	eb0b 0a02 	add.w	sl, fp, r2
 8009842:	f10a 0901 	add.w	r9, sl, #1
 8009846:	464a      	mov	r2, r9
 8009848:	2a01      	cmp	r2, #1
 800984a:	bfb8      	it	lt
 800984c:	2201      	movlt	r2, #1
 800984e:	e7db      	b.n	8009808 <_dtoa_r+0x240>
 8009850:	2201      	movs	r2, #1
 8009852:	e7f2      	b.n	800983a <_dtoa_r+0x272>
 8009854:	2401      	movs	r4, #1
 8009856:	2200      	movs	r2, #0
 8009858:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800985c:	f04f 3aff 	mov.w	sl, #4294967295
 8009860:	2100      	movs	r1, #0
 8009862:	46d1      	mov	r9, sl
 8009864:	2212      	movs	r2, #18
 8009866:	9109      	str	r1, [sp, #36]	; 0x24
 8009868:	e7ce      	b.n	8009808 <_dtoa_r+0x240>
 800986a:	2201      	movs	r2, #1
 800986c:	9208      	str	r2, [sp, #32]
 800986e:	e7f5      	b.n	800985c <_dtoa_r+0x294>
 8009870:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009874:	46d1      	mov	r9, sl
 8009876:	4652      	mov	r2, sl
 8009878:	e7c6      	b.n	8009808 <_dtoa_r+0x240>
 800987a:	3101      	adds	r1, #1
 800987c:	6079      	str	r1, [r7, #4]
 800987e:	0040      	lsls	r0, r0, #1
 8009880:	e7c6      	b.n	8009810 <_dtoa_r+0x248>
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	636f4361 	.word	0x636f4361
 800988c:	3fd287a7 	.word	0x3fd287a7
 8009890:	8b60c8b3 	.word	0x8b60c8b3
 8009894:	3fc68a28 	.word	0x3fc68a28
 8009898:	509f79fb 	.word	0x509f79fb
 800989c:	3fd34413 	.word	0x3fd34413
 80098a0:	0800bb35 	.word	0x0800bb35
 80098a4:	0800bb4c 	.word	0x0800bb4c
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	0800bb31 	.word	0x0800bb31
 80098b0:	0800bb28 	.word	0x0800bb28
 80098b4:	0800bb05 	.word	0x0800bb05
 80098b8:	0800bc48 	.word	0x0800bc48
 80098bc:	0800bbab 	.word	0x0800bbab
 80098c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80098c2:	9900      	ldr	r1, [sp, #0]
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	f1b9 0f0e 	cmp.w	r9, #14
 80098ca:	d872      	bhi.n	80099b2 <_dtoa_r+0x3ea>
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d070      	beq.n	80099b2 <_dtoa_r+0x3ea>
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	f340 80a6 	ble.w	8009a24 <_dtoa_r+0x45c>
 80098d8:	49ca      	ldr	r1, [pc, #808]	; (8009c04 <_dtoa_r+0x63c>)
 80098da:	f00b 020f 	and.w	r2, fp, #15
 80098de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80098e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098e6:	ed92 7b00 	vldr	d7, [r2]
 80098ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80098ee:	f000 808d 	beq.w	8009a0c <_dtoa_r+0x444>
 80098f2:	4ac5      	ldr	r2, [pc, #788]	; (8009c08 <_dtoa_r+0x640>)
 80098f4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80098f8:	ed92 6b08 	vldr	d6, [r2, #32]
 80098fc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009900:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009904:	f001 010f 	and.w	r1, r1, #15
 8009908:	2203      	movs	r2, #3
 800990a:	48bf      	ldr	r0, [pc, #764]	; (8009c08 <_dtoa_r+0x640>)
 800990c:	2900      	cmp	r1, #0
 800990e:	d17f      	bne.n	8009a10 <_dtoa_r+0x448>
 8009910:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009914:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009918:	ed8d 7b02 	vstr	d7, [sp, #8]
 800991c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800991e:	2900      	cmp	r1, #0
 8009920:	f000 80b2 	beq.w	8009a88 <_dtoa_r+0x4c0>
 8009924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800992c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009934:	f140 80a8 	bpl.w	8009a88 <_dtoa_r+0x4c0>
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	f000 80a4 	beq.w	8009a88 <_dtoa_r+0x4c0>
 8009940:	f1ba 0f00 	cmp.w	sl, #0
 8009944:	dd31      	ble.n	80099aa <_dtoa_r+0x3e2>
 8009946:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800994a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800994e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009952:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009956:	3201      	adds	r2, #1
 8009958:	4650      	mov	r0, sl
 800995a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800995e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009962:	ee07 2a90 	vmov	s15, r2
 8009966:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800996a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800996e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009972:	9c03      	ldr	r4, [sp, #12]
 8009974:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009978:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800997c:	2800      	cmp	r0, #0
 800997e:	f040 8086 	bne.w	8009a8e <_dtoa_r+0x4c6>
 8009982:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009986:	ee36 6b47 	vsub.f64	d6, d6, d7
 800998a:	ec42 1b17 	vmov	d7, r1, r2
 800998e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009996:	f300 8272 	bgt.w	8009e7e <_dtoa_r+0x8b6>
 800999a:	eeb1 7b47 	vneg.f64	d7, d7
 800999e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a6:	f100 8267 	bmi.w	8009e78 <_dtoa_r+0x8b0>
 80099aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80099ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80099b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	f2c0 8129 	blt.w	8009c0c <_dtoa_r+0x644>
 80099ba:	f1bb 0f0e 	cmp.w	fp, #14
 80099be:	f300 8125 	bgt.w	8009c0c <_dtoa_r+0x644>
 80099c2:	4b90      	ldr	r3, [pc, #576]	; (8009c04 <_dtoa_r+0x63c>)
 80099c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099c8:	ed93 6b00 	vldr	d6, [r3]
 80099cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f280 80c3 	bge.w	8009b5a <_dtoa_r+0x592>
 80099d4:	f1b9 0f00 	cmp.w	r9, #0
 80099d8:	f300 80bf 	bgt.w	8009b5a <_dtoa_r+0x592>
 80099dc:	f040 824c 	bne.w	8009e78 <_dtoa_r+0x8b0>
 80099e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80099e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80099e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f4:	464c      	mov	r4, r9
 80099f6:	464f      	mov	r7, r9
 80099f8:	f280 8222 	bge.w	8009e40 <_dtoa_r+0x878>
 80099fc:	f8dd 8000 	ldr.w	r8, [sp]
 8009a00:	2331      	movs	r3, #49	; 0x31
 8009a02:	f808 3b01 	strb.w	r3, [r8], #1
 8009a06:	f10b 0b01 	add.w	fp, fp, #1
 8009a0a:	e21e      	b.n	8009e4a <_dtoa_r+0x882>
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	e77c      	b.n	800990a <_dtoa_r+0x342>
 8009a10:	07cc      	lsls	r4, r1, #31
 8009a12:	d504      	bpl.n	8009a1e <_dtoa_r+0x456>
 8009a14:	ed90 6b00 	vldr	d6, [r0]
 8009a18:	3201      	adds	r2, #1
 8009a1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a1e:	1049      	asrs	r1, r1, #1
 8009a20:	3008      	adds	r0, #8
 8009a22:	e773      	b.n	800990c <_dtoa_r+0x344>
 8009a24:	d02e      	beq.n	8009a84 <_dtoa_r+0x4bc>
 8009a26:	f1cb 0100 	rsb	r1, fp, #0
 8009a2a:	4a76      	ldr	r2, [pc, #472]	; (8009c04 <_dtoa_r+0x63c>)
 8009a2c:	f001 000f 	and.w	r0, r1, #15
 8009a30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a34:	ed92 7b00 	vldr	d7, [r2]
 8009a38:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009a3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a40:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009a44:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009a48:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009a4c:	486e      	ldr	r0, [pc, #440]	; (8009c08 <_dtoa_r+0x640>)
 8009a4e:	1109      	asrs	r1, r1, #4
 8009a50:	2400      	movs	r4, #0
 8009a52:	2202      	movs	r2, #2
 8009a54:	b939      	cbnz	r1, 8009a66 <_dtoa_r+0x49e>
 8009a56:	2c00      	cmp	r4, #0
 8009a58:	f43f af60 	beq.w	800991c <_dtoa_r+0x354>
 8009a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a64:	e75a      	b.n	800991c <_dtoa_r+0x354>
 8009a66:	07cf      	lsls	r7, r1, #31
 8009a68:	d509      	bpl.n	8009a7e <_dtoa_r+0x4b6>
 8009a6a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009a6e:	ed90 7b00 	vldr	d7, [r0]
 8009a72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a76:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	2401      	movs	r4, #1
 8009a7e:	1049      	asrs	r1, r1, #1
 8009a80:	3008      	adds	r0, #8
 8009a82:	e7e7      	b.n	8009a54 <_dtoa_r+0x48c>
 8009a84:	2202      	movs	r2, #2
 8009a86:	e749      	b.n	800991c <_dtoa_r+0x354>
 8009a88:	465f      	mov	r7, fp
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	e765      	b.n	800995a <_dtoa_r+0x392>
 8009a8e:	ec42 1b17 	vmov	d7, r1, r2
 8009a92:	4a5c      	ldr	r2, [pc, #368]	; (8009c04 <_dtoa_r+0x63c>)
 8009a94:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a98:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009a9c:	9a00      	ldr	r2, [sp, #0]
 8009a9e:	1814      	adds	r4, r2, r0
 8009aa0:	9a08      	ldr	r2, [sp, #32]
 8009aa2:	b352      	cbz	r2, 8009afa <_dtoa_r+0x532>
 8009aa4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009aa8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009aac:	f8dd 8000 	ldr.w	r8, [sp]
 8009ab0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009ab4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ab8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009abc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ac0:	ee14 2a90 	vmov	r2, s9
 8009ac4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ac8:	3230      	adds	r2, #48	; 0x30
 8009aca:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ace:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad6:	f808 2b01 	strb.w	r2, [r8], #1
 8009ada:	d439      	bmi.n	8009b50 <_dtoa_r+0x588>
 8009adc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009ae0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	d472      	bmi.n	8009bd0 <_dtoa_r+0x608>
 8009aea:	45a0      	cmp	r8, r4
 8009aec:	f43f af5d 	beq.w	80099aa <_dtoa_r+0x3e2>
 8009af0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009af4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009af8:	e7e0      	b.n	8009abc <_dtoa_r+0x4f4>
 8009afa:	f8dd 8000 	ldr.w	r8, [sp]
 8009afe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b02:	4621      	mov	r1, r4
 8009b04:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009b08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009b0c:	ee14 2a90 	vmov	r2, s9
 8009b10:	3230      	adds	r2, #48	; 0x30
 8009b12:	f808 2b01 	strb.w	r2, [r8], #1
 8009b16:	45a0      	cmp	r8, r4
 8009b18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009b1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009b20:	d118      	bne.n	8009b54 <_dtoa_r+0x58c>
 8009b22:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009b26:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b2a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b32:	dc4d      	bgt.n	8009bd0 <_dtoa_r+0x608>
 8009b34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009b38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	f57f af33 	bpl.w	80099aa <_dtoa_r+0x3e2>
 8009b44:	4688      	mov	r8, r1
 8009b46:	3901      	subs	r1, #1
 8009b48:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009b4c:	2b30      	cmp	r3, #48	; 0x30
 8009b4e:	d0f9      	beq.n	8009b44 <_dtoa_r+0x57c>
 8009b50:	46bb      	mov	fp, r7
 8009b52:	e02a      	b.n	8009baa <_dtoa_r+0x5e2>
 8009b54:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b58:	e7d6      	b.n	8009b08 <_dtoa_r+0x540>
 8009b5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b5e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009b62:	f8dd 8000 	ldr.w	r8, [sp]
 8009b66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b6e:	ee15 3a10 	vmov	r3, s10
 8009b72:	3330      	adds	r3, #48	; 0x30
 8009b74:	f808 3b01 	strb.w	r3, [r8], #1
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	eba8 0303 	sub.w	r3, r8, r3
 8009b7e:	4599      	cmp	r9, r3
 8009b80:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b84:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b88:	d133      	bne.n	8009bf2 <_dtoa_r+0x62a>
 8009b8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b96:	dc1a      	bgt.n	8009bce <_dtoa_r+0x606>
 8009b98:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba0:	d103      	bne.n	8009baa <_dtoa_r+0x5e2>
 8009ba2:	ee15 3a10 	vmov	r3, s10
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d411      	bmi.n	8009bce <_dtoa_r+0x606>
 8009baa:	4629      	mov	r1, r5
 8009bac:	4630      	mov	r0, r6
 8009bae:	f000 fae7 	bl	800a180 <_Bfree>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bb6:	f888 3000 	strb.w	r3, [r8]
 8009bba:	f10b 0301 	add.w	r3, fp, #1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f43f ad4d 	beq.w	8009662 <_dtoa_r+0x9a>
 8009bc8:	f8c3 8000 	str.w	r8, [r3]
 8009bcc:	e549      	b.n	8009662 <_dtoa_r+0x9a>
 8009bce:	465f      	mov	r7, fp
 8009bd0:	4643      	mov	r3, r8
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd8:	2a39      	cmp	r2, #57	; 0x39
 8009bda:	d106      	bne.n	8009bea <_dtoa_r+0x622>
 8009bdc:	9a00      	ldr	r2, [sp, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d1f7      	bne.n	8009bd2 <_dtoa_r+0x60a>
 8009be2:	9900      	ldr	r1, [sp, #0]
 8009be4:	2230      	movs	r2, #48	; 0x30
 8009be6:	3701      	adds	r7, #1
 8009be8:	700a      	strb	r2, [r1, #0]
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	3201      	adds	r2, #1
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	e7ae      	b.n	8009b50 <_dtoa_r+0x588>
 8009bf2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfe:	d1b2      	bne.n	8009b66 <_dtoa_r+0x59e>
 8009c00:	e7d3      	b.n	8009baa <_dtoa_r+0x5e2>
 8009c02:	bf00      	nop
 8009c04:	0800bc48 	.word	0x0800bc48
 8009c08:	0800bc20 	.word	0x0800bc20
 8009c0c:	9908      	ldr	r1, [sp, #32]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	f000 80d1 	beq.w	8009db6 <_dtoa_r+0x7ee>
 8009c14:	9907      	ldr	r1, [sp, #28]
 8009c16:	2901      	cmp	r1, #1
 8009c18:	f300 80b4 	bgt.w	8009d84 <_dtoa_r+0x7bc>
 8009c1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	f000 80ac 	beq.w	8009d7c <_dtoa_r+0x7b4>
 8009c24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009c2c:	461c      	mov	r4, r3
 8009c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c30:	9b05      	ldr	r3, [sp, #20]
 8009c32:	4413      	add	r3, r2
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	2101      	movs	r1, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	9306      	str	r3, [sp, #24]
 8009c40:	f000 fb5a 	bl	800a2f8 <__i2b>
 8009c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c46:	4607      	mov	r7, r0
 8009c48:	f1b8 0f00 	cmp.w	r8, #0
 8009c4c:	dd0d      	ble.n	8009c6a <_dtoa_r+0x6a2>
 8009c4e:	9a06      	ldr	r2, [sp, #24]
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	dd0a      	ble.n	8009c6a <_dtoa_r+0x6a2>
 8009c54:	4542      	cmp	r2, r8
 8009c56:	9905      	ldr	r1, [sp, #20]
 8009c58:	bfa8      	it	ge
 8009c5a:	4642      	movge	r2, r8
 8009c5c:	1a89      	subs	r1, r1, r2
 8009c5e:	9105      	str	r1, [sp, #20]
 8009c60:	9906      	ldr	r1, [sp, #24]
 8009c62:	eba8 0802 	sub.w	r8, r8, r2
 8009c66:	1a8a      	subs	r2, r1, r2
 8009c68:	9206      	str	r2, [sp, #24]
 8009c6a:	b303      	cbz	r3, 8009cae <_dtoa_r+0x6e6>
 8009c6c:	9a08      	ldr	r2, [sp, #32]
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	f000 80a6 	beq.w	8009dc0 <_dtoa_r+0x7f8>
 8009c74:	2c00      	cmp	r4, #0
 8009c76:	dd13      	ble.n	8009ca0 <_dtoa_r+0x6d8>
 8009c78:	4639      	mov	r1, r7
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c80:	f000 fbf6 	bl	800a470 <__pow5mult>
 8009c84:	462a      	mov	r2, r5
 8009c86:	4601      	mov	r1, r0
 8009c88:	4607      	mov	r7, r0
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 fb4a 	bl	800a324 <__multiply>
 8009c90:	4629      	mov	r1, r5
 8009c92:	900a      	str	r0, [sp, #40]	; 0x28
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 fa73 	bl	800a180 <_Bfree>
 8009c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9e:	4615      	mov	r5, r2
 8009ca0:	1b1a      	subs	r2, r3, r4
 8009ca2:	d004      	beq.n	8009cae <_dtoa_r+0x6e6>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f000 fbe2 	bl	800a470 <__pow5mult>
 8009cac:	4605      	mov	r5, r0
 8009cae:	2101      	movs	r1, #1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f000 fb21 	bl	800a2f8 <__i2b>
 8009cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	f340 8082 	ble.w	8009dc4 <_dtoa_r+0x7fc>
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 fbd3 	bl	800a470 <__pow5mult>
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	4604      	mov	r4, r0
 8009cd0:	dd7b      	ble.n	8009dca <_dtoa_r+0x802>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd6:	6922      	ldr	r2, [r4, #16]
 8009cd8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cdc:	6910      	ldr	r0, [r2, #16]
 8009cde:	f000 fabb 	bl	800a258 <__hi0bits>
 8009ce2:	f1c0 0020 	rsb	r0, r0, #32
 8009ce6:	9b06      	ldr	r3, [sp, #24]
 8009ce8:	4418      	add	r0, r3
 8009cea:	f010 001f 	ands.w	r0, r0, #31
 8009cee:	f000 808d 	beq.w	8009e0c <_dtoa_r+0x844>
 8009cf2:	f1c0 0220 	rsb	r2, r0, #32
 8009cf6:	2a04      	cmp	r2, #4
 8009cf8:	f340 8086 	ble.w	8009e08 <_dtoa_r+0x840>
 8009cfc:	f1c0 001c 	rsb	r0, r0, #28
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	4403      	add	r3, r0
 8009d04:	9305      	str	r3, [sp, #20]
 8009d06:	9b06      	ldr	r3, [sp, #24]
 8009d08:	4403      	add	r3, r0
 8009d0a:	4480      	add	r8, r0
 8009d0c:	9306      	str	r3, [sp, #24]
 8009d0e:	9b05      	ldr	r3, [sp, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dd05      	ble.n	8009d20 <_dtoa_r+0x758>
 8009d14:	4629      	mov	r1, r5
 8009d16:	461a      	mov	r2, r3
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 fc03 	bl	800a524 <__lshift>
 8009d1e:	4605      	mov	r5, r0
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dd05      	ble.n	8009d32 <_dtoa_r+0x76a>
 8009d26:	4621      	mov	r1, r4
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f000 fbfa 	bl	800a524 <__lshift>
 8009d30:	4604      	mov	r4, r0
 8009d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d06b      	beq.n	8009e10 <_dtoa_r+0x848>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 fc5e 	bl	800a5fc <__mcmp>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	da65      	bge.n	8009e10 <_dtoa_r+0x848>
 8009d44:	2300      	movs	r3, #0
 8009d46:	4629      	mov	r1, r5
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 fa3a 	bl	800a1c4 <__multadd>
 8009d50:	9b08      	ldr	r3, [sp, #32]
 8009d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d56:	4605      	mov	r5, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 8192 	beq.w	800a082 <_dtoa_r+0xaba>
 8009d5e:	4639      	mov	r1, r7
 8009d60:	2300      	movs	r3, #0
 8009d62:	220a      	movs	r2, #10
 8009d64:	4630      	mov	r0, r6
 8009d66:	f000 fa2d 	bl	800a1c4 <__multadd>
 8009d6a:	f1ba 0f00 	cmp.w	sl, #0
 8009d6e:	4607      	mov	r7, r0
 8009d70:	f300 808e 	bgt.w	8009e90 <_dtoa_r+0x8c8>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	dc51      	bgt.n	8009e1e <_dtoa_r+0x856>
 8009d7a:	e089      	b.n	8009e90 <_dtoa_r+0x8c8>
 8009d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d82:	e751      	b.n	8009c28 <_dtoa_r+0x660>
 8009d84:	f109 34ff 	add.w	r4, r9, #4294967295
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	bfbf      	itttt	lt
 8009d8c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009d8e:	1ae3      	sublt	r3, r4, r3
 8009d90:	18d2      	addlt	r2, r2, r3
 8009d92:	4613      	movlt	r3, r2
 8009d94:	bfb7      	itett	lt
 8009d96:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009d98:	1b1c      	subge	r4, r3, r4
 8009d9a:	4623      	movlt	r3, r4
 8009d9c:	2400      	movlt	r4, #0
 8009d9e:	f1b9 0f00 	cmp.w	r9, #0
 8009da2:	bfb5      	itete	lt
 8009da4:	9a05      	ldrlt	r2, [sp, #20]
 8009da6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009daa:	eba2 0809 	sublt.w	r8, r2, r9
 8009dae:	464a      	movge	r2, r9
 8009db0:	bfb8      	it	lt
 8009db2:	2200      	movlt	r2, #0
 8009db4:	e73b      	b.n	8009c2e <_dtoa_r+0x666>
 8009db6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009dba:	9f08      	ldr	r7, [sp, #32]
 8009dbc:	461c      	mov	r4, r3
 8009dbe:	e743      	b.n	8009c48 <_dtoa_r+0x680>
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	e76f      	b.n	8009ca4 <_dtoa_r+0x6dc>
 8009dc4:	9b07      	ldr	r3, [sp, #28]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	dc18      	bgt.n	8009dfc <_dtoa_r+0x834>
 8009dca:	9b02      	ldr	r3, [sp, #8]
 8009dcc:	b9b3      	cbnz	r3, 8009dfc <_dtoa_r+0x834>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009dd4:	b9a2      	cbnz	r2, 8009e00 <_dtoa_r+0x838>
 8009dd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009dda:	0d12      	lsrs	r2, r2, #20
 8009ddc:	0512      	lsls	r2, r2, #20
 8009dde:	b18a      	cbz	r2, 8009e04 <_dtoa_r+0x83c>
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	3301      	adds	r3, #1
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	9b06      	ldr	r3, [sp, #24]
 8009de8:	3301      	adds	r3, #1
 8009dea:	9306      	str	r3, [sp, #24]
 8009dec:	2301      	movs	r3, #1
 8009dee:	930a      	str	r3, [sp, #40]	; 0x28
 8009df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f47f af6f 	bne.w	8009cd6 <_dtoa_r+0x70e>
 8009df8:	2001      	movs	r0, #1
 8009dfa:	e774      	b.n	8009ce6 <_dtoa_r+0x71e>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e7f6      	b.n	8009dee <_dtoa_r+0x826>
 8009e00:	9b02      	ldr	r3, [sp, #8]
 8009e02:	e7f4      	b.n	8009dee <_dtoa_r+0x826>
 8009e04:	920a      	str	r2, [sp, #40]	; 0x28
 8009e06:	e7f3      	b.n	8009df0 <_dtoa_r+0x828>
 8009e08:	d081      	beq.n	8009d0e <_dtoa_r+0x746>
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	301c      	adds	r0, #28
 8009e0e:	e777      	b.n	8009d00 <_dtoa_r+0x738>
 8009e10:	f1b9 0f00 	cmp.w	r9, #0
 8009e14:	dc37      	bgt.n	8009e86 <_dtoa_r+0x8be>
 8009e16:	9b07      	ldr	r3, [sp, #28]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	dd34      	ble.n	8009e86 <_dtoa_r+0x8be>
 8009e1c:	46ca      	mov	sl, r9
 8009e1e:	f1ba 0f00 	cmp.w	sl, #0
 8009e22:	d10d      	bne.n	8009e40 <_dtoa_r+0x878>
 8009e24:	4621      	mov	r1, r4
 8009e26:	4653      	mov	r3, sl
 8009e28:	2205      	movs	r2, #5
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f000 f9ca 	bl	800a1c4 <__multadd>
 8009e30:	4601      	mov	r1, r0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4628      	mov	r0, r5
 8009e36:	f000 fbe1 	bl	800a5fc <__mcmp>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f73f adde 	bgt.w	80099fc <_dtoa_r+0x434>
 8009e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e42:	f8dd 8000 	ldr.w	r8, [sp]
 8009e46:	ea6f 0b03 	mvn.w	fp, r3
 8009e4a:	f04f 0900 	mov.w	r9, #0
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f995 	bl	800a180 <_Bfree>
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	f43f aea7 	beq.w	8009baa <_dtoa_r+0x5e2>
 8009e5c:	f1b9 0f00 	cmp.w	r9, #0
 8009e60:	d005      	beq.n	8009e6e <_dtoa_r+0x8a6>
 8009e62:	45b9      	cmp	r9, r7
 8009e64:	d003      	beq.n	8009e6e <_dtoa_r+0x8a6>
 8009e66:	4649      	mov	r1, r9
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f000 f989 	bl	800a180 <_Bfree>
 8009e6e:	4639      	mov	r1, r7
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 f985 	bl	800a180 <_Bfree>
 8009e76:	e698      	b.n	8009baa <_dtoa_r+0x5e2>
 8009e78:	2400      	movs	r4, #0
 8009e7a:	4627      	mov	r7, r4
 8009e7c:	e7e0      	b.n	8009e40 <_dtoa_r+0x878>
 8009e7e:	46bb      	mov	fp, r7
 8009e80:	4604      	mov	r4, r0
 8009e82:	4607      	mov	r7, r0
 8009e84:	e5ba      	b.n	80099fc <_dtoa_r+0x434>
 8009e86:	9b08      	ldr	r3, [sp, #32]
 8009e88:	46ca      	mov	sl, r9
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8100 	beq.w	800a090 <_dtoa_r+0xac8>
 8009e90:	f1b8 0f00 	cmp.w	r8, #0
 8009e94:	dd05      	ble.n	8009ea2 <_dtoa_r+0x8da>
 8009e96:	4639      	mov	r1, r7
 8009e98:	4642      	mov	r2, r8
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f000 fb42 	bl	800a524 <__lshift>
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d05d      	beq.n	8009f64 <_dtoa_r+0x99c>
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f928 	bl	800a100 <_Balloc>
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	b928      	cbnz	r0, 8009ec0 <_dtoa_r+0x8f8>
 8009eb4:	4b82      	ldr	r3, [pc, #520]	; (800a0c0 <_dtoa_r+0xaf8>)
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ebc:	f7ff bb9a 	b.w	80095f4 <_dtoa_r+0x2c>
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	3202      	adds	r2, #2
 8009ec4:	0092      	lsls	r2, r2, #2
 8009ec6:	f107 010c 	add.w	r1, r7, #12
 8009eca:	300c      	adds	r0, #12
 8009ecc:	f000 f90a 	bl	800a0e4 <memcpy>
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 fb25 	bl	800a524 <__lshift>
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	9b00      	ldr	r3, [sp, #0]
 8009ee2:	4453      	add	r3, sl
 8009ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee6:	9b02      	ldr	r3, [sp, #8]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	46b9      	mov	r9, r7
 8009eee:	9308      	str	r3, [sp, #32]
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	9b05      	ldr	r3, [sp, #20]
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4628      	mov	r0, r5
 8009efa:	9302      	str	r3, [sp, #8]
 8009efc:	f7ff fad6 	bl	80094ac <quorem>
 8009f00:	4603      	mov	r3, r0
 8009f02:	3330      	adds	r3, #48	; 0x30
 8009f04:	9006      	str	r0, [sp, #24]
 8009f06:	4649      	mov	r1, r9
 8009f08:	4628      	mov	r0, r5
 8009f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f0c:	f000 fb76 	bl	800a5fc <__mcmp>
 8009f10:	463a      	mov	r2, r7
 8009f12:	4682      	mov	sl, r0
 8009f14:	4621      	mov	r1, r4
 8009f16:	4630      	mov	r0, r6
 8009f18:	f000 fb8c 	bl	800a634 <__mdiff>
 8009f1c:	68c2      	ldr	r2, [r0, #12]
 8009f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f20:	4680      	mov	r8, r0
 8009f22:	bb0a      	cbnz	r2, 8009f68 <_dtoa_r+0x9a0>
 8009f24:	4601      	mov	r1, r0
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 fb68 	bl	800a5fc <__mcmp>
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4641      	mov	r1, r8
 8009f32:	4630      	mov	r0, r6
 8009f34:	920e      	str	r2, [sp, #56]	; 0x38
 8009f36:	930a      	str	r3, [sp, #40]	; 0x28
 8009f38:	f000 f922 	bl	800a180 <_Bfree>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f44:	ea43 0102 	orr.w	r1, r3, r2
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4e:	d10d      	bne.n	8009f6c <_dtoa_r+0x9a4>
 8009f50:	2b39      	cmp	r3, #57	; 0x39
 8009f52:	d029      	beq.n	8009fa8 <_dtoa_r+0x9e0>
 8009f54:	f1ba 0f00 	cmp.w	sl, #0
 8009f58:	dd01      	ble.n	8009f5e <_dtoa_r+0x996>
 8009f5a:	9b06      	ldr	r3, [sp, #24]
 8009f5c:	3331      	adds	r3, #49	; 0x31
 8009f5e:	9a02      	ldr	r2, [sp, #8]
 8009f60:	7013      	strb	r3, [r2, #0]
 8009f62:	e774      	b.n	8009e4e <_dtoa_r+0x886>
 8009f64:	4638      	mov	r0, r7
 8009f66:	e7b8      	b.n	8009eda <_dtoa_r+0x912>
 8009f68:	2201      	movs	r2, #1
 8009f6a:	e7e1      	b.n	8009f30 <_dtoa_r+0x968>
 8009f6c:	f1ba 0f00 	cmp.w	sl, #0
 8009f70:	db06      	blt.n	8009f80 <_dtoa_r+0x9b8>
 8009f72:	9907      	ldr	r1, [sp, #28]
 8009f74:	ea41 0a0a 	orr.w	sl, r1, sl
 8009f78:	9908      	ldr	r1, [sp, #32]
 8009f7a:	ea5a 0101 	orrs.w	r1, sl, r1
 8009f7e:	d120      	bne.n	8009fc2 <_dtoa_r+0x9fa>
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	ddec      	ble.n	8009f5e <_dtoa_r+0x996>
 8009f84:	4629      	mov	r1, r5
 8009f86:	2201      	movs	r2, #1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	9305      	str	r3, [sp, #20]
 8009f8c:	f000 faca 	bl	800a524 <__lshift>
 8009f90:	4621      	mov	r1, r4
 8009f92:	4605      	mov	r5, r0
 8009f94:	f000 fb32 	bl	800a5fc <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	dc02      	bgt.n	8009fa4 <_dtoa_r+0x9dc>
 8009f9e:	d1de      	bne.n	8009f5e <_dtoa_r+0x996>
 8009fa0:	07da      	lsls	r2, r3, #31
 8009fa2:	d5dc      	bpl.n	8009f5e <_dtoa_r+0x996>
 8009fa4:	2b39      	cmp	r3, #57	; 0x39
 8009fa6:	d1d8      	bne.n	8009f5a <_dtoa_r+0x992>
 8009fa8:	9a02      	ldr	r2, [sp, #8]
 8009faa:	2339      	movs	r3, #57	; 0x39
 8009fac:	7013      	strb	r3, [r2, #0]
 8009fae:	4643      	mov	r3, r8
 8009fb0:	4698      	mov	r8, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009fb8:	2a39      	cmp	r2, #57	; 0x39
 8009fba:	d051      	beq.n	800a060 <_dtoa_r+0xa98>
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e745      	b.n	8009e4e <_dtoa_r+0x886>
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	dd03      	ble.n	8009fce <_dtoa_r+0xa06>
 8009fc6:	2b39      	cmp	r3, #57	; 0x39
 8009fc8:	d0ee      	beq.n	8009fa8 <_dtoa_r+0x9e0>
 8009fca:	3301      	adds	r3, #1
 8009fcc:	e7c7      	b.n	8009f5e <_dtoa_r+0x996>
 8009fce:	9a05      	ldr	r2, [sp, #20]
 8009fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fd2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fd6:	428a      	cmp	r2, r1
 8009fd8:	d02b      	beq.n	800a032 <_dtoa_r+0xa6a>
 8009fda:	4629      	mov	r1, r5
 8009fdc:	2300      	movs	r3, #0
 8009fde:	220a      	movs	r2, #10
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f000 f8ef 	bl	800a1c4 <__multadd>
 8009fe6:	45b9      	cmp	r9, r7
 8009fe8:	4605      	mov	r5, r0
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	f04f 020a 	mov.w	r2, #10
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	d107      	bne.n	800a008 <_dtoa_r+0xa40>
 8009ff8:	f000 f8e4 	bl	800a1c4 <__multadd>
 8009ffc:	4681      	mov	r9, r0
 8009ffe:	4607      	mov	r7, r0
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	e774      	b.n	8009ef2 <_dtoa_r+0x92a>
 800a008:	f000 f8dc 	bl	800a1c4 <__multadd>
 800a00c:	4639      	mov	r1, r7
 800a00e:	4681      	mov	r9, r0
 800a010:	2300      	movs	r3, #0
 800a012:	220a      	movs	r2, #10
 800a014:	4630      	mov	r0, r6
 800a016:	f000 f8d5 	bl	800a1c4 <__multadd>
 800a01a:	4607      	mov	r7, r0
 800a01c:	e7f0      	b.n	800a000 <_dtoa_r+0xa38>
 800a01e:	f1ba 0f00 	cmp.w	sl, #0
 800a022:	9a00      	ldr	r2, [sp, #0]
 800a024:	bfcc      	ite	gt
 800a026:	46d0      	movgt	r8, sl
 800a028:	f04f 0801 	movle.w	r8, #1
 800a02c:	4490      	add	r8, r2
 800a02e:	f04f 0900 	mov.w	r9, #0
 800a032:	4629      	mov	r1, r5
 800a034:	2201      	movs	r2, #1
 800a036:	4630      	mov	r0, r6
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	f000 fa73 	bl	800a524 <__lshift>
 800a03e:	4621      	mov	r1, r4
 800a040:	4605      	mov	r5, r0
 800a042:	f000 fadb 	bl	800a5fc <__mcmp>
 800a046:	2800      	cmp	r0, #0
 800a048:	dcb1      	bgt.n	8009fae <_dtoa_r+0x9e6>
 800a04a:	d102      	bne.n	800a052 <_dtoa_r+0xa8a>
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	07db      	lsls	r3, r3, #31
 800a050:	d4ad      	bmi.n	8009fae <_dtoa_r+0x9e6>
 800a052:	4643      	mov	r3, r8
 800a054:	4698      	mov	r8, r3
 800a056:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05a:	2a30      	cmp	r2, #48	; 0x30
 800a05c:	d0fa      	beq.n	800a054 <_dtoa_r+0xa8c>
 800a05e:	e6f6      	b.n	8009e4e <_dtoa_r+0x886>
 800a060:	9a00      	ldr	r2, [sp, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d1a4      	bne.n	8009fb0 <_dtoa_r+0x9e8>
 800a066:	f10b 0b01 	add.w	fp, fp, #1
 800a06a:	2331      	movs	r3, #49	; 0x31
 800a06c:	e778      	b.n	8009f60 <_dtoa_r+0x998>
 800a06e:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <_dtoa_r+0xafc>)
 800a070:	f7ff bb12 	b.w	8009698 <_dtoa_r+0xd0>
 800a074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a076:	2b00      	cmp	r3, #0
 800a078:	f47f aaee 	bne.w	8009658 <_dtoa_r+0x90>
 800a07c:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <_dtoa_r+0xb00>)
 800a07e:	f7ff bb0b 	b.w	8009698 <_dtoa_r+0xd0>
 800a082:	f1ba 0f00 	cmp.w	sl, #0
 800a086:	dc03      	bgt.n	800a090 <_dtoa_r+0xac8>
 800a088:	9b07      	ldr	r3, [sp, #28]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	f73f aec7 	bgt.w	8009e1e <_dtoa_r+0x856>
 800a090:	f8dd 8000 	ldr.w	r8, [sp]
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	f7ff fa08 	bl	80094ac <quorem>
 800a09c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0a0:	f808 3b01 	strb.w	r3, [r8], #1
 800a0a4:	9a00      	ldr	r2, [sp, #0]
 800a0a6:	eba8 0202 	sub.w	r2, r8, r2
 800a0aa:	4592      	cmp	sl, r2
 800a0ac:	ddb7      	ble.n	800a01e <_dtoa_r+0xa56>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	220a      	movs	r2, #10
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f000 f885 	bl	800a1c4 <__multadd>
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	e7ea      	b.n	800a094 <_dtoa_r+0xacc>
 800a0be:	bf00      	nop
 800a0c0:	0800bbab 	.word	0x0800bbab
 800a0c4:	0800bb04 	.word	0x0800bb04
 800a0c8:	0800bb28 	.word	0x0800bb28

0800a0cc <_localeconv_r>:
 800a0cc:	4800      	ldr	r0, [pc, #0]	; (800a0d0 <_localeconv_r+0x4>)
 800a0ce:	4770      	bx	lr
 800a0d0:	20000174 	.word	0x20000174

0800a0d4 <malloc>:
 800a0d4:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <malloc+0xc>)
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	f000 bbef 	b.w	800a8bc <_malloc_r>
 800a0de:	bf00      	nop
 800a0e0:	20000020 	.word	0x20000020

0800a0e4 <memcpy>:
 800a0e4:	440a      	add	r2, r1
 800a0e6:	4291      	cmp	r1, r2
 800a0e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0ec:	d100      	bne.n	800a0f0 <memcpy+0xc>
 800a0ee:	4770      	bx	lr
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	d1f9      	bne.n	800a0f2 <memcpy+0xe>
 800a0fe:	bd10      	pop	{r4, pc}

0800a100 <_Balloc>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	b976      	cbnz	r6, 800a128 <_Balloc+0x28>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f7ff ffe2 	bl	800a0d4 <malloc>
 800a110:	4602      	mov	r2, r0
 800a112:	6260      	str	r0, [r4, #36]	; 0x24
 800a114:	b920      	cbnz	r0, 800a120 <_Balloc+0x20>
 800a116:	4b18      	ldr	r3, [pc, #96]	; (800a178 <_Balloc+0x78>)
 800a118:	4818      	ldr	r0, [pc, #96]	; (800a17c <_Balloc+0x7c>)
 800a11a:	2166      	movs	r1, #102	; 0x66
 800a11c:	f000 fd94 	bl	800ac48 <__assert_func>
 800a120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a124:	6006      	str	r6, [r0, #0]
 800a126:	60c6      	str	r6, [r0, #12]
 800a128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a12a:	68f3      	ldr	r3, [r6, #12]
 800a12c:	b183      	cbz	r3, 800a150 <_Balloc+0x50>
 800a12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a136:	b9b8      	cbnz	r0, 800a168 <_Balloc+0x68>
 800a138:	2101      	movs	r1, #1
 800a13a:	fa01 f605 	lsl.w	r6, r1, r5
 800a13e:	1d72      	adds	r2, r6, #5
 800a140:	0092      	lsls	r2, r2, #2
 800a142:	4620      	mov	r0, r4
 800a144:	f000 fb5a 	bl	800a7fc <_calloc_r>
 800a148:	b160      	cbz	r0, 800a164 <_Balloc+0x64>
 800a14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a14e:	e00e      	b.n	800a16e <_Balloc+0x6e>
 800a150:	2221      	movs	r2, #33	; 0x21
 800a152:	2104      	movs	r1, #4
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fb51 	bl	800a7fc <_calloc_r>
 800a15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15c:	60f0      	str	r0, [r6, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e4      	bne.n	800a12e <_Balloc+0x2e>
 800a164:	2000      	movs	r0, #0
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	6802      	ldr	r2, [r0, #0]
 800a16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a16e:	2300      	movs	r3, #0
 800a170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a174:	e7f7      	b.n	800a166 <_Balloc+0x66>
 800a176:	bf00      	nop
 800a178:	0800bb35 	.word	0x0800bb35
 800a17c:	0800bbbc 	.word	0x0800bbbc

0800a180 <_Bfree>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	b976      	cbnz	r6, 800a1a8 <_Bfree+0x28>
 800a18a:	2010      	movs	r0, #16
 800a18c:	f7ff ffa2 	bl	800a0d4 <malloc>
 800a190:	4602      	mov	r2, r0
 800a192:	6268      	str	r0, [r5, #36]	; 0x24
 800a194:	b920      	cbnz	r0, 800a1a0 <_Bfree+0x20>
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <_Bfree+0x3c>)
 800a198:	4809      	ldr	r0, [pc, #36]	; (800a1c0 <_Bfree+0x40>)
 800a19a:	218a      	movs	r1, #138	; 0x8a
 800a19c:	f000 fd54 	bl	800ac48 <__assert_func>
 800a1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a4:	6006      	str	r6, [r0, #0]
 800a1a6:	60c6      	str	r6, [r0, #12]
 800a1a8:	b13c      	cbz	r4, 800a1ba <_Bfree+0x3a>
 800a1aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1ac:	6862      	ldr	r2, [r4, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b4:	6021      	str	r1, [r4, #0]
 800a1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	0800bb35 	.word	0x0800bb35
 800a1c0:	0800bbbc 	.word	0x0800bbbc

0800a1c4 <__multadd>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	690e      	ldr	r6, [r1, #16]
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	4698      	mov	r8, r3
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	f101 0014 	add.w	r0, r1, #20
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6805      	ldr	r5, [r0, #0]
 800a1d8:	b2a9      	uxth	r1, r5
 800a1da:	fb02 8101 	mla	r1, r2, r1, r8
 800a1de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1e2:	0c2d      	lsrs	r5, r5, #16
 800a1e4:	fb02 c505 	mla	r5, r2, r5, ip
 800a1e8:	b289      	uxth	r1, r1
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a1f0:	429e      	cmp	r6, r3
 800a1f2:	f840 1b04 	str.w	r1, [r0], #4
 800a1f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1fa:	dcec      	bgt.n	800a1d6 <__multadd+0x12>
 800a1fc:	f1b8 0f00 	cmp.w	r8, #0
 800a200:	d022      	beq.n	800a248 <__multadd+0x84>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	42b3      	cmp	r3, r6
 800a206:	dc19      	bgt.n	800a23c <__multadd+0x78>
 800a208:	6861      	ldr	r1, [r4, #4]
 800a20a:	4638      	mov	r0, r7
 800a20c:	3101      	adds	r1, #1
 800a20e:	f7ff ff77 	bl	800a100 <_Balloc>
 800a212:	4605      	mov	r5, r0
 800a214:	b928      	cbnz	r0, 800a222 <__multadd+0x5e>
 800a216:	4602      	mov	r2, r0
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <__multadd+0x8c>)
 800a21a:	480e      	ldr	r0, [pc, #56]	; (800a254 <__multadd+0x90>)
 800a21c:	21b5      	movs	r1, #181	; 0xb5
 800a21e:	f000 fd13 	bl	800ac48 <__assert_func>
 800a222:	6922      	ldr	r2, [r4, #16]
 800a224:	3202      	adds	r2, #2
 800a226:	f104 010c 	add.w	r1, r4, #12
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f7ff ff59 	bl	800a0e4 <memcpy>
 800a232:	4621      	mov	r1, r4
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa3 	bl	800a180 <_Bfree>
 800a23a:	462c      	mov	r4, r5
 800a23c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a240:	3601      	adds	r6, #1
 800a242:	f8c3 8014 	str.w	r8, [r3, #20]
 800a246:	6126      	str	r6, [r4, #16]
 800a248:	4620      	mov	r0, r4
 800a24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24e:	bf00      	nop
 800a250:	0800bbab 	.word	0x0800bbab
 800a254:	0800bbbc 	.word	0x0800bbbc

0800a258 <__hi0bits>:
 800a258:	0c03      	lsrs	r3, r0, #16
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	b9d3      	cbnz	r3, 800a294 <__hi0bits+0x3c>
 800a25e:	0400      	lsls	r0, r0, #16
 800a260:	2310      	movs	r3, #16
 800a262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a266:	bf04      	itt	eq
 800a268:	0200      	lsleq	r0, r0, #8
 800a26a:	3308      	addeq	r3, #8
 800a26c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a270:	bf04      	itt	eq
 800a272:	0100      	lsleq	r0, r0, #4
 800a274:	3304      	addeq	r3, #4
 800a276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a27a:	bf04      	itt	eq
 800a27c:	0080      	lsleq	r0, r0, #2
 800a27e:	3302      	addeq	r3, #2
 800a280:	2800      	cmp	r0, #0
 800a282:	db05      	blt.n	800a290 <__hi0bits+0x38>
 800a284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a288:	f103 0301 	add.w	r3, r3, #1
 800a28c:	bf08      	it	eq
 800a28e:	2320      	moveq	r3, #32
 800a290:	4618      	mov	r0, r3
 800a292:	4770      	bx	lr
 800a294:	2300      	movs	r3, #0
 800a296:	e7e4      	b.n	800a262 <__hi0bits+0xa>

0800a298 <__lo0bits>:
 800a298:	6803      	ldr	r3, [r0, #0]
 800a29a:	f013 0207 	ands.w	r2, r3, #7
 800a29e:	4601      	mov	r1, r0
 800a2a0:	d00b      	beq.n	800a2ba <__lo0bits+0x22>
 800a2a2:	07da      	lsls	r2, r3, #31
 800a2a4:	d424      	bmi.n	800a2f0 <__lo0bits+0x58>
 800a2a6:	0798      	lsls	r0, r3, #30
 800a2a8:	bf49      	itett	mi
 800a2aa:	085b      	lsrmi	r3, r3, #1
 800a2ac:	089b      	lsrpl	r3, r3, #2
 800a2ae:	2001      	movmi	r0, #1
 800a2b0:	600b      	strmi	r3, [r1, #0]
 800a2b2:	bf5c      	itt	pl
 800a2b4:	600b      	strpl	r3, [r1, #0]
 800a2b6:	2002      	movpl	r0, #2
 800a2b8:	4770      	bx	lr
 800a2ba:	b298      	uxth	r0, r3
 800a2bc:	b9b0      	cbnz	r0, 800a2ec <__lo0bits+0x54>
 800a2be:	0c1b      	lsrs	r3, r3, #16
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2c6:	bf04      	itt	eq
 800a2c8:	0a1b      	lsreq	r3, r3, #8
 800a2ca:	3008      	addeq	r0, #8
 800a2cc:	071a      	lsls	r2, r3, #28
 800a2ce:	bf04      	itt	eq
 800a2d0:	091b      	lsreq	r3, r3, #4
 800a2d2:	3004      	addeq	r0, #4
 800a2d4:	079a      	lsls	r2, r3, #30
 800a2d6:	bf04      	itt	eq
 800a2d8:	089b      	lsreq	r3, r3, #2
 800a2da:	3002      	addeq	r0, #2
 800a2dc:	07da      	lsls	r2, r3, #31
 800a2de:	d403      	bmi.n	800a2e8 <__lo0bits+0x50>
 800a2e0:	085b      	lsrs	r3, r3, #1
 800a2e2:	f100 0001 	add.w	r0, r0, #1
 800a2e6:	d005      	beq.n	800a2f4 <__lo0bits+0x5c>
 800a2e8:	600b      	str	r3, [r1, #0]
 800a2ea:	4770      	bx	lr
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	e7e8      	b.n	800a2c2 <__lo0bits+0x2a>
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	4770      	bx	lr
 800a2f4:	2020      	movs	r0, #32
 800a2f6:	4770      	bx	lr

0800a2f8 <__i2b>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	f7ff feff 	bl	800a100 <_Balloc>
 800a302:	4602      	mov	r2, r0
 800a304:	b928      	cbnz	r0, 800a312 <__i2b+0x1a>
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <__i2b+0x24>)
 800a308:	4805      	ldr	r0, [pc, #20]	; (800a320 <__i2b+0x28>)
 800a30a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a30e:	f000 fc9b 	bl	800ac48 <__assert_func>
 800a312:	2301      	movs	r3, #1
 800a314:	6144      	str	r4, [r0, #20]
 800a316:	6103      	str	r3, [r0, #16]
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	0800bbab 	.word	0x0800bbab
 800a320:	0800bbbc 	.word	0x0800bbbc

0800a324 <__multiply>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	4614      	mov	r4, r2
 800a32a:	690a      	ldr	r2, [r1, #16]
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	bfb8      	it	lt
 800a332:	460b      	movlt	r3, r1
 800a334:	460d      	mov	r5, r1
 800a336:	bfbc      	itt	lt
 800a338:	4625      	movlt	r5, r4
 800a33a:	461c      	movlt	r4, r3
 800a33c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a340:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a344:	68ab      	ldr	r3, [r5, #8]
 800a346:	6869      	ldr	r1, [r5, #4]
 800a348:	eb0a 0709 	add.w	r7, sl, r9
 800a34c:	42bb      	cmp	r3, r7
 800a34e:	b085      	sub	sp, #20
 800a350:	bfb8      	it	lt
 800a352:	3101      	addlt	r1, #1
 800a354:	f7ff fed4 	bl	800a100 <_Balloc>
 800a358:	b930      	cbnz	r0, 800a368 <__multiply+0x44>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <__multiply+0x144>)
 800a35e:	4843      	ldr	r0, [pc, #268]	; (800a46c <__multiply+0x148>)
 800a360:	f240 115d 	movw	r1, #349	; 0x15d
 800a364:	f000 fc70 	bl	800ac48 <__assert_func>
 800a368:	f100 0614 	add.w	r6, r0, #20
 800a36c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a370:	4633      	mov	r3, r6
 800a372:	2200      	movs	r2, #0
 800a374:	4543      	cmp	r3, r8
 800a376:	d31e      	bcc.n	800a3b6 <__multiply+0x92>
 800a378:	f105 0c14 	add.w	ip, r5, #20
 800a37c:	f104 0314 	add.w	r3, r4, #20
 800a380:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a384:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a388:	9202      	str	r2, [sp, #8]
 800a38a:	ebac 0205 	sub.w	r2, ip, r5
 800a38e:	3a15      	subs	r2, #21
 800a390:	f022 0203 	bic.w	r2, r2, #3
 800a394:	3204      	adds	r2, #4
 800a396:	f105 0115 	add.w	r1, r5, #21
 800a39a:	458c      	cmp	ip, r1
 800a39c:	bf38      	it	cc
 800a39e:	2204      	movcc	r2, #4
 800a3a0:	9201      	str	r2, [sp, #4]
 800a3a2:	9a02      	ldr	r2, [sp, #8]
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d808      	bhi.n	800a3bc <__multiply+0x98>
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	dc55      	bgt.n	800a45a <__multiply+0x136>
 800a3ae:	6107      	str	r7, [r0, #16]
 800a3b0:	b005      	add	sp, #20
 800a3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b6:	f843 2b04 	str.w	r2, [r3], #4
 800a3ba:	e7db      	b.n	800a374 <__multiply+0x50>
 800a3bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3c0:	f1ba 0f00 	cmp.w	sl, #0
 800a3c4:	d020      	beq.n	800a408 <__multiply+0xe4>
 800a3c6:	f105 0e14 	add.w	lr, r5, #20
 800a3ca:	46b1      	mov	r9, r6
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a3d2:	f8d9 b000 	ldr.w	fp, [r9]
 800a3d6:	b2a1      	uxth	r1, r4
 800a3d8:	fa1f fb8b 	uxth.w	fp, fp
 800a3dc:	fb0a b101 	mla	r1, sl, r1, fp
 800a3e0:	4411      	add	r1, r2
 800a3e2:	f8d9 2000 	ldr.w	r2, [r9]
 800a3e6:	0c24      	lsrs	r4, r4, #16
 800a3e8:	0c12      	lsrs	r2, r2, #16
 800a3ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800a3ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3f8:	45f4      	cmp	ip, lr
 800a3fa:	f849 1b04 	str.w	r1, [r9], #4
 800a3fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a402:	d8e4      	bhi.n	800a3ce <__multiply+0xaa>
 800a404:	9901      	ldr	r1, [sp, #4]
 800a406:	5072      	str	r2, [r6, r1]
 800a408:	9a03      	ldr	r2, [sp, #12]
 800a40a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a40e:	3304      	adds	r3, #4
 800a410:	f1b9 0f00 	cmp.w	r9, #0
 800a414:	d01f      	beq.n	800a456 <__multiply+0x132>
 800a416:	6834      	ldr	r4, [r6, #0]
 800a418:	f105 0114 	add.w	r1, r5, #20
 800a41c:	46b6      	mov	lr, r6
 800a41e:	f04f 0a00 	mov.w	sl, #0
 800a422:	880a      	ldrh	r2, [r1, #0]
 800a424:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a428:	fb09 b202 	mla	r2, r9, r2, fp
 800a42c:	4492      	add	sl, r2
 800a42e:	b2a4      	uxth	r4, r4
 800a430:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a434:	f84e 4b04 	str.w	r4, [lr], #4
 800a438:	f851 4b04 	ldr.w	r4, [r1], #4
 800a43c:	f8be 2000 	ldrh.w	r2, [lr]
 800a440:	0c24      	lsrs	r4, r4, #16
 800a442:	fb09 2404 	mla	r4, r9, r4, r2
 800a446:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a44a:	458c      	cmp	ip, r1
 800a44c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a450:	d8e7      	bhi.n	800a422 <__multiply+0xfe>
 800a452:	9a01      	ldr	r2, [sp, #4]
 800a454:	50b4      	str	r4, [r6, r2]
 800a456:	3604      	adds	r6, #4
 800a458:	e7a3      	b.n	800a3a2 <__multiply+0x7e>
 800a45a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1a5      	bne.n	800a3ae <__multiply+0x8a>
 800a462:	3f01      	subs	r7, #1
 800a464:	e7a1      	b.n	800a3aa <__multiply+0x86>
 800a466:	bf00      	nop
 800a468:	0800bbab 	.word	0x0800bbab
 800a46c:	0800bbbc 	.word	0x0800bbbc

0800a470 <__pow5mult>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	4615      	mov	r5, r2
 800a476:	f012 0203 	ands.w	r2, r2, #3
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	d007      	beq.n	800a490 <__pow5mult+0x20>
 800a480:	4c25      	ldr	r4, [pc, #148]	; (800a518 <__pow5mult+0xa8>)
 800a482:	3a01      	subs	r2, #1
 800a484:	2300      	movs	r3, #0
 800a486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a48a:	f7ff fe9b 	bl	800a1c4 <__multadd>
 800a48e:	4607      	mov	r7, r0
 800a490:	10ad      	asrs	r5, r5, #2
 800a492:	d03d      	beq.n	800a510 <__pow5mult+0xa0>
 800a494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a496:	b97c      	cbnz	r4, 800a4b8 <__pow5mult+0x48>
 800a498:	2010      	movs	r0, #16
 800a49a:	f7ff fe1b 	bl	800a0d4 <malloc>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a4a2:	b928      	cbnz	r0, 800a4b0 <__pow5mult+0x40>
 800a4a4:	4b1d      	ldr	r3, [pc, #116]	; (800a51c <__pow5mult+0xac>)
 800a4a6:	481e      	ldr	r0, [pc, #120]	; (800a520 <__pow5mult+0xb0>)
 800a4a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4ac:	f000 fbcc 	bl	800ac48 <__assert_func>
 800a4b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4b4:	6004      	str	r4, [r0, #0]
 800a4b6:	60c4      	str	r4, [r0, #12]
 800a4b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4c0:	b94c      	cbnz	r4, 800a4d6 <__pow5mult+0x66>
 800a4c2:	f240 2171 	movw	r1, #625	; 0x271
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff16 	bl	800a2f8 <__i2b>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	6003      	str	r3, [r0, #0]
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	07eb      	lsls	r3, r5, #31
 800a4dc:	d50a      	bpl.n	800a4f4 <__pow5mult+0x84>
 800a4de:	4639      	mov	r1, r7
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ff1e 	bl	800a324 <__multiply>
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fe47 	bl	800a180 <_Bfree>
 800a4f2:	4647      	mov	r7, r8
 800a4f4:	106d      	asrs	r5, r5, #1
 800a4f6:	d00b      	beq.n	800a510 <__pow5mult+0xa0>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	b938      	cbnz	r0, 800a50c <__pow5mult+0x9c>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4621      	mov	r1, r4
 800a500:	4630      	mov	r0, r6
 800a502:	f7ff ff0f 	bl	800a324 <__multiply>
 800a506:	6020      	str	r0, [r4, #0]
 800a508:	f8c0 9000 	str.w	r9, [r0]
 800a50c:	4604      	mov	r4, r0
 800a50e:	e7e4      	b.n	800a4da <__pow5mult+0x6a>
 800a510:	4638      	mov	r0, r7
 800a512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a516:	bf00      	nop
 800a518:	0800bd10 	.word	0x0800bd10
 800a51c:	0800bb35 	.word	0x0800bb35
 800a520:	0800bbbc 	.word	0x0800bbbc

0800a524 <__lshift>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	460c      	mov	r4, r1
 800a52a:	6849      	ldr	r1, [r1, #4]
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	4607      	mov	r7, r0
 800a536:	4691      	mov	r9, r2
 800a538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a53c:	f108 0601 	add.w	r6, r8, #1
 800a540:	42b3      	cmp	r3, r6
 800a542:	db0b      	blt.n	800a55c <__lshift+0x38>
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff fddb 	bl	800a100 <_Balloc>
 800a54a:	4605      	mov	r5, r0
 800a54c:	b948      	cbnz	r0, 800a562 <__lshift+0x3e>
 800a54e:	4602      	mov	r2, r0
 800a550:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <__lshift+0xd0>)
 800a552:	4829      	ldr	r0, [pc, #164]	; (800a5f8 <__lshift+0xd4>)
 800a554:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a558:	f000 fb76 	bl	800ac48 <__assert_func>
 800a55c:	3101      	adds	r1, #1
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	e7ee      	b.n	800a540 <__lshift+0x1c>
 800a562:	2300      	movs	r3, #0
 800a564:	f100 0114 	add.w	r1, r0, #20
 800a568:	f100 0210 	add.w	r2, r0, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	4553      	cmp	r3, sl
 800a570:	db33      	blt.n	800a5da <__lshift+0xb6>
 800a572:	6920      	ldr	r0, [r4, #16]
 800a574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a578:	f104 0314 	add.w	r3, r4, #20
 800a57c:	f019 091f 	ands.w	r9, r9, #31
 800a580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a588:	d02b      	beq.n	800a5e2 <__lshift+0xbe>
 800a58a:	f1c9 0e20 	rsb	lr, r9, #32
 800a58e:	468a      	mov	sl, r1
 800a590:	2200      	movs	r2, #0
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	fa00 f009 	lsl.w	r0, r0, r9
 800a598:	4302      	orrs	r2, r0
 800a59a:	f84a 2b04 	str.w	r2, [sl], #4
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	459c      	cmp	ip, r3
 800a5a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5a8:	d8f3      	bhi.n	800a592 <__lshift+0x6e>
 800a5aa:	ebac 0304 	sub.w	r3, ip, r4
 800a5ae:	3b15      	subs	r3, #21
 800a5b0:	f023 0303 	bic.w	r3, r3, #3
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	f104 0015 	add.w	r0, r4, #21
 800a5ba:	4584      	cmp	ip, r0
 800a5bc:	bf38      	it	cc
 800a5be:	2304      	movcc	r3, #4
 800a5c0:	50ca      	str	r2, [r1, r3]
 800a5c2:	b10a      	cbz	r2, 800a5c8 <__lshift+0xa4>
 800a5c4:	f108 0602 	add.w	r6, r8, #2
 800a5c8:	3e01      	subs	r6, #1
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	612e      	str	r6, [r5, #16]
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	f7ff fdd6 	bl	800a180 <_Bfree>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5de:	3301      	adds	r3, #1
 800a5e0:	e7c5      	b.n	800a56e <__lshift+0x4a>
 800a5e2:	3904      	subs	r1, #4
 800a5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5ec:	459c      	cmp	ip, r3
 800a5ee:	d8f9      	bhi.n	800a5e4 <__lshift+0xc0>
 800a5f0:	e7ea      	b.n	800a5c8 <__lshift+0xa4>
 800a5f2:	bf00      	nop
 800a5f4:	0800bbab 	.word	0x0800bbab
 800a5f8:	0800bbbc 	.word	0x0800bbbc

0800a5fc <__mcmp>:
 800a5fc:	b530      	push	{r4, r5, lr}
 800a5fe:	6902      	ldr	r2, [r0, #16]
 800a600:	690c      	ldr	r4, [r1, #16]
 800a602:	1b12      	subs	r2, r2, r4
 800a604:	d10e      	bne.n	800a624 <__mcmp+0x28>
 800a606:	f100 0314 	add.w	r3, r0, #20
 800a60a:	3114      	adds	r1, #20
 800a60c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a61c:	42a5      	cmp	r5, r4
 800a61e:	d003      	beq.n	800a628 <__mcmp+0x2c>
 800a620:	d305      	bcc.n	800a62e <__mcmp+0x32>
 800a622:	2201      	movs	r2, #1
 800a624:	4610      	mov	r0, r2
 800a626:	bd30      	pop	{r4, r5, pc}
 800a628:	4283      	cmp	r3, r0
 800a62a:	d3f3      	bcc.n	800a614 <__mcmp+0x18>
 800a62c:	e7fa      	b.n	800a624 <__mcmp+0x28>
 800a62e:	f04f 32ff 	mov.w	r2, #4294967295
 800a632:	e7f7      	b.n	800a624 <__mcmp+0x28>

0800a634 <__mdiff>:
 800a634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	460c      	mov	r4, r1
 800a63a:	4606      	mov	r6, r0
 800a63c:	4611      	mov	r1, r2
 800a63e:	4620      	mov	r0, r4
 800a640:	4617      	mov	r7, r2
 800a642:	f7ff ffdb 	bl	800a5fc <__mcmp>
 800a646:	1e05      	subs	r5, r0, #0
 800a648:	d110      	bne.n	800a66c <__mdiff+0x38>
 800a64a:	4629      	mov	r1, r5
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7ff fd57 	bl	800a100 <_Balloc>
 800a652:	b930      	cbnz	r0, 800a662 <__mdiff+0x2e>
 800a654:	4b39      	ldr	r3, [pc, #228]	; (800a73c <__mdiff+0x108>)
 800a656:	4602      	mov	r2, r0
 800a658:	f240 2132 	movw	r1, #562	; 0x232
 800a65c:	4838      	ldr	r0, [pc, #224]	; (800a740 <__mdiff+0x10c>)
 800a65e:	f000 faf3 	bl	800ac48 <__assert_func>
 800a662:	2301      	movs	r3, #1
 800a664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	bfa4      	itt	ge
 800a66e:	463b      	movge	r3, r7
 800a670:	4627      	movge	r7, r4
 800a672:	4630      	mov	r0, r6
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	bfa6      	itte	ge
 800a678:	461c      	movge	r4, r3
 800a67a:	2500      	movge	r5, #0
 800a67c:	2501      	movlt	r5, #1
 800a67e:	f7ff fd3f 	bl	800a100 <_Balloc>
 800a682:	b920      	cbnz	r0, 800a68e <__mdiff+0x5a>
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <__mdiff+0x108>)
 800a686:	4602      	mov	r2, r0
 800a688:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a68c:	e7e6      	b.n	800a65c <__mdiff+0x28>
 800a68e:	693e      	ldr	r6, [r7, #16]
 800a690:	60c5      	str	r5, [r0, #12]
 800a692:	6925      	ldr	r5, [r4, #16]
 800a694:	f107 0114 	add.w	r1, r7, #20
 800a698:	f104 0914 	add.w	r9, r4, #20
 800a69c:	f100 0e14 	add.w	lr, r0, #20
 800a6a0:	f107 0210 	add.w	r2, r7, #16
 800a6a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6ac:	46f2      	mov	sl, lr
 800a6ae:	2700      	movs	r7, #0
 800a6b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6b8:	fa1f f883 	uxth.w	r8, r3
 800a6bc:	fa17 f78b 	uxtah	r7, r7, fp
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	eba7 0808 	sub.w	r8, r7, r8
 800a6c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6ce:	fa1f f888 	uxth.w	r8, r8
 800a6d2:	141f      	asrs	r7, r3, #16
 800a6d4:	454d      	cmp	r5, r9
 800a6d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6da:	f84a 3b04 	str.w	r3, [sl], #4
 800a6de:	d8e7      	bhi.n	800a6b0 <__mdiff+0x7c>
 800a6e0:	1b2b      	subs	r3, r5, r4
 800a6e2:	3b15      	subs	r3, #21
 800a6e4:	f023 0303 	bic.w	r3, r3, #3
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	3415      	adds	r4, #21
 800a6ec:	42a5      	cmp	r5, r4
 800a6ee:	bf38      	it	cc
 800a6f0:	2304      	movcc	r3, #4
 800a6f2:	4419      	add	r1, r3
 800a6f4:	4473      	add	r3, lr
 800a6f6:	469e      	mov	lr, r3
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	4565      	cmp	r5, ip
 800a6fc:	d30e      	bcc.n	800a71c <__mdiff+0xe8>
 800a6fe:	f10c 0203 	add.w	r2, ip, #3
 800a702:	1a52      	subs	r2, r2, r1
 800a704:	f022 0203 	bic.w	r2, r2, #3
 800a708:	3903      	subs	r1, #3
 800a70a:	458c      	cmp	ip, r1
 800a70c:	bf38      	it	cc
 800a70e:	2200      	movcc	r2, #0
 800a710:	441a      	add	r2, r3
 800a712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a716:	b17b      	cbz	r3, 800a738 <__mdiff+0x104>
 800a718:	6106      	str	r6, [r0, #16]
 800a71a:	e7a5      	b.n	800a668 <__mdiff+0x34>
 800a71c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a720:	fa17 f488 	uxtah	r4, r7, r8
 800a724:	1422      	asrs	r2, r4, #16
 800a726:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a72a:	b2a4      	uxth	r4, r4
 800a72c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a730:	f84e 4b04 	str.w	r4, [lr], #4
 800a734:	1417      	asrs	r7, r2, #16
 800a736:	e7e0      	b.n	800a6fa <__mdiff+0xc6>
 800a738:	3e01      	subs	r6, #1
 800a73a:	e7ea      	b.n	800a712 <__mdiff+0xde>
 800a73c:	0800bbab 	.word	0x0800bbab
 800a740:	0800bbbc 	.word	0x0800bbbc

0800a744 <__d2b>:
 800a744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4689      	mov	r9, r1
 800a74a:	2101      	movs	r1, #1
 800a74c:	ec57 6b10 	vmov	r6, r7, d0
 800a750:	4690      	mov	r8, r2
 800a752:	f7ff fcd5 	bl	800a100 <_Balloc>
 800a756:	4604      	mov	r4, r0
 800a758:	b930      	cbnz	r0, 800a768 <__d2b+0x24>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <__d2b+0xb0>)
 800a75e:	4826      	ldr	r0, [pc, #152]	; (800a7f8 <__d2b+0xb4>)
 800a760:	f240 310a 	movw	r1, #778	; 0x30a
 800a764:	f000 fa70 	bl	800ac48 <__assert_func>
 800a768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a76c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a770:	bb35      	cbnz	r5, 800a7c0 <__d2b+0x7c>
 800a772:	2e00      	cmp	r6, #0
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	d028      	beq.n	800a7ca <__d2b+0x86>
 800a778:	4668      	mov	r0, sp
 800a77a:	9600      	str	r6, [sp, #0]
 800a77c:	f7ff fd8c 	bl	800a298 <__lo0bits>
 800a780:	9900      	ldr	r1, [sp, #0]
 800a782:	b300      	cbz	r0, 800a7c6 <__d2b+0x82>
 800a784:	9a01      	ldr	r2, [sp, #4]
 800a786:	f1c0 0320 	rsb	r3, r0, #32
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	430b      	orrs	r3, r1
 800a790:	40c2      	lsrs	r2, r0
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	9201      	str	r2, [sp, #4]
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	61a3      	str	r3, [r4, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bf14      	ite	ne
 800a79e:	2202      	movne	r2, #2
 800a7a0:	2201      	moveq	r2, #1
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	b1d5      	cbz	r5, 800a7dc <__d2b+0x98>
 800a7a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7aa:	4405      	add	r5, r0
 800a7ac:	f8c9 5000 	str.w	r5, [r9]
 800a7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7b4:	f8c8 0000 	str.w	r0, [r8]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7c4:	e7d5      	b.n	800a772 <__d2b+0x2e>
 800a7c6:	6161      	str	r1, [r4, #20]
 800a7c8:	e7e5      	b.n	800a796 <__d2b+0x52>
 800a7ca:	a801      	add	r0, sp, #4
 800a7cc:	f7ff fd64 	bl	800a298 <__lo0bits>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	6122      	str	r2, [r4, #16]
 800a7d8:	3020      	adds	r0, #32
 800a7da:	e7e3      	b.n	800a7a4 <__d2b+0x60>
 800a7dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7e4:	f8c9 0000 	str.w	r0, [r9]
 800a7e8:	6918      	ldr	r0, [r3, #16]
 800a7ea:	f7ff fd35 	bl	800a258 <__hi0bits>
 800a7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7f2:	e7df      	b.n	800a7b4 <__d2b+0x70>
 800a7f4:	0800bbab 	.word	0x0800bbab
 800a7f8:	0800bbbc 	.word	0x0800bbbc

0800a7fc <_calloc_r>:
 800a7fc:	b513      	push	{r0, r1, r4, lr}
 800a7fe:	434a      	muls	r2, r1
 800a800:	4611      	mov	r1, r2
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	f000 f85a 	bl	800a8bc <_malloc_r>
 800a808:	4604      	mov	r4, r0
 800a80a:	b118      	cbz	r0, 800a814 <_calloc_r+0x18>
 800a80c:	9a01      	ldr	r2, [sp, #4]
 800a80e:	2100      	movs	r1, #0
 800a810:	f7fe f9e2 	bl	8008bd8 <memset>
 800a814:	4620      	mov	r0, r4
 800a816:	b002      	add	sp, #8
 800a818:	bd10      	pop	{r4, pc}
	...

0800a81c <_free_r>:
 800a81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a81e:	2900      	cmp	r1, #0
 800a820:	d048      	beq.n	800a8b4 <_free_r+0x98>
 800a822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a826:	9001      	str	r0, [sp, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f1a1 0404 	sub.w	r4, r1, #4
 800a82e:	bfb8      	it	lt
 800a830:	18e4      	addlt	r4, r4, r3
 800a832:	f000 fa65 	bl	800ad00 <__malloc_lock>
 800a836:	4a20      	ldr	r2, [pc, #128]	; (800a8b8 <_free_r+0x9c>)
 800a838:	9801      	ldr	r0, [sp, #4]
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	4615      	mov	r5, r2
 800a83e:	b933      	cbnz	r3, 800a84e <_free_r+0x32>
 800a840:	6063      	str	r3, [r4, #4]
 800a842:	6014      	str	r4, [r2, #0]
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a84a:	f000 ba5f 	b.w	800ad0c <__malloc_unlock>
 800a84e:	42a3      	cmp	r3, r4
 800a850:	d90b      	bls.n	800a86a <_free_r+0x4e>
 800a852:	6821      	ldr	r1, [r4, #0]
 800a854:	1862      	adds	r2, r4, r1
 800a856:	4293      	cmp	r3, r2
 800a858:	bf04      	itt	eq
 800a85a:	681a      	ldreq	r2, [r3, #0]
 800a85c:	685b      	ldreq	r3, [r3, #4]
 800a85e:	6063      	str	r3, [r4, #4]
 800a860:	bf04      	itt	eq
 800a862:	1852      	addeq	r2, r2, r1
 800a864:	6022      	streq	r2, [r4, #0]
 800a866:	602c      	str	r4, [r5, #0]
 800a868:	e7ec      	b.n	800a844 <_free_r+0x28>
 800a86a:	461a      	mov	r2, r3
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b10b      	cbz	r3, 800a874 <_free_r+0x58>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x4e>
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	1855      	adds	r5, r2, r1
 800a878:	42a5      	cmp	r5, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x78>
 800a87c:	6824      	ldr	r4, [r4, #0]
 800a87e:	4421      	add	r1, r4
 800a880:	1854      	adds	r4, r2, r1
 800a882:	42a3      	cmp	r3, r4
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	d1dd      	bne.n	800a844 <_free_r+0x28>
 800a888:	681c      	ldr	r4, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	6053      	str	r3, [r2, #4]
 800a88e:	4421      	add	r1, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	e7d7      	b.n	800a844 <_free_r+0x28>
 800a894:	d902      	bls.n	800a89c <_free_r+0x80>
 800a896:	230c      	movs	r3, #12
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	e7d3      	b.n	800a844 <_free_r+0x28>
 800a89c:	6825      	ldr	r5, [r4, #0]
 800a89e:	1961      	adds	r1, r4, r5
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	bf04      	itt	eq
 800a8a4:	6819      	ldreq	r1, [r3, #0]
 800a8a6:	685b      	ldreq	r3, [r3, #4]
 800a8a8:	6063      	str	r3, [r4, #4]
 800a8aa:	bf04      	itt	eq
 800a8ac:	1949      	addeq	r1, r1, r5
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	6054      	str	r4, [r2, #4]
 800a8b2:	e7c7      	b.n	800a844 <_free_r+0x28>
 800a8b4:	b003      	add	sp, #12
 800a8b6:	bd30      	pop	{r4, r5, pc}
 800a8b8:	20000354 	.word	0x20000354

0800a8bc <_malloc_r>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	1ccd      	adds	r5, r1, #3
 800a8c0:	f025 0503 	bic.w	r5, r5, #3
 800a8c4:	3508      	adds	r5, #8
 800a8c6:	2d0c      	cmp	r5, #12
 800a8c8:	bf38      	it	cc
 800a8ca:	250c      	movcc	r5, #12
 800a8cc:	2d00      	cmp	r5, #0
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	db01      	blt.n	800a8d6 <_malloc_r+0x1a>
 800a8d2:	42a9      	cmp	r1, r5
 800a8d4:	d903      	bls.n	800a8de <_malloc_r+0x22>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8de:	f000 fa0f 	bl	800ad00 <__malloc_lock>
 800a8e2:	4921      	ldr	r1, [pc, #132]	; (800a968 <_malloc_r+0xac>)
 800a8e4:	680a      	ldr	r2, [r1, #0]
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	b99c      	cbnz	r4, 800a912 <_malloc_r+0x56>
 800a8ea:	4f20      	ldr	r7, [pc, #128]	; (800a96c <_malloc_r+0xb0>)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b923      	cbnz	r3, 800a8fa <_malloc_r+0x3e>
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f000 f998 	bl	800ac28 <_sbrk_r>
 800a8f8:	6038      	str	r0, [r7, #0]
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f000 f993 	bl	800ac28 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d123      	bne.n	800a94e <_malloc_r+0x92>
 800a906:	230c      	movs	r3, #12
 800a908:	6033      	str	r3, [r6, #0]
 800a90a:	4630      	mov	r0, r6
 800a90c:	f000 f9fe 	bl	800ad0c <__malloc_unlock>
 800a910:	e7e3      	b.n	800a8da <_malloc_r+0x1e>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	1b5b      	subs	r3, r3, r5
 800a916:	d417      	bmi.n	800a948 <_malloc_r+0x8c>
 800a918:	2b0b      	cmp	r3, #11
 800a91a:	d903      	bls.n	800a924 <_malloc_r+0x68>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	441c      	add	r4, r3
 800a920:	6025      	str	r5, [r4, #0]
 800a922:	e004      	b.n	800a92e <_malloc_r+0x72>
 800a924:	6863      	ldr	r3, [r4, #4]
 800a926:	42a2      	cmp	r2, r4
 800a928:	bf0c      	ite	eq
 800a92a:	600b      	streq	r3, [r1, #0]
 800a92c:	6053      	strne	r3, [r2, #4]
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f9ec 	bl	800ad0c <__malloc_unlock>
 800a934:	f104 000b 	add.w	r0, r4, #11
 800a938:	1d23      	adds	r3, r4, #4
 800a93a:	f020 0007 	bic.w	r0, r0, #7
 800a93e:	1ac2      	subs	r2, r0, r3
 800a940:	d0cc      	beq.n	800a8dc <_malloc_r+0x20>
 800a942:	1a1b      	subs	r3, r3, r0
 800a944:	50a3      	str	r3, [r4, r2]
 800a946:	e7c9      	b.n	800a8dc <_malloc_r+0x20>
 800a948:	4622      	mov	r2, r4
 800a94a:	6864      	ldr	r4, [r4, #4]
 800a94c:	e7cc      	b.n	800a8e8 <_malloc_r+0x2c>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d0e3      	beq.n	800a920 <_malloc_r+0x64>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f964 	bl	800ac28 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d1dd      	bne.n	800a920 <_malloc_r+0x64>
 800a964:	e7cf      	b.n	800a906 <_malloc_r+0x4a>
 800a966:	bf00      	nop
 800a968:	20000354 	.word	0x20000354
 800a96c:	20000358 	.word	0x20000358

0800a970 <__ssputs_r>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	688e      	ldr	r6, [r1, #8]
 800a976:	429e      	cmp	r6, r3
 800a978:	4682      	mov	sl, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	4690      	mov	r8, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	d838      	bhi.n	800a9f4 <__ssputs_r+0x84>
 800a982:	898a      	ldrh	r2, [r1, #12]
 800a984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a988:	d032      	beq.n	800a9f0 <__ssputs_r+0x80>
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6909      	ldr	r1, [r1, #16]
 800a98e:	eba5 0901 	sub.w	r9, r5, r1
 800a992:	6965      	ldr	r5, [r4, #20]
 800a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a99c:	3301      	adds	r3, #1
 800a99e:	444b      	add	r3, r9
 800a9a0:	106d      	asrs	r5, r5, #1
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf38      	it	cc
 800a9a6:	461d      	movcc	r5, r3
 800a9a8:	0553      	lsls	r3, r2, #21
 800a9aa:	d531      	bpl.n	800aa10 <__ssputs_r+0xa0>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7ff ff85 	bl	800a8bc <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b950      	cbnz	r0, 800a9cc <__ssputs_r+0x5c>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	f8ca 3000 	str.w	r3, [sl]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9cc:	6921      	ldr	r1, [r4, #16]
 800a9ce:	464a      	mov	r2, r9
 800a9d0:	f7ff fb88 	bl	800a0e4 <memcpy>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	6126      	str	r6, [r4, #16]
 800a9e2:	6165      	str	r5, [r4, #20]
 800a9e4:	444e      	add	r6, r9
 800a9e6:	eba5 0509 	sub.w	r5, r5, r9
 800a9ea:	6026      	str	r6, [r4, #0]
 800a9ec:	60a5      	str	r5, [r4, #8]
 800a9ee:	463e      	mov	r6, r7
 800a9f0:	42be      	cmp	r6, r7
 800a9f2:	d900      	bls.n	800a9f6 <__ssputs_r+0x86>
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	4641      	mov	r1, r8
 800a9fc:	f000 f966 	bl	800accc <memmove>
 800aa00:	68a3      	ldr	r3, [r4, #8]
 800aa02:	6822      	ldr	r2, [r4, #0]
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	4432      	add	r2, r6
 800aa08:	60a3      	str	r3, [r4, #8]
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e7db      	b.n	800a9c8 <__ssputs_r+0x58>
 800aa10:	462a      	mov	r2, r5
 800aa12:	f000 f981 	bl	800ad18 <_realloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1e1      	bne.n	800a9e0 <__ssputs_r+0x70>
 800aa1c:	6921      	ldr	r1, [r4, #16]
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f7ff fefc 	bl	800a81c <_free_r>
 800aa24:	e7c7      	b.n	800a9b6 <__ssputs_r+0x46>
	...

0800aa28 <_svfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4698      	mov	r8, r3
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	b09d      	sub	sp, #116	; 0x74
 800aa34:	4607      	mov	r7, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	d50e      	bpl.n	800aa5a <_svfiprintf_r+0x32>
 800aa3c:	690b      	ldr	r3, [r1, #16]
 800aa3e:	b963      	cbnz	r3, 800aa5a <_svfiprintf_r+0x32>
 800aa40:	2140      	movs	r1, #64	; 0x40
 800aa42:	f7ff ff3b 	bl	800a8bc <_malloc_r>
 800aa46:	6028      	str	r0, [r5, #0]
 800aa48:	6128      	str	r0, [r5, #16]
 800aa4a:	b920      	cbnz	r0, 800aa56 <_svfiprintf_r+0x2e>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e0d1      	b.n	800abfa <_svfiprintf_r+0x1d2>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	616b      	str	r3, [r5, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	2320      	movs	r3, #32
 800aa60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa64:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa68:	2330      	movs	r3, #48	; 0x30
 800aa6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac14 <_svfiprintf_r+0x1ec>
 800aa6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa72:	f04f 0901 	mov.w	r9, #1
 800aa76:	4623      	mov	r3, r4
 800aa78:	469a      	mov	sl, r3
 800aa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7e:	b10a      	cbz	r2, 800aa84 <_svfiprintf_r+0x5c>
 800aa80:	2a25      	cmp	r2, #37	; 0x25
 800aa82:	d1f9      	bne.n	800aa78 <_svfiprintf_r+0x50>
 800aa84:	ebba 0b04 	subs.w	fp, sl, r4
 800aa88:	d00b      	beq.n	800aaa2 <_svfiprintf_r+0x7a>
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff6d 	bl	800a970 <__ssputs_r>
 800aa96:	3001      	adds	r0, #1
 800aa98:	f000 80aa 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9e:	445a      	add	r2, fp
 800aaa0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 80a2 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab6:	f10a 0a01 	add.w	sl, sl, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9307      	str	r3, [sp, #28]
 800aabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac2:	931a      	str	r3, [sp, #104]	; 0x68
 800aac4:	4654      	mov	r4, sl
 800aac6:	2205      	movs	r2, #5
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	4851      	ldr	r0, [pc, #324]	; (800ac14 <_svfiprintf_r+0x1ec>)
 800aace:	f7f5 fbbf 	bl	8000250 <memchr>
 800aad2:	9a04      	ldr	r2, [sp, #16]
 800aad4:	b9d8      	cbnz	r0, 800ab0e <_svfiprintf_r+0xe6>
 800aad6:	06d0      	lsls	r0, r2, #27
 800aad8:	bf44      	itt	mi
 800aada:	2320      	movmi	r3, #32
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	0711      	lsls	r1, r2, #28
 800aae2:	bf44      	itt	mi
 800aae4:	232b      	movmi	r3, #43	; 0x2b
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	f89a 3000 	ldrb.w	r3, [sl]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d015      	beq.n	800ab1e <_svfiprintf_r+0xf6>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4621      	mov	r1, r4
 800aafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab02:	3b30      	subs	r3, #48	; 0x30
 800ab04:	2b09      	cmp	r3, #9
 800ab06:	d94e      	bls.n	800aba6 <_svfiprintf_r+0x17e>
 800ab08:	b1b0      	cbz	r0, 800ab38 <_svfiprintf_r+0x110>
 800ab0a:	9207      	str	r2, [sp, #28]
 800ab0c:	e014      	b.n	800ab38 <_svfiprintf_r+0x110>
 800ab0e:	eba0 0308 	sub.w	r3, r0, r8
 800ab12:	fa09 f303 	lsl.w	r3, r9, r3
 800ab16:	4313      	orrs	r3, r2
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	46a2      	mov	sl, r4
 800ab1c:	e7d2      	b.n	800aac4 <_svfiprintf_r+0x9c>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d19      	adds	r1, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9103      	str	r1, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfbb      	ittet	lt
 800ab2a:	425b      	neglt	r3, r3
 800ab2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab30:	9307      	strge	r3, [sp, #28]
 800ab32:	9307      	strlt	r3, [sp, #28]
 800ab34:	bfb8      	it	lt
 800ab36:	9204      	strlt	r2, [sp, #16]
 800ab38:	7823      	ldrb	r3, [r4, #0]
 800ab3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3c:	d10c      	bne.n	800ab58 <_svfiprintf_r+0x130>
 800ab3e:	7863      	ldrb	r3, [r4, #1]
 800ab40:	2b2a      	cmp	r3, #42	; 0x2a
 800ab42:	d135      	bne.n	800abb0 <_svfiprintf_r+0x188>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	9203      	str	r2, [sp, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb8      	it	lt
 800ab50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab54:	3402      	adds	r4, #2
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac24 <_svfiprintf_r+0x1fc>
 800ab5c:	7821      	ldrb	r1, [r4, #0]
 800ab5e:	2203      	movs	r2, #3
 800ab60:	4650      	mov	r0, sl
 800ab62:	f7f5 fb75 	bl	8000250 <memchr>
 800ab66:	b140      	cbz	r0, 800ab7a <_svfiprintf_r+0x152>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	eba0 000a 	sub.w	r0, r0, sl
 800ab6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	4303      	orrs	r3, r0
 800ab76:	3401      	adds	r4, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7e:	4826      	ldr	r0, [pc, #152]	; (800ac18 <_svfiprintf_r+0x1f0>)
 800ab80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab84:	2206      	movs	r2, #6
 800ab86:	f7f5 fb63 	bl	8000250 <memchr>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d038      	beq.n	800ac00 <_svfiprintf_r+0x1d8>
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <_svfiprintf_r+0x1f4>)
 800ab90:	bb1b      	cbnz	r3, 800abda <_svfiprintf_r+0x1b2>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	3307      	adds	r3, #7
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	9303      	str	r3, [sp, #12]
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	4433      	add	r3, r6
 800aba2:	9309      	str	r3, [sp, #36]	; 0x24
 800aba4:	e767      	b.n	800aa76 <_svfiprintf_r+0x4e>
 800aba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abaa:	460c      	mov	r4, r1
 800abac:	2001      	movs	r0, #1
 800abae:	e7a5      	b.n	800aafc <_svfiprintf_r+0xd4>
 800abb0:	2300      	movs	r3, #0
 800abb2:	3401      	adds	r4, #1
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	4619      	mov	r1, r3
 800abb8:	f04f 0c0a 	mov.w	ip, #10
 800abbc:	4620      	mov	r0, r4
 800abbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc2:	3a30      	subs	r2, #48	; 0x30
 800abc4:	2a09      	cmp	r2, #9
 800abc6:	d903      	bls.n	800abd0 <_svfiprintf_r+0x1a8>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0c5      	beq.n	800ab58 <_svfiprintf_r+0x130>
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	e7c3      	b.n	800ab58 <_svfiprintf_r+0x130>
 800abd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd4:	4604      	mov	r4, r0
 800abd6:	2301      	movs	r3, #1
 800abd8:	e7f0      	b.n	800abbc <_svfiprintf_r+0x194>
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	462a      	mov	r2, r5
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7fe f88f 	bl	8008d08 <_printf_float>
 800abea:	1c42      	adds	r2, r0, #1
 800abec:	4606      	mov	r6, r0
 800abee:	d1d6      	bne.n	800ab9e <_svfiprintf_r+0x176>
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	f53f af2c 	bmi.w	800aa50 <_svfiprintf_r+0x28>
 800abf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfa:	b01d      	add	sp, #116	; 0x74
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	ab03      	add	r3, sp, #12
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800ac08:	a904      	add	r1, sp, #16
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f7fe fb08 	bl	8009220 <_printf_i>
 800ac10:	e7eb      	b.n	800abea <_svfiprintf_r+0x1c2>
 800ac12:	bf00      	nop
 800ac14:	0800bd1c 	.word	0x0800bd1c
 800ac18:	0800bd26 	.word	0x0800bd26
 800ac1c:	08008d09 	.word	0x08008d09
 800ac20:	0800a971 	.word	0x0800a971
 800ac24:	0800bd22 	.word	0x0800bd22

0800ac28 <_sbrk_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d06      	ldr	r5, [pc, #24]	; (800ac44 <_sbrk_r+0x1c>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f7 fcaa 	bl	800258c <_sbrk>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_sbrk_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_sbrk_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	200006c0 	.word	0x200006c0

0800ac48 <__assert_func>:
 800ac48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac4a:	4614      	mov	r4, r2
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <__assert_func+0x2c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4605      	mov	r5, r0
 800ac54:	68d8      	ldr	r0, [r3, #12]
 800ac56:	b14c      	cbz	r4, 800ac6c <__assert_func+0x24>
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <__assert_func+0x30>)
 800ac5a:	9100      	str	r1, [sp, #0]
 800ac5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <__assert_func+0x34>)
 800ac62:	462b      	mov	r3, r5
 800ac64:	f000 f80e 	bl	800ac84 <fiprintf>
 800ac68:	f000 faa4 	bl	800b1b4 <abort>
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <__assert_func+0x38>)
 800ac6e:	461c      	mov	r4, r3
 800ac70:	e7f3      	b.n	800ac5a <__assert_func+0x12>
 800ac72:	bf00      	nop
 800ac74:	20000020 	.word	0x20000020
 800ac78:	0800bd2d 	.word	0x0800bd2d
 800ac7c:	0800bd3a 	.word	0x0800bd3a
 800ac80:	0800bd68 	.word	0x0800bd68

0800ac84 <fiprintf>:
 800ac84:	b40e      	push	{r1, r2, r3}
 800ac86:	b503      	push	{r0, r1, lr}
 800ac88:	4601      	mov	r1, r0
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	4805      	ldr	r0, [pc, #20]	; (800aca4 <fiprintf+0x20>)
 800ac8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac92:	6800      	ldr	r0, [r0, #0]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	f000 f88f 	bl	800adb8 <_vfiprintf_r>
 800ac9a:	b002      	add	sp, #8
 800ac9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca0:	b003      	add	sp, #12
 800aca2:	4770      	bx	lr
 800aca4:	20000020 	.word	0x20000020

0800aca8 <__ascii_mbtowc>:
 800aca8:	b082      	sub	sp, #8
 800acaa:	b901      	cbnz	r1, 800acae <__ascii_mbtowc+0x6>
 800acac:	a901      	add	r1, sp, #4
 800acae:	b142      	cbz	r2, 800acc2 <__ascii_mbtowc+0x1a>
 800acb0:	b14b      	cbz	r3, 800acc6 <__ascii_mbtowc+0x1e>
 800acb2:	7813      	ldrb	r3, [r2, #0]
 800acb4:	600b      	str	r3, [r1, #0]
 800acb6:	7812      	ldrb	r2, [r2, #0]
 800acb8:	1e10      	subs	r0, r2, #0
 800acba:	bf18      	it	ne
 800acbc:	2001      	movne	r0, #1
 800acbe:	b002      	add	sp, #8
 800acc0:	4770      	bx	lr
 800acc2:	4610      	mov	r0, r2
 800acc4:	e7fb      	b.n	800acbe <__ascii_mbtowc+0x16>
 800acc6:	f06f 0001 	mvn.w	r0, #1
 800acca:	e7f8      	b.n	800acbe <__ascii_mbtowc+0x16>

0800accc <memmove>:
 800accc:	4288      	cmp	r0, r1
 800acce:	b510      	push	{r4, lr}
 800acd0:	eb01 0402 	add.w	r4, r1, r2
 800acd4:	d902      	bls.n	800acdc <memmove+0x10>
 800acd6:	4284      	cmp	r4, r0
 800acd8:	4623      	mov	r3, r4
 800acda:	d807      	bhi.n	800acec <memmove+0x20>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	42a1      	cmp	r1, r4
 800ace0:	d008      	beq.n	800acf4 <memmove+0x28>
 800ace2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acea:	e7f8      	b.n	800acde <memmove+0x12>
 800acec:	4402      	add	r2, r0
 800acee:	4601      	mov	r1, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	d100      	bne.n	800acf6 <memmove+0x2a>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfe:	e7f7      	b.n	800acf0 <memmove+0x24>

0800ad00 <__malloc_lock>:
 800ad00:	4801      	ldr	r0, [pc, #4]	; (800ad08 <__malloc_lock+0x8>)
 800ad02:	f000 bc17 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800ad06:	bf00      	nop
 800ad08:	200006c8 	.word	0x200006c8

0800ad0c <__malloc_unlock>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	; (800ad14 <__malloc_unlock+0x8>)
 800ad0e:	f000 bc12 	b.w	800b536 <__retarget_lock_release_recursive>
 800ad12:	bf00      	nop
 800ad14:	200006c8 	.word	0x200006c8

0800ad18 <_realloc_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	460e      	mov	r6, r1
 800ad20:	b921      	cbnz	r1, 800ad2c <_realloc_r+0x14>
 800ad22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad26:	4611      	mov	r1, r2
 800ad28:	f7ff bdc8 	b.w	800a8bc <_malloc_r>
 800ad2c:	b922      	cbnz	r2, 800ad38 <_realloc_r+0x20>
 800ad2e:	f7ff fd75 	bl	800a81c <_free_r>
 800ad32:	4625      	mov	r5, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad38:	f000 fc62 	bl	800b600 <_malloc_usable_size_r>
 800ad3c:	42a0      	cmp	r0, r4
 800ad3e:	d20f      	bcs.n	800ad60 <_realloc_r+0x48>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4638      	mov	r0, r7
 800ad44:	f7ff fdba 	bl	800a8bc <_malloc_r>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d0f2      	beq.n	800ad34 <_realloc_r+0x1c>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4622      	mov	r2, r4
 800ad52:	f7ff f9c7 	bl	800a0e4 <memcpy>
 800ad56:	4631      	mov	r1, r6
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff fd5f 	bl	800a81c <_free_r>
 800ad5e:	e7e9      	b.n	800ad34 <_realloc_r+0x1c>
 800ad60:	4635      	mov	r5, r6
 800ad62:	e7e7      	b.n	800ad34 <_realloc_r+0x1c>

0800ad64 <__sfputc_r>:
 800ad64:	6893      	ldr	r3, [r2, #8]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	b410      	push	{r4}
 800ad6c:	6093      	str	r3, [r2, #8]
 800ad6e:	da08      	bge.n	800ad82 <__sfputc_r+0x1e>
 800ad70:	6994      	ldr	r4, [r2, #24]
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	db01      	blt.n	800ad7a <__sfputc_r+0x16>
 800ad76:	290a      	cmp	r1, #10
 800ad78:	d103      	bne.n	800ad82 <__sfputc_r+0x1e>
 800ad7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7e:	f000 b94b 	b.w	800b018 <__swbuf_r>
 800ad82:	6813      	ldr	r3, [r2, #0]
 800ad84:	1c58      	adds	r0, r3, #1
 800ad86:	6010      	str	r0, [r2, #0]
 800ad88:	7019      	strb	r1, [r3, #0]
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <__sfputs_r>:
 800ad92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad94:	4606      	mov	r6, r0
 800ad96:	460f      	mov	r7, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	18d5      	adds	r5, r2, r3
 800ad9c:	42ac      	cmp	r4, r5
 800ad9e:	d101      	bne.n	800ada4 <__sfputs_r+0x12>
 800ada0:	2000      	movs	r0, #0
 800ada2:	e007      	b.n	800adb4 <__sfputs_r+0x22>
 800ada4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada8:	463a      	mov	r2, r7
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ffda 	bl	800ad64 <__sfputc_r>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d1f3      	bne.n	800ad9c <__sfputs_r+0xa>
 800adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adb8 <_vfiprintf_r>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	460d      	mov	r5, r1
 800adbe:	b09d      	sub	sp, #116	; 0x74
 800adc0:	4614      	mov	r4, r2
 800adc2:	4698      	mov	r8, r3
 800adc4:	4606      	mov	r6, r0
 800adc6:	b118      	cbz	r0, 800add0 <_vfiprintf_r+0x18>
 800adc8:	6983      	ldr	r3, [r0, #24]
 800adca:	b90b      	cbnz	r3, 800add0 <_vfiprintf_r+0x18>
 800adcc:	f000 fb14 	bl	800b3f8 <__sinit>
 800add0:	4b89      	ldr	r3, [pc, #548]	; (800aff8 <_vfiprintf_r+0x240>)
 800add2:	429d      	cmp	r5, r3
 800add4:	d11b      	bne.n	800ae0e <_vfiprintf_r+0x56>
 800add6:	6875      	ldr	r5, [r6, #4]
 800add8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adda:	07d9      	lsls	r1, r3, #31
 800addc:	d405      	bmi.n	800adea <_vfiprintf_r+0x32>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	059a      	lsls	r2, r3, #22
 800ade2:	d402      	bmi.n	800adea <_vfiprintf_r+0x32>
 800ade4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ade6:	f000 fba5 	bl	800b534 <__retarget_lock_acquire_recursive>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	071b      	lsls	r3, r3, #28
 800adee:	d501      	bpl.n	800adf4 <_vfiprintf_r+0x3c>
 800adf0:	692b      	ldr	r3, [r5, #16]
 800adf2:	b9eb      	cbnz	r3, 800ae30 <_vfiprintf_r+0x78>
 800adf4:	4629      	mov	r1, r5
 800adf6:	4630      	mov	r0, r6
 800adf8:	f000 f96e 	bl	800b0d8 <__swsetup_r>
 800adfc:	b1c0      	cbz	r0, 800ae30 <_vfiprintf_r+0x78>
 800adfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae00:	07dc      	lsls	r4, r3, #31
 800ae02:	d50e      	bpl.n	800ae22 <_vfiprintf_r+0x6a>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	b01d      	add	sp, #116	; 0x74
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	4b7b      	ldr	r3, [pc, #492]	; (800affc <_vfiprintf_r+0x244>)
 800ae10:	429d      	cmp	r5, r3
 800ae12:	d101      	bne.n	800ae18 <_vfiprintf_r+0x60>
 800ae14:	68b5      	ldr	r5, [r6, #8]
 800ae16:	e7df      	b.n	800add8 <_vfiprintf_r+0x20>
 800ae18:	4b79      	ldr	r3, [pc, #484]	; (800b000 <_vfiprintf_r+0x248>)
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf08      	it	eq
 800ae1e:	68f5      	ldreq	r5, [r6, #12]
 800ae20:	e7da      	b.n	800add8 <_vfiprintf_r+0x20>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	0598      	lsls	r0, r3, #22
 800ae26:	d4ed      	bmi.n	800ae04 <_vfiprintf_r+0x4c>
 800ae28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae2a:	f000 fb84 	bl	800b536 <__retarget_lock_release_recursive>
 800ae2e:	e7e9      	b.n	800ae04 <_vfiprintf_r+0x4c>
 800ae30:	2300      	movs	r3, #0
 800ae32:	9309      	str	r3, [sp, #36]	; 0x24
 800ae34:	2320      	movs	r3, #32
 800ae36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae3e:	2330      	movs	r3, #48	; 0x30
 800ae40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b004 <_vfiprintf_r+0x24c>
 800ae44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae48:	f04f 0901 	mov.w	r9, #1
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	469a      	mov	sl, r3
 800ae50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae54:	b10a      	cbz	r2, 800ae5a <_vfiprintf_r+0xa2>
 800ae56:	2a25      	cmp	r2, #37	; 0x25
 800ae58:	d1f9      	bne.n	800ae4e <_vfiprintf_r+0x96>
 800ae5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae5e:	d00b      	beq.n	800ae78 <_vfiprintf_r+0xc0>
 800ae60:	465b      	mov	r3, fp
 800ae62:	4622      	mov	r2, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff93 	bl	800ad92 <__sfputs_r>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f000 80aa 	beq.w	800afc6 <_vfiprintf_r+0x20e>
 800ae72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae74:	445a      	add	r2, fp
 800ae76:	9209      	str	r2, [sp, #36]	; 0x24
 800ae78:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 80a2 	beq.w	800afc6 <_vfiprintf_r+0x20e>
 800ae82:	2300      	movs	r3, #0
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8c:	f10a 0a01 	add.w	sl, sl, #1
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	9307      	str	r3, [sp, #28]
 800ae94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae98:	931a      	str	r3, [sp, #104]	; 0x68
 800ae9a:	4654      	mov	r4, sl
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea2:	4858      	ldr	r0, [pc, #352]	; (800b004 <_vfiprintf_r+0x24c>)
 800aea4:	f7f5 f9d4 	bl	8000250 <memchr>
 800aea8:	9a04      	ldr	r2, [sp, #16]
 800aeaa:	b9d8      	cbnz	r0, 800aee4 <_vfiprintf_r+0x12c>
 800aeac:	06d1      	lsls	r1, r2, #27
 800aeae:	bf44      	itt	mi
 800aeb0:	2320      	movmi	r3, #32
 800aeb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb6:	0713      	lsls	r3, r2, #28
 800aeb8:	bf44      	itt	mi
 800aeba:	232b      	movmi	r3, #43	; 0x2b
 800aebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec0:	f89a 3000 	ldrb.w	r3, [sl]
 800aec4:	2b2a      	cmp	r3, #42	; 0x2a
 800aec6:	d015      	beq.n	800aef4 <_vfiprintf_r+0x13c>
 800aec8:	9a07      	ldr	r2, [sp, #28]
 800aeca:	4654      	mov	r4, sl
 800aecc:	2000      	movs	r0, #0
 800aece:	f04f 0c0a 	mov.w	ip, #10
 800aed2:	4621      	mov	r1, r4
 800aed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed8:	3b30      	subs	r3, #48	; 0x30
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	d94e      	bls.n	800af7c <_vfiprintf_r+0x1c4>
 800aede:	b1b0      	cbz	r0, 800af0e <_vfiprintf_r+0x156>
 800aee0:	9207      	str	r2, [sp, #28]
 800aee2:	e014      	b.n	800af0e <_vfiprintf_r+0x156>
 800aee4:	eba0 0308 	sub.w	r3, r0, r8
 800aee8:	fa09 f303 	lsl.w	r3, r9, r3
 800aeec:	4313      	orrs	r3, r2
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	46a2      	mov	sl, r4
 800aef2:	e7d2      	b.n	800ae9a <_vfiprintf_r+0xe2>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	1d19      	adds	r1, r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	9103      	str	r1, [sp, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbb      	ittet	lt
 800af00:	425b      	neglt	r3, r3
 800af02:	f042 0202 	orrlt.w	r2, r2, #2
 800af06:	9307      	strge	r3, [sp, #28]
 800af08:	9307      	strlt	r3, [sp, #28]
 800af0a:	bfb8      	it	lt
 800af0c:	9204      	strlt	r2, [sp, #16]
 800af0e:	7823      	ldrb	r3, [r4, #0]
 800af10:	2b2e      	cmp	r3, #46	; 0x2e
 800af12:	d10c      	bne.n	800af2e <_vfiprintf_r+0x176>
 800af14:	7863      	ldrb	r3, [r4, #1]
 800af16:	2b2a      	cmp	r3, #42	; 0x2a
 800af18:	d135      	bne.n	800af86 <_vfiprintf_r+0x1ce>
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	1d1a      	adds	r2, r3, #4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	9203      	str	r2, [sp, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfb8      	it	lt
 800af26:	f04f 33ff 	movlt.w	r3, #4294967295
 800af2a:	3402      	adds	r4, #2
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b014 <_vfiprintf_r+0x25c>
 800af32:	7821      	ldrb	r1, [r4, #0]
 800af34:	2203      	movs	r2, #3
 800af36:	4650      	mov	r0, sl
 800af38:	f7f5 f98a 	bl	8000250 <memchr>
 800af3c:	b140      	cbz	r0, 800af50 <_vfiprintf_r+0x198>
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	eba0 000a 	sub.w	r0, r0, sl
 800af44:	fa03 f000 	lsl.w	r0, r3, r0
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	4303      	orrs	r3, r0
 800af4c:	3401      	adds	r4, #1
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af54:	482c      	ldr	r0, [pc, #176]	; (800b008 <_vfiprintf_r+0x250>)
 800af56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5a:	2206      	movs	r2, #6
 800af5c:	f7f5 f978 	bl	8000250 <memchr>
 800af60:	2800      	cmp	r0, #0
 800af62:	d03f      	beq.n	800afe4 <_vfiprintf_r+0x22c>
 800af64:	4b29      	ldr	r3, [pc, #164]	; (800b00c <_vfiprintf_r+0x254>)
 800af66:	bb1b      	cbnz	r3, 800afb0 <_vfiprintf_r+0x1f8>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	3307      	adds	r3, #7
 800af6c:	f023 0307 	bic.w	r3, r3, #7
 800af70:	3308      	adds	r3, #8
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af76:	443b      	add	r3, r7
 800af78:	9309      	str	r3, [sp, #36]	; 0x24
 800af7a:	e767      	b.n	800ae4c <_vfiprintf_r+0x94>
 800af7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af80:	460c      	mov	r4, r1
 800af82:	2001      	movs	r0, #1
 800af84:	e7a5      	b.n	800aed2 <_vfiprintf_r+0x11a>
 800af86:	2300      	movs	r3, #0
 800af88:	3401      	adds	r4, #1
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	4619      	mov	r1, r3
 800af8e:	f04f 0c0a 	mov.w	ip, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af98:	3a30      	subs	r2, #48	; 0x30
 800af9a:	2a09      	cmp	r2, #9
 800af9c:	d903      	bls.n	800afa6 <_vfiprintf_r+0x1ee>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0c5      	beq.n	800af2e <_vfiprintf_r+0x176>
 800afa2:	9105      	str	r1, [sp, #20]
 800afa4:	e7c3      	b.n	800af2e <_vfiprintf_r+0x176>
 800afa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afaa:	4604      	mov	r4, r0
 800afac:	2301      	movs	r3, #1
 800afae:	e7f0      	b.n	800af92 <_vfiprintf_r+0x1da>
 800afb0:	ab03      	add	r3, sp, #12
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	462a      	mov	r2, r5
 800afb6:	4b16      	ldr	r3, [pc, #88]	; (800b010 <_vfiprintf_r+0x258>)
 800afb8:	a904      	add	r1, sp, #16
 800afba:	4630      	mov	r0, r6
 800afbc:	f7fd fea4 	bl	8008d08 <_printf_float>
 800afc0:	4607      	mov	r7, r0
 800afc2:	1c78      	adds	r0, r7, #1
 800afc4:	d1d6      	bne.n	800af74 <_vfiprintf_r+0x1bc>
 800afc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc8:	07d9      	lsls	r1, r3, #31
 800afca:	d405      	bmi.n	800afd8 <_vfiprintf_r+0x220>
 800afcc:	89ab      	ldrh	r3, [r5, #12]
 800afce:	059a      	lsls	r2, r3, #22
 800afd0:	d402      	bmi.n	800afd8 <_vfiprintf_r+0x220>
 800afd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd4:	f000 faaf 	bl	800b536 <__retarget_lock_release_recursive>
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	065b      	lsls	r3, r3, #25
 800afdc:	f53f af12 	bmi.w	800ae04 <_vfiprintf_r+0x4c>
 800afe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe2:	e711      	b.n	800ae08 <_vfiprintf_r+0x50>
 800afe4:	ab03      	add	r3, sp, #12
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	462a      	mov	r2, r5
 800afea:	4b09      	ldr	r3, [pc, #36]	; (800b010 <_vfiprintf_r+0x258>)
 800afec:	a904      	add	r1, sp, #16
 800afee:	4630      	mov	r0, r6
 800aff0:	f7fe f916 	bl	8009220 <_printf_i>
 800aff4:	e7e4      	b.n	800afc0 <_vfiprintf_r+0x208>
 800aff6:	bf00      	nop
 800aff8:	0800be94 	.word	0x0800be94
 800affc:	0800beb4 	.word	0x0800beb4
 800b000:	0800be74 	.word	0x0800be74
 800b004:	0800bd1c 	.word	0x0800bd1c
 800b008:	0800bd26 	.word	0x0800bd26
 800b00c:	08008d09 	.word	0x08008d09
 800b010:	0800ad93 	.word	0x0800ad93
 800b014:	0800bd22 	.word	0x0800bd22

0800b018 <__swbuf_r>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	460e      	mov	r6, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	4605      	mov	r5, r0
 800b020:	b118      	cbz	r0, 800b02a <__swbuf_r+0x12>
 800b022:	6983      	ldr	r3, [r0, #24]
 800b024:	b90b      	cbnz	r3, 800b02a <__swbuf_r+0x12>
 800b026:	f000 f9e7 	bl	800b3f8 <__sinit>
 800b02a:	4b21      	ldr	r3, [pc, #132]	; (800b0b0 <__swbuf_r+0x98>)
 800b02c:	429c      	cmp	r4, r3
 800b02e:	d12b      	bne.n	800b088 <__swbuf_r+0x70>
 800b030:	686c      	ldr	r4, [r5, #4]
 800b032:	69a3      	ldr	r3, [r4, #24]
 800b034:	60a3      	str	r3, [r4, #8]
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	071a      	lsls	r2, r3, #28
 800b03a:	d52f      	bpl.n	800b09c <__swbuf_r+0x84>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	b36b      	cbz	r3, 800b09c <__swbuf_r+0x84>
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	6820      	ldr	r0, [r4, #0]
 800b044:	1ac0      	subs	r0, r0, r3
 800b046:	6963      	ldr	r3, [r4, #20]
 800b048:	b2f6      	uxtb	r6, r6
 800b04a:	4283      	cmp	r3, r0
 800b04c:	4637      	mov	r7, r6
 800b04e:	dc04      	bgt.n	800b05a <__swbuf_r+0x42>
 800b050:	4621      	mov	r1, r4
 800b052:	4628      	mov	r0, r5
 800b054:	f000 f93c 	bl	800b2d0 <_fflush_r>
 800b058:	bb30      	cbnz	r0, 800b0a8 <__swbuf_r+0x90>
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	60a3      	str	r3, [r4, #8]
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	6022      	str	r2, [r4, #0]
 800b066:	701e      	strb	r6, [r3, #0]
 800b068:	6963      	ldr	r3, [r4, #20]
 800b06a:	3001      	adds	r0, #1
 800b06c:	4283      	cmp	r3, r0
 800b06e:	d004      	beq.n	800b07a <__swbuf_r+0x62>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	07db      	lsls	r3, r3, #31
 800b074:	d506      	bpl.n	800b084 <__swbuf_r+0x6c>
 800b076:	2e0a      	cmp	r6, #10
 800b078:	d104      	bne.n	800b084 <__swbuf_r+0x6c>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 f927 	bl	800b2d0 <_fflush_r>
 800b082:	b988      	cbnz	r0, 800b0a8 <__swbuf_r+0x90>
 800b084:	4638      	mov	r0, r7
 800b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <__swbuf_r+0x9c>)
 800b08a:	429c      	cmp	r4, r3
 800b08c:	d101      	bne.n	800b092 <__swbuf_r+0x7a>
 800b08e:	68ac      	ldr	r4, [r5, #8]
 800b090:	e7cf      	b.n	800b032 <__swbuf_r+0x1a>
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <__swbuf_r+0xa0>)
 800b094:	429c      	cmp	r4, r3
 800b096:	bf08      	it	eq
 800b098:	68ec      	ldreq	r4, [r5, #12]
 800b09a:	e7ca      	b.n	800b032 <__swbuf_r+0x1a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f81a 	bl	800b0d8 <__swsetup_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d0cb      	beq.n	800b040 <__swbuf_r+0x28>
 800b0a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b0ac:	e7ea      	b.n	800b084 <__swbuf_r+0x6c>
 800b0ae:	bf00      	nop
 800b0b0:	0800be94 	.word	0x0800be94
 800b0b4:	0800beb4 	.word	0x0800beb4
 800b0b8:	0800be74 	.word	0x0800be74

0800b0bc <__ascii_wctomb>:
 800b0bc:	b149      	cbz	r1, 800b0d2 <__ascii_wctomb+0x16>
 800b0be:	2aff      	cmp	r2, #255	; 0xff
 800b0c0:	bf85      	ittet	hi
 800b0c2:	238a      	movhi	r3, #138	; 0x8a
 800b0c4:	6003      	strhi	r3, [r0, #0]
 800b0c6:	700a      	strbls	r2, [r1, #0]
 800b0c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0cc:	bf98      	it	ls
 800b0ce:	2001      	movls	r0, #1
 800b0d0:	4770      	bx	lr
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__swsetup_r>:
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <__swsetup_r+0xcc>)
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b125      	cbz	r5, 800b0ee <__swsetup_r+0x16>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__swsetup_r+0x16>
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 f985 	bl	800b3f8 <__sinit>
 800b0ee:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <__swsetup_r+0xd0>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d10f      	bne.n	800b114 <__swsetup_r+0x3c>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0fc:	0719      	lsls	r1, r3, #28
 800b0fe:	d42c      	bmi.n	800b15a <__swsetup_r+0x82>
 800b100:	06dd      	lsls	r5, r3, #27
 800b102:	d411      	bmi.n	800b128 <__swsetup_r+0x50>
 800b104:	2309      	movs	r3, #9
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	e03e      	b.n	800b192 <__swsetup_r+0xba>
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <__swsetup_r+0xd4>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <__swsetup_r+0x46>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7eb      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <__swsetup_r+0xd8>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7e6      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b128:	0758      	lsls	r0, r3, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x7a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x6a>
 800b130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x66>
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fb6f 	bl	800a81c <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	; 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x9a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x9a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 fa07 	bl	800b580 <__smakebuf_r>
 800b172:	89a0      	ldrh	r0, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	f010 0301 	ands.w	r3, r0, #1
 800b17c:	d00a      	beq.n	800b194 <__swsetup_r+0xbc>
 800b17e:	2300      	movs	r3, #0
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	425b      	negs	r3, r3
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	b943      	cbnz	r3, 800b19e <__swsetup_r+0xc6>
 800b18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b190:	d1ba      	bne.n	800b108 <__swsetup_r+0x30>
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0781      	lsls	r1, r0, #30
 800b196:	bf58      	it	pl
 800b198:	6963      	ldrpl	r3, [r4, #20]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	e7f4      	b.n	800b188 <__swsetup_r+0xb0>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7f7      	b.n	800b192 <__swsetup_r+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	20000020 	.word	0x20000020
 800b1a8:	0800be94 	.word	0x0800be94
 800b1ac:	0800beb4 	.word	0x0800beb4
 800b1b0:	0800be74 	.word	0x0800be74

0800b1b4 <abort>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	2006      	movs	r0, #6
 800b1b8:	f000 fa52 	bl	800b660 <raise>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7f7 f96d 	bl	800249c <_exit>
	...

0800b1c4 <__sflush_r>:
 800b1c4:	898a      	ldrh	r2, [r1, #12]
 800b1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	0710      	lsls	r0, r2, #28
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	d458      	bmi.n	800b284 <__sflush_r+0xc0>
 800b1d2:	684b      	ldr	r3, [r1, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc05      	bgt.n	800b1e4 <__sflush_r+0x20>
 800b1d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dc02      	bgt.n	800b1e4 <__sflush_r+0x20>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d0f9      	beq.n	800b1de <__sflush_r+0x1a>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1f0:	682f      	ldr	r7, [r5, #0]
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	d032      	beq.n	800b25c <__sflush_r+0x98>
 800b1f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	075a      	lsls	r2, r3, #29
 800b1fc:	d505      	bpl.n	800b20a <__sflush_r+0x46>
 800b1fe:	6863      	ldr	r3, [r4, #4]
 800b200:	1ac0      	subs	r0, r0, r3
 800b202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b204:	b10b      	cbz	r3, 800b20a <__sflush_r+0x46>
 800b206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b208:	1ac0      	subs	r0, r0, r3
 800b20a:	2300      	movs	r3, #0
 800b20c:	4602      	mov	r2, r0
 800b20e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	4628      	mov	r0, r5
 800b214:	47b0      	blx	r6
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	d106      	bne.n	800b22a <__sflush_r+0x66>
 800b21c:	6829      	ldr	r1, [r5, #0]
 800b21e:	291d      	cmp	r1, #29
 800b220:	d82c      	bhi.n	800b27c <__sflush_r+0xb8>
 800b222:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <__sflush_r+0x108>)
 800b224:	40ca      	lsrs	r2, r1
 800b226:	07d6      	lsls	r6, r2, #31
 800b228:	d528      	bpl.n	800b27c <__sflush_r+0xb8>
 800b22a:	2200      	movs	r2, #0
 800b22c:	6062      	str	r2, [r4, #4]
 800b22e:	04d9      	lsls	r1, r3, #19
 800b230:	6922      	ldr	r2, [r4, #16]
 800b232:	6022      	str	r2, [r4, #0]
 800b234:	d504      	bpl.n	800b240 <__sflush_r+0x7c>
 800b236:	1c42      	adds	r2, r0, #1
 800b238:	d101      	bne.n	800b23e <__sflush_r+0x7a>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	b903      	cbnz	r3, 800b240 <__sflush_r+0x7c>
 800b23e:	6560      	str	r0, [r4, #84]	; 0x54
 800b240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b242:	602f      	str	r7, [r5, #0]
 800b244:	2900      	cmp	r1, #0
 800b246:	d0ca      	beq.n	800b1de <__sflush_r+0x1a>
 800b248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b24c:	4299      	cmp	r1, r3
 800b24e:	d002      	beq.n	800b256 <__sflush_r+0x92>
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fae3 	bl	800a81c <_free_r>
 800b256:	2000      	movs	r0, #0
 800b258:	6360      	str	r0, [r4, #52]	; 0x34
 800b25a:	e7c1      	b.n	800b1e0 <__sflush_r+0x1c>
 800b25c:	6a21      	ldr	r1, [r4, #32]
 800b25e:	2301      	movs	r3, #1
 800b260:	4628      	mov	r0, r5
 800b262:	47b0      	blx	r6
 800b264:	1c41      	adds	r1, r0, #1
 800b266:	d1c7      	bne.n	800b1f8 <__sflush_r+0x34>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0c4      	beq.n	800b1f8 <__sflush_r+0x34>
 800b26e:	2b1d      	cmp	r3, #29
 800b270:	d001      	beq.n	800b276 <__sflush_r+0xb2>
 800b272:	2b16      	cmp	r3, #22
 800b274:	d101      	bne.n	800b27a <__sflush_r+0xb6>
 800b276:	602f      	str	r7, [r5, #0]
 800b278:	e7b1      	b.n	800b1de <__sflush_r+0x1a>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b280:	81a3      	strh	r3, [r4, #12]
 800b282:	e7ad      	b.n	800b1e0 <__sflush_r+0x1c>
 800b284:	690f      	ldr	r7, [r1, #16]
 800b286:	2f00      	cmp	r7, #0
 800b288:	d0a9      	beq.n	800b1de <__sflush_r+0x1a>
 800b28a:	0793      	lsls	r3, r2, #30
 800b28c:	680e      	ldr	r6, [r1, #0]
 800b28e:	bf08      	it	eq
 800b290:	694b      	ldreq	r3, [r1, #20]
 800b292:	600f      	str	r7, [r1, #0]
 800b294:	bf18      	it	ne
 800b296:	2300      	movne	r3, #0
 800b298:	eba6 0807 	sub.w	r8, r6, r7
 800b29c:	608b      	str	r3, [r1, #8]
 800b29e:	f1b8 0f00 	cmp.w	r8, #0
 800b2a2:	dd9c      	ble.n	800b1de <__sflush_r+0x1a>
 800b2a4:	6a21      	ldr	r1, [r4, #32]
 800b2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2a8:	4643      	mov	r3, r8
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	47b0      	blx	r6
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dc06      	bgt.n	800b2c2 <__sflush_r+0xfe>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e78e      	b.n	800b1e0 <__sflush_r+0x1c>
 800b2c2:	4407      	add	r7, r0
 800b2c4:	eba8 0800 	sub.w	r8, r8, r0
 800b2c8:	e7e9      	b.n	800b29e <__sflush_r+0xda>
 800b2ca:	bf00      	nop
 800b2cc:	20400001 	.word	0x20400001

0800b2d0 <_fflush_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	690b      	ldr	r3, [r1, #16]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b913      	cbnz	r3, 800b2e0 <_fflush_r+0x10>
 800b2da:	2500      	movs	r5, #0
 800b2dc:	4628      	mov	r0, r5
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	b118      	cbz	r0, 800b2ea <_fflush_r+0x1a>
 800b2e2:	6983      	ldr	r3, [r0, #24]
 800b2e4:	b90b      	cbnz	r3, 800b2ea <_fflush_r+0x1a>
 800b2e6:	f000 f887 	bl	800b3f8 <__sinit>
 800b2ea:	4b14      	ldr	r3, [pc, #80]	; (800b33c <_fflush_r+0x6c>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	d11b      	bne.n	800b328 <_fflush_r+0x58>
 800b2f0:	686c      	ldr	r4, [r5, #4]
 800b2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0ef      	beq.n	800b2da <_fflush_r+0xa>
 800b2fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2fc:	07d0      	lsls	r0, r2, #31
 800b2fe:	d404      	bmi.n	800b30a <_fflush_r+0x3a>
 800b300:	0599      	lsls	r1, r3, #22
 800b302:	d402      	bmi.n	800b30a <_fflush_r+0x3a>
 800b304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b306:	f000 f915 	bl	800b534 <__retarget_lock_acquire_recursive>
 800b30a:	4628      	mov	r0, r5
 800b30c:	4621      	mov	r1, r4
 800b30e:	f7ff ff59 	bl	800b1c4 <__sflush_r>
 800b312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b314:	07da      	lsls	r2, r3, #31
 800b316:	4605      	mov	r5, r0
 800b318:	d4e0      	bmi.n	800b2dc <_fflush_r+0xc>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	059b      	lsls	r3, r3, #22
 800b31e:	d4dd      	bmi.n	800b2dc <_fflush_r+0xc>
 800b320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b322:	f000 f908 	bl	800b536 <__retarget_lock_release_recursive>
 800b326:	e7d9      	b.n	800b2dc <_fflush_r+0xc>
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <_fflush_r+0x70>)
 800b32a:	429c      	cmp	r4, r3
 800b32c:	d101      	bne.n	800b332 <_fflush_r+0x62>
 800b32e:	68ac      	ldr	r4, [r5, #8]
 800b330:	e7df      	b.n	800b2f2 <_fflush_r+0x22>
 800b332:	4b04      	ldr	r3, [pc, #16]	; (800b344 <_fflush_r+0x74>)
 800b334:	429c      	cmp	r4, r3
 800b336:	bf08      	it	eq
 800b338:	68ec      	ldreq	r4, [r5, #12]
 800b33a:	e7da      	b.n	800b2f2 <_fflush_r+0x22>
 800b33c:	0800be94 	.word	0x0800be94
 800b340:	0800beb4 	.word	0x0800beb4
 800b344:	0800be74 	.word	0x0800be74

0800b348 <std>:
 800b348:	2300      	movs	r3, #0
 800b34a:	b510      	push	{r4, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	e9c0 3300 	strd	r3, r3, [r0]
 800b352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	8181      	strh	r1, [r0, #12]
 800b35a:	6643      	str	r3, [r0, #100]	; 0x64
 800b35c:	81c2      	strh	r2, [r0, #14]
 800b35e:	6183      	str	r3, [r0, #24]
 800b360:	4619      	mov	r1, r3
 800b362:	2208      	movs	r2, #8
 800b364:	305c      	adds	r0, #92	; 0x5c
 800b366:	f7fd fc37 	bl	8008bd8 <memset>
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <std+0x38>)
 800b36c:	6263      	str	r3, [r4, #36]	; 0x24
 800b36e:	4b05      	ldr	r3, [pc, #20]	; (800b384 <std+0x3c>)
 800b370:	62a3      	str	r3, [r4, #40]	; 0x28
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <std+0x40>)
 800b374:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x44>)
 800b378:	6224      	str	r4, [r4, #32]
 800b37a:	6323      	str	r3, [r4, #48]	; 0x30
 800b37c:	bd10      	pop	{r4, pc}
 800b37e:	bf00      	nop
 800b380:	0800b699 	.word	0x0800b699
 800b384:	0800b6bb 	.word	0x0800b6bb
 800b388:	0800b6f3 	.word	0x0800b6f3
 800b38c:	0800b717 	.word	0x0800b717

0800b390 <_cleanup_r>:
 800b390:	4901      	ldr	r1, [pc, #4]	; (800b398 <_cleanup_r+0x8>)
 800b392:	f000 b8af 	b.w	800b4f4 <_fwalk_reent>
 800b396:	bf00      	nop
 800b398:	0800b2d1 	.word	0x0800b2d1

0800b39c <__sfmoreglue>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	1e4a      	subs	r2, r1, #1
 800b3a0:	2568      	movs	r5, #104	; 0x68
 800b3a2:	4355      	muls	r5, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3aa:	f7ff fa87 	bl	800a8bc <_malloc_r>
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	b140      	cbz	r0, 800b3c4 <__sfmoreglue+0x28>
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3b8:	300c      	adds	r0, #12
 800b3ba:	60a0      	str	r0, [r4, #8]
 800b3bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3c0:	f7fd fc0a 	bl	8008bd8 <memset>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <__sfp_lock_acquire>:
 800b3c8:	4801      	ldr	r0, [pc, #4]	; (800b3d0 <__sfp_lock_acquire+0x8>)
 800b3ca:	f000 b8b3 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b3ce:	bf00      	nop
 800b3d0:	200006cc 	.word	0x200006cc

0800b3d4 <__sfp_lock_release>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__sfp_lock_release+0x8>)
 800b3d6:	f000 b8ae 	b.w	800b536 <__retarget_lock_release_recursive>
 800b3da:	bf00      	nop
 800b3dc:	200006cc 	.word	0x200006cc

0800b3e0 <__sinit_lock_acquire>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__sinit_lock_acquire+0x8>)
 800b3e2:	f000 b8a7 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	200006c7 	.word	0x200006c7

0800b3ec <__sinit_lock_release>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	; (800b3f4 <__sinit_lock_release+0x8>)
 800b3ee:	f000 b8a2 	b.w	800b536 <__retarget_lock_release_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	200006c7 	.word	0x200006c7

0800b3f8 <__sinit>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	f7ff fff0 	bl	800b3e0 <__sinit_lock_acquire>
 800b400:	69a3      	ldr	r3, [r4, #24]
 800b402:	b11b      	cbz	r3, 800b40c <__sinit+0x14>
 800b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b408:	f7ff bff0 	b.w	800b3ec <__sinit_lock_release>
 800b40c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b410:	6523      	str	r3, [r4, #80]	; 0x50
 800b412:	4b13      	ldr	r3, [pc, #76]	; (800b460 <__sinit+0x68>)
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <__sinit+0x6c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	62a2      	str	r2, [r4, #40]	; 0x28
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	bf04      	itt	eq
 800b41e:	2301      	moveq	r3, #1
 800b420:	61a3      	streq	r3, [r4, #24]
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f820 	bl	800b468 <__sfp>
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 f81c 	bl	800b468 <__sfp>
 800b430:	60a0      	str	r0, [r4, #8]
 800b432:	4620      	mov	r0, r4
 800b434:	f000 f818 	bl	800b468 <__sfp>
 800b438:	2200      	movs	r2, #0
 800b43a:	60e0      	str	r0, [r4, #12]
 800b43c:	2104      	movs	r1, #4
 800b43e:	6860      	ldr	r0, [r4, #4]
 800b440:	f7ff ff82 	bl	800b348 <std>
 800b444:	68a0      	ldr	r0, [r4, #8]
 800b446:	2201      	movs	r2, #1
 800b448:	2109      	movs	r1, #9
 800b44a:	f7ff ff7d 	bl	800b348 <std>
 800b44e:	68e0      	ldr	r0, [r4, #12]
 800b450:	2202      	movs	r2, #2
 800b452:	2112      	movs	r1, #18
 800b454:	f7ff ff78 	bl	800b348 <std>
 800b458:	2301      	movs	r3, #1
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	e7d2      	b.n	800b404 <__sinit+0xc>
 800b45e:	bf00      	nop
 800b460:	0800baf0 	.word	0x0800baf0
 800b464:	0800b391 	.word	0x0800b391

0800b468 <__sfp>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4607      	mov	r7, r0
 800b46c:	f7ff ffac 	bl	800b3c8 <__sfp_lock_acquire>
 800b470:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <__sfp+0x84>)
 800b472:	681e      	ldr	r6, [r3, #0]
 800b474:	69b3      	ldr	r3, [r6, #24]
 800b476:	b913      	cbnz	r3, 800b47e <__sfp+0x16>
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ffbd 	bl	800b3f8 <__sinit>
 800b47e:	3648      	adds	r6, #72	; 0x48
 800b480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b484:	3b01      	subs	r3, #1
 800b486:	d503      	bpl.n	800b490 <__sfp+0x28>
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	b30b      	cbz	r3, 800b4d0 <__sfp+0x68>
 800b48c:	6836      	ldr	r6, [r6, #0]
 800b48e:	e7f7      	b.n	800b480 <__sfp+0x18>
 800b490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b494:	b9d5      	cbnz	r5, 800b4cc <__sfp+0x64>
 800b496:	4b16      	ldr	r3, [pc, #88]	; (800b4f0 <__sfp+0x88>)
 800b498:	60e3      	str	r3, [r4, #12]
 800b49a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b49e:	6665      	str	r5, [r4, #100]	; 0x64
 800b4a0:	f000 f847 	bl	800b532 <__retarget_lock_init_recursive>
 800b4a4:	f7ff ff96 	bl	800b3d4 <__sfp_lock_release>
 800b4a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	61a5      	str	r5, [r4, #24]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4bc:	f7fd fb8c 	bl	8008bd8 <memset>
 800b4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4cc:	3468      	adds	r4, #104	; 0x68
 800b4ce:	e7d9      	b.n	800b484 <__sfp+0x1c>
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ff62 	bl	800b39c <__sfmoreglue>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1d5      	bne.n	800b48c <__sfp+0x24>
 800b4e0:	f7ff ff78 	bl	800b3d4 <__sfp_lock_release>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	e7ee      	b.n	800b4c8 <__sfp+0x60>
 800b4ea:	bf00      	nop
 800b4ec:	0800baf0 	.word	0x0800baf0
 800b4f0:	ffff0001 	.word	0xffff0001

0800b4f4 <_fwalk_reent>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	4688      	mov	r8, r1
 800b4fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b500:	2700      	movs	r7, #0
 800b502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b506:	f1b9 0901 	subs.w	r9, r9, #1
 800b50a:	d505      	bpl.n	800b518 <_fwalk_reent+0x24>
 800b50c:	6824      	ldr	r4, [r4, #0]
 800b50e:	2c00      	cmp	r4, #0
 800b510:	d1f7      	bne.n	800b502 <_fwalk_reent+0xe>
 800b512:	4638      	mov	r0, r7
 800b514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b518:	89ab      	ldrh	r3, [r5, #12]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d907      	bls.n	800b52e <_fwalk_reent+0x3a>
 800b51e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b522:	3301      	adds	r3, #1
 800b524:	d003      	beq.n	800b52e <_fwalk_reent+0x3a>
 800b526:	4629      	mov	r1, r5
 800b528:	4630      	mov	r0, r6
 800b52a:	47c0      	blx	r8
 800b52c:	4307      	orrs	r7, r0
 800b52e:	3568      	adds	r5, #104	; 0x68
 800b530:	e7e9      	b.n	800b506 <_fwalk_reent+0x12>

0800b532 <__retarget_lock_init_recursive>:
 800b532:	4770      	bx	lr

0800b534 <__retarget_lock_acquire_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_release_recursive>:
 800b536:	4770      	bx	lr

0800b538 <__swhatbuf_r>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	460e      	mov	r6, r1
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	2900      	cmp	r1, #0
 800b542:	b096      	sub	sp, #88	; 0x58
 800b544:	4614      	mov	r4, r2
 800b546:	461d      	mov	r5, r3
 800b548:	da07      	bge.n	800b55a <__swhatbuf_r+0x22>
 800b54a:	2300      	movs	r3, #0
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	89b3      	ldrh	r3, [r6, #12]
 800b550:	061a      	lsls	r2, r3, #24
 800b552:	d410      	bmi.n	800b576 <__swhatbuf_r+0x3e>
 800b554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b558:	e00e      	b.n	800b578 <__swhatbuf_r+0x40>
 800b55a:	466a      	mov	r2, sp
 800b55c:	f000 f902 	bl	800b764 <_fstat_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	dbf2      	blt.n	800b54a <__swhatbuf_r+0x12>
 800b564:	9a01      	ldr	r2, [sp, #4]
 800b566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b56a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b56e:	425a      	negs	r2, r3
 800b570:	415a      	adcs	r2, r3
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	e7ee      	b.n	800b554 <__swhatbuf_r+0x1c>
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	2000      	movs	r0, #0
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	b016      	add	sp, #88	; 0x58
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <__smakebuf_r>:
 800b580:	898b      	ldrh	r3, [r1, #12]
 800b582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b584:	079d      	lsls	r5, r3, #30
 800b586:	4606      	mov	r6, r0
 800b588:	460c      	mov	r4, r1
 800b58a:	d507      	bpl.n	800b59c <__smakebuf_r+0x1c>
 800b58c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	2301      	movs	r3, #1
 800b596:	6163      	str	r3, [r4, #20]
 800b598:	b002      	add	sp, #8
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	ab01      	add	r3, sp, #4
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f7ff ffca 	bl	800b538 <__swhatbuf_r>
 800b5a4:	9900      	ldr	r1, [sp, #0]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff f987 	bl	800a8bc <_malloc_r>
 800b5ae:	b948      	cbnz	r0, 800b5c4 <__smakebuf_r+0x44>
 800b5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b4:	059a      	lsls	r2, r3, #22
 800b5b6:	d4ef      	bmi.n	800b598 <__smakebuf_r+0x18>
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	e7e3      	b.n	800b58c <__smakebuf_r+0xc>
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <__smakebuf_r+0x7c>)
 800b5c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	6020      	str	r0, [r4, #0]
 800b5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	6163      	str	r3, [r4, #20]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	6120      	str	r0, [r4, #16]
 800b5da:	b15b      	cbz	r3, 800b5f4 <__smakebuf_r+0x74>
 800b5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f000 f8d1 	bl	800b788 <_isatty_r>
 800b5e6:	b128      	cbz	r0, 800b5f4 <__smakebuf_r+0x74>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	89a0      	ldrh	r0, [r4, #12]
 800b5f6:	4305      	orrs	r5, r0
 800b5f8:	81a5      	strh	r5, [r4, #12]
 800b5fa:	e7cd      	b.n	800b598 <__smakebuf_r+0x18>
 800b5fc:	0800b391 	.word	0x0800b391

0800b600 <_malloc_usable_size_r>:
 800b600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b604:	1f18      	subs	r0, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbc      	itt	lt
 800b60a:	580b      	ldrlt	r3, [r1, r0]
 800b60c:	18c0      	addlt	r0, r0, r3
 800b60e:	4770      	bx	lr

0800b610 <_raise_r>:
 800b610:	291f      	cmp	r1, #31
 800b612:	b538      	push	{r3, r4, r5, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	d904      	bls.n	800b624 <_raise_r+0x14>
 800b61a:	2316      	movs	r3, #22
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b626:	b112      	cbz	r2, 800b62e <_raise_r+0x1e>
 800b628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b62c:	b94b      	cbnz	r3, 800b642 <_raise_r+0x32>
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 f830 	bl	800b694 <_getpid_r>
 800b634:	462a      	mov	r2, r5
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63e:	f000 b817 	b.w	800b670 <_kill_r>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d00a      	beq.n	800b65c <_raise_r+0x4c>
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	d103      	bne.n	800b652 <_raise_r+0x42>
 800b64a:	2316      	movs	r3, #22
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	2001      	movs	r0, #1
 800b650:	e7e7      	b.n	800b622 <_raise_r+0x12>
 800b652:	2400      	movs	r4, #0
 800b654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b658:	4628      	mov	r0, r5
 800b65a:	4798      	blx	r3
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7e0      	b.n	800b622 <_raise_r+0x12>

0800b660 <raise>:
 800b660:	4b02      	ldr	r3, [pc, #8]	; (800b66c <raise+0xc>)
 800b662:	4601      	mov	r1, r0
 800b664:	6818      	ldr	r0, [r3, #0]
 800b666:	f7ff bfd3 	b.w	800b610 <_raise_r>
 800b66a:	bf00      	nop
 800b66c:	20000020 	.word	0x20000020

0800b670 <_kill_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_kill_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f7f6 fefd 	bl	800247c <_kill>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_kill_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_kill_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	200006c0 	.word	0x200006c0

0800b694 <_getpid_r>:
 800b694:	f7f6 beea 	b.w	800246c <_getpid>

0800b698 <__sread>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	460c      	mov	r4, r1
 800b69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a0:	f000 f894 	bl	800b7cc <_read_r>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	bfab      	itete	ge
 800b6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b6ac:	181b      	addge	r3, r3, r0
 800b6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6b2:	bfac      	ite	ge
 800b6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6b6:	81a3      	strhlt	r3, [r4, #12]
 800b6b8:	bd10      	pop	{r4, pc}

0800b6ba <__swrite>:
 800b6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	461f      	mov	r7, r3
 800b6c0:	898b      	ldrh	r3, [r1, #12]
 800b6c2:	05db      	lsls	r3, r3, #23
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4616      	mov	r6, r2
 800b6ca:	d505      	bpl.n	800b6d8 <__swrite+0x1e>
 800b6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f000 f868 	bl	800b7a8 <_lseek_r>
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	f000 b817 	b.w	800b720 <_write_r>

0800b6f2 <__sseek>:
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fa:	f000 f855 	bl	800b7a8 <_lseek_r>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	bf15      	itete	ne
 800b704:	6560      	strne	r0, [r4, #84]	; 0x54
 800b706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b70e:	81a3      	strheq	r3, [r4, #12]
 800b710:	bf18      	it	ne
 800b712:	81a3      	strhne	r3, [r4, #12]
 800b714:	bd10      	pop	{r4, pc}

0800b716 <__sclose>:
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 b813 	b.w	800b744 <_close_r>
	...

0800b720 <_write_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	; (800b740 <_write_r+0x20>)
 800b724:	4604      	mov	r4, r0
 800b726:	4608      	mov	r0, r1
 800b728:	4611      	mov	r1, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f7f6 fedb 	bl	80024ea <_write>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_write_r+0x1e>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_write_r+0x1e>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	200006c0 	.word	0x200006c0

0800b744 <_close_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	; (800b760 <_close_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f6 fee7 	bl	8002522 <_close>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_close_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_close_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	200006c0 	.word	0x200006c0

0800b764 <_fstat_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_fstat_r+0x20>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	4611      	mov	r1, r2
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	f7f6 fee2 	bl	800253a <_fstat>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d102      	bne.n	800b780 <_fstat_r+0x1c>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b103      	cbz	r3, 800b780 <_fstat_r+0x1c>
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	200006c0 	.word	0x200006c0

0800b788 <_isatty_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d06      	ldr	r5, [pc, #24]	; (800b7a4 <_isatty_r+0x1c>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f6 fee1 	bl	800255a <_isatty>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_isatty_r+0x1a>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_isatty_r+0x1a>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	200006c0 	.word	0x200006c0

0800b7a8 <_lseek_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	; (800b7c8 <_lseek_r+0x20>)
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	4608      	mov	r0, r1
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	602a      	str	r2, [r5, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f7f6 feda 	bl	8002570 <_lseek>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_lseek_r+0x1e>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_lseek_r+0x1e>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	200006c0 	.word	0x200006c0

0800b7cc <_read_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_read_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f6 fe68 	bl	80024b0 <_read>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_read_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_read_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	200006c0 	.word	0x200006c0

0800b7f0 <_init>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_fini>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr
